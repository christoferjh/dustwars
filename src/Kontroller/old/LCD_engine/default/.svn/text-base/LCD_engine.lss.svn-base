
LCD_engine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000964  00800100  00006ec6  00006f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800a64  00800a64  000078be  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  000078be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c4a  00000000  00000000  00007b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000667b  00000000  00000000  00008768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000238b  00000000  00000000  0000ede3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004faf  00000000  00000000  0001116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  00016120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eb9  00000000  00000000  00016b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c1f  00000000  00000000  00017a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  0001b658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__vector_24>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <gui_system_meny+0x152>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e4       	ldi	r29, 0x40	; 64
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	1a e0       	ldi	r17, 0x0A	; 10
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e6 ec       	ldi	r30, 0xC6	; 198
      be:	fe e6       	ldi	r31, 0x6E	; 110
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 36       	cpi	r26, 0x64	; 100
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	1a e0       	ldi	r17, 0x0A	; 10
      d2:	a4 e6       	ldi	r26, 0x64	; 100
      d4:	ba e0       	ldi	r27, 0x0A	; 10
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	aa 37       	cpi	r26, 0x7A	; 122
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 c0 06 	call	0xd80	; 0xd80 <main>
      e4:	0c 94 61 37 	jmp	0x6ec2	; 0x6ec2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <flash_finish>:
}
}

void flash_finish(){

}
      ec:	08 95       	ret

000000ee <draw_main_meny>:
while(1){}

}

void draw_main_meny(LCD_engine *lcd){
LCD_CLR();
      ee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
//LCD_RAM_CLR();
DOGENABLE;
      f2:	2c 98       	cbi	0x05, 4	; 5
LCD_setPage(0);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("Hello lcd_engine!Ö");
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(1);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("press A for PONG");
     114:	83 e1       	ldi	r24, 0x13	; 19
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(2);
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("press B for TOUCH-test");
     128:	84 e2       	ldi	r24, 0x24	; 36
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
}
     130:	08 95       	ret

00000132 <test_touch>:



}

void test_touch(LCD_engine *lcd){
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	2a 97       	sbiw	r28, 0x0a	; 10
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
//touch_init();
//get_touch_x();
LCD_CLR();
     14e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
//LCD_RAM_CLR();
DOGENABLE;
     152:	2c 98       	cbi	0x05, 4	; 5
LCD_setPage(0);
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("Hello TOUCH-test!ö");
     160:	8b e3       	ldi	r24, 0x3B	; 59
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setColumn(10);
rprintfStr("t:");rprintfInt(sys_time);rprintfStr("      ");
LCD_setPage(2);
LCD_setColumn(10);
if (TOUCH_STATE==TOUCH_STATE_PRESSED){
Point p=getRawTouch();
     168:	7e 01       	movw	r14, r28
     16a:	08 94       	sec
     16c:	e1 1c       	adc	r14, r1
     16e:	f1 1c       	adc	r15, r1
     170:	8e 01       	movw	r16, r28
     172:	0a 5f       	subi	r16, 0xFA	; 250
     174:	1f 4f       	sbci	r17, 0xFF	; 255
//ADCSRA|=0b01000000; //start 
//int max=0;
//int x;
//get_touch_y();
while (1){
if (START_isPressed()){
     176:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <START_isPressed>
     17a:	88 23       	and	r24, r24
     17c:	09 f0       	breq	.+2      	; 0x180 <test_touch+0x4e>
     17e:	60 c0       	rjmp	.+192    	; 0x240 <test_touch+0x10e>
		break;
		}
//x=get_touch_x();
//if (XX>max)
//	max=XX;
LCD_setPage(1);
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     186:	8a e0       	ldi	r24, 0x0A	; 10
     188:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("t:");rprintfInt(sys_time);rprintfStr("      ");
     18c:	8e e4       	ldi	r24, 0x4E	; 78
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
     194:	80 91 65 0a 	lds	r24, 0x0A65
     198:	90 91 66 0a 	lds	r25, 0x0A66
     19c:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
     1a0:	81 e5       	ldi	r24, 0x51	; 81
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(2);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     1ae:	8a e0       	ldi	r24, 0x0A	; 10
     1b0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
if (TOUCH_STATE==TOUCH_STATE_PRESSED){
     1b4:	80 91 64 0a 	lds	r24, 0x0A64
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	11 f5       	brne	.+68     	; 0x200 <test_touch+0xce>
Point p=getRawTouch();
     1bc:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRawTouch>
     1c0:	2e 83       	std	Y+6, r18	; 0x06
     1c2:	3f 83       	std	Y+7, r19	; 0x07
     1c4:	48 87       	std	Y+8, r20	; 0x08
     1c6:	59 87       	std	Y+9, r21	; 0x09
     1c8:	6a 87       	std	Y+10, r22	; 0x0a
     1ca:	d7 01       	movw	r26, r14
     1cc:	f8 01       	movw	r30, r16
     1ce:	85 e0       	ldi	r24, 0x05	; 5
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <test_touch+0x9e>

rprintfStr("P ");rprintfInt(p.x);rprintfStr(",");rprintfInt(p.y);rprintfStr("      ");
     1d8:	88 e5       	ldi	r24, 0x58	; 88
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
     1e4:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
     1e8:	8b e5       	ldi	r24, 0x5B	; 91
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	9c 81       	ldd	r25, Y+4	; 0x04
     1f4:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
     1f8:	81 e5       	ldi	r24, 0x51	; 81
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
}
LCD_setPage(3);
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     206:	8a e0       	ldi	r24, 0x0A	; 10
     208:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfInt(ddd);rprintfStr("  ");
     20c:	80 91 6e 0a 	lds	r24, 0x0A6E
     210:	90 91 6f 0a 	lds	r25, 0x0A6F
     214:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
     218:	8d e5       	ldi	r24, 0x5D	; 93
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(4);
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     226:	8a e0       	ldi	r24, 0x0A	; 10
     228:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfInt(ADCH);rprintfStr("  ");
     22c:	80 91 79 00 	lds	r24, 0x0079
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
     236:	8d e5       	ldi	r24, 0x5D	; 93
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
     23e:	9b cf       	rjmp	.-202    	; 0x176 <test_touch+0x44>
}
}
     240:	2a 96       	adiw	r28, 0x0a	; 10
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	cf 91       	pop	r28
     24e:	df 91       	pop	r29
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	ff 90       	pop	r15
     256:	ef 90       	pop	r14
     258:	08 95       	ret

0000025a <draw_cross>:

void flash_finish(){

}

void draw_cross(LCD_engine *lcd,int x,int y){
     25a:	af 92       	push	r10
     25c:	bf 92       	push	r11
     25e:	cf 92       	push	r12
     260:	df 92       	push	r13
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	5c 01       	movw	r10, r24
     26c:	6b 01       	movw	r12, r22
     26e:	7a 01       	movw	r14, r20
LCD_drawLine(lcd,x-5,y,x+5,y);
     270:	65 50       	subi	r22, 0x05	; 5
     272:	70 40       	sbci	r23, 0x00	; 0
     274:	96 01       	movw	r18, r12
     276:	2b 5f       	subi	r18, 0xFB	; 251
     278:	3f 4f       	sbci	r19, 0xFF	; 255
     27a:	87 01       	movw	r16, r14
     27c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,x,y-5,x,y+5);
     280:	0b 5f       	subi	r16, 0xFB	; 251
     282:	1f 4f       	sbci	r17, 0xFF	; 255
     284:	c5 01       	movw	r24, r10
     286:	b6 01       	movw	r22, r12
     288:	2b ef       	ldi	r18, 0xFB	; 251
     28a:	3f ef       	ldi	r19, 0xFF	; 255
     28c:	e2 0e       	add	r14, r18
     28e:	f3 1e       	adc	r15, r19
     290:	a7 01       	movw	r20, r14
     292:	96 01       	movw	r18, r12
     294:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	df 90       	pop	r13
     2a2:	cf 90       	pop	r12
     2a4:	bf 90       	pop	r11
     2a6:	af 90       	pop	r10
     2a8:	08 95       	ret

000002aa <paint>:


void paint(LCD_engine *lcd){
     2aa:	2f 92       	push	r2
     2ac:	3f 92       	push	r3
     2ae:	4f 92       	push	r4
     2b0:	5f 92       	push	r5
     2b2:	6f 92       	push	r6
     2b4:	7f 92       	push	r7
     2b6:	8f 92       	push	r8
     2b8:	9f 92       	push	r9
     2ba:	af 92       	push	r10
     2bc:	bf 92       	push	r11
     2be:	cf 92       	push	r12
     2c0:	df 92       	push	r13
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	6e 97       	sbiw	r28, 0x1e	; 30
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	4c 01       	movw	r8, r24

LCD_CLR();
     2e0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     2e4:	c4 01       	movw	r24, r8
     2e6:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
DOGENABLE;
     2ea:	2c 98       	cbi	0x05, 4	; 5
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     2ec:	c4 01       	movw	r24, r8
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
//ADCSRA|=0b01000000; //start 
Point p;
Point old_points[4];

for (int i=0;i<4;i++){
		old_points[i].x=0;
     2f4:	1f 82       	std	Y+7, r1	; 0x07
     2f6:	1e 82       	std	Y+6, r1	; 0x06
		old_points[i].y=0;
     2f8:	19 86       	std	Y+9, r1	; 0x09
     2fa:	18 86       	std	Y+8, r1	; 0x08
		old_points[i].down_count=0;
     2fc:	1a 86       	std	Y+10, r1	; 0x0a
//ADCSRA|=0b01000000; //start 
Point p;
Point old_points[4];

for (int i=0;i<4;i++){
		old_points[i].x=0;
     2fe:	1c 86       	std	Y+12, r1	; 0x0c
     300:	1b 86       	std	Y+11, r1	; 0x0b
		old_points[i].y=0;
     302:	1e 86       	std	Y+14, r1	; 0x0e
     304:	1d 86       	std	Y+13, r1	; 0x0d
		old_points[i].down_count=0;
     306:	1f 86       	std	Y+15, r1	; 0x0f
//ADCSRA|=0b01000000; //start 
Point p;
Point old_points[4];

for (int i=0;i<4;i++){
		old_points[i].x=0;
     308:	19 8a       	std	Y+17, r1	; 0x11
     30a:	18 8a       	std	Y+16, r1	; 0x10
		old_points[i].y=0;
     30c:	1b 8a       	std	Y+19, r1	; 0x13
     30e:	1a 8a       	std	Y+18, r1	; 0x12
		old_points[i].down_count=0;
     310:	1c 8a       	std	Y+20, r1	; 0x14
//ADCSRA|=0b01000000; //start 
Point p;
Point old_points[4];

for (int i=0;i<4;i++){
		old_points[i].x=0;
     312:	1e 8a       	std	Y+22, r1	; 0x16
     314:	1d 8a       	std	Y+21, r1	; 0x15
		old_points[i].y=0;
     316:	18 8e       	std	Y+24, r1	; 0x18
     318:	1f 8a       	std	Y+23, r1	; 0x17
		old_points[i].down_count=0;
     31a:	19 8e       	std	Y+25, r1	; 0x19

//LCD_drawLine(lcd,p_1.x,p_1.y,(unsigned int)p.x,(unsigned int)p.y);

if (old_points[3].x!=0 && old_points[3].y!=0){
LCD_drawPixel(lcd,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
LCD_drawLine(lcd,(unsigned int)old_points[3].x,(unsigned int)old_points[3].y,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
     31c:	96 e0       	ldi	r25, 0x06	; 6
     31e:	29 2e       	mov	r2, r25
     320:	31 2c       	mov	r3, r1
     322:	2c 0e       	add	r2, r28
     324:	3d 1e       	adc	r3, r29
}
}
}else {
for (int i=0;i<4;i++){
     326:	8a e1       	ldi	r24, 0x1A	; 26
     328:	68 2e       	mov	r6, r24
     32a:	71 2c       	mov	r7, r1
     32c:	6c 0e       	add	r6, r28
     32e:	7d 1e       	adc	r7, r29
		break;
		}

if (TOUCH_STATE==TOUCH_STATE_PRESSED){

p=getTouch();
     330:	2e 01       	movw	r4, r28
     332:	08 94       	sec
     334:	41 1c       	adc	r4, r1
     336:	51 1c       	adc	r5, r1
		old_points[i].y=0;
		old_points[i].down_count=0;
	}

while (1){
if (START_isPressedAndRel()){
     338:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
     33c:	88 23       	and	r24, r24
     33e:	09 f0       	breq	.+2      	; 0x342 <paint+0x98>
     340:	62 c0       	rjmp	.+196    	; 0x406 <paint+0x15c>
		break;
		}

if (TOUCH_STATE==TOUCH_STATE_PRESSED){
     342:	80 91 64 0a 	lds	r24, 0x0A64
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	09 f0       	breq	.+2      	; 0x34c <paint+0xa2>
     34a:	50 c0       	rjmp	.+160    	; 0x3ec <paint+0x142>

p=getTouch();
     34c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <getTouch>
     350:	2a 8f       	std	Y+26, r18	; 0x1a
     352:	3b 8f       	std	Y+27, r19	; 0x1b
     354:	4c 8f       	std	Y+28, r20	; 0x1c
     356:	5d 8f       	std	Y+29, r21	; 0x1d
     358:	6e 8f       	std	Y+30, r22	; 0x1e
     35a:	d2 01       	movw	r26, r4
     35c:	f3 01       	movw	r30, r6
     35e:	85 e0       	ldi	r24, 0x05	; 5
     360:	01 90       	ld	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	81 50       	subi	r24, 0x01	; 1
     366:	e1 f7       	brne	.-8      	; 0x360 <paint+0xb6>
     368:	2d 81       	ldd	r18, Y+5	; 0x05
if (p.down_count>10){
     36a:	2b 30       	cpi	r18, 0x0B	; 11
     36c:	08 f4       	brcc	.+2      	; 0x370 <paint+0xc6>
     36e:	47 c0       	rjmp	.+142    	; 0x3fe <paint+0x154>

if (p.down_count!=old_points[0].down_count){
     370:	8a 85       	ldd	r24, Y+10	; 0x0a
     372:	28 17       	cp	r18, r24
     374:	09 f1       	breq	.+66     	; 0x3b8 <paint+0x10e>
//save old
for (int i=3;i>0;i--){
old_points[i].x=old_points[i-1].x;
     376:	88 89       	ldd	r24, Y+16	; 0x10
     378:	99 89       	ldd	r25, Y+17	; 0x11
     37a:	9e 8b       	std	Y+22, r25	; 0x16
     37c:	8d 8b       	std	Y+21, r24	; 0x15
old_points[i].y=old_points[i-1].y;
     37e:	8a 89       	ldd	r24, Y+18	; 0x12
     380:	9b 89       	ldd	r25, Y+19	; 0x13
     382:	98 8f       	std	Y+24, r25	; 0x18
     384:	8f 8b       	std	Y+23, r24	; 0x17
if (p.down_count>10){

if (p.down_count!=old_points[0].down_count){
//save old
for (int i=3;i>0;i--){
old_points[i].x=old_points[i-1].x;
     386:	8b 85       	ldd	r24, Y+11	; 0x0b
     388:	9c 85       	ldd	r25, Y+12	; 0x0c
     38a:	99 8b       	std	Y+17, r25	; 0x11
     38c:	88 8b       	std	Y+16, r24	; 0x10
old_points[i].y=old_points[i-1].y;
     38e:	8d 85       	ldd	r24, Y+13	; 0x0d
     390:	9e 85       	ldd	r25, Y+14	; 0x0e
     392:	9b 8b       	std	Y+19, r25	; 0x13
     394:	8a 8b       	std	Y+18, r24	; 0x12
if (p.down_count>10){

if (p.down_count!=old_points[0].down_count){
//save old
for (int i=3;i>0;i--){
old_points[i].x=old_points[i-1].x;
     396:	8e 81       	ldd	r24, Y+6	; 0x06
     398:	9f 81       	ldd	r25, Y+7	; 0x07
     39a:	9c 87       	std	Y+12, r25	; 0x0c
     39c:	8b 87       	std	Y+11, r24	; 0x0b
old_points[i].y=old_points[i-1].y;
     39e:	88 85       	ldd	r24, Y+8	; 0x08
     3a0:	99 85       	ldd	r25, Y+9	; 0x09
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	8d 87       	std	Y+13, r24	; 0x0d
}
old_points[0].x=p.x;
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	9f 83       	std	Y+7, r25	; 0x07
     3ac:	8e 83       	std	Y+6, r24	; 0x06
old_points[0].y=p.y;
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	99 87       	std	Y+9, r25	; 0x09
     3b4:	88 87       	std	Y+8, r24	; 0x08
old_points[0].down_count=p.down_count;
     3b6:	2a 87       	std	Y+10, r18	; 0x0a



//LCD_drawLine(lcd,p_1.x,p_1.y,(unsigned int)p.x,(unsigned int)p.y);

if (old_points[3].x!=0 && old_points[3].y!=0){
     3b8:	ad 88       	ldd	r10, Y+21	; 0x15
     3ba:	be 88       	ldd	r11, Y+22	; 0x16
     3bc:	a1 14       	cp	r10, r1
     3be:	b1 04       	cpc	r11, r1
     3c0:	f1 f0       	breq	.+60     	; 0x3fe <paint+0x154>
     3c2:	cf 88       	ldd	r12, Y+23	; 0x17
     3c4:	d8 8c       	ldd	r13, Y+24	; 0x18
     3c6:	c1 14       	cp	r12, r1
     3c8:	d1 04       	cpc	r13, r1
     3ca:	c9 f0       	breq	.+50     	; 0x3fe <paint+0x154>
LCD_drawPixel(lcd,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
     3cc:	e8 88       	ldd	r14, Y+16	; 0x10
     3ce:	f9 88       	ldd	r15, Y+17	; 0x11
     3d0:	0a 89       	ldd	r16, Y+18	; 0x12
     3d2:	1b 89       	ldd	r17, Y+19	; 0x13
     3d4:	c4 01       	movw	r24, r8
     3d6:	b7 01       	movw	r22, r14
     3d8:	a8 01       	movw	r20, r16
     3da:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
LCD_drawLine(lcd,(unsigned int)old_points[3].x,(unsigned int)old_points[3].y,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
     3de:	c4 01       	movw	r24, r8
     3e0:	b5 01       	movw	r22, r10
     3e2:	a6 01       	movw	r20, r12
     3e4:	97 01       	movw	r18, r14
     3e6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
     3ea:	09 c0       	rjmp	.+18     	; 0x3fe <paint+0x154>
     3ec:	f1 01       	movw	r30, r2
}
}
}else {
for (int i=0;i<4;i++){
old_points[i].x=0;
     3ee:	11 82       	std	Z+1, r1	; 0x01
     3f0:	10 82       	st	Z, r1
old_points[i].y=0;
     3f2:	13 82       	std	Z+3, r1	; 0x03
     3f4:	12 82       	std	Z+2, r1	; 0x02
     3f6:	35 96       	adiw	r30, 0x05	; 5
LCD_drawPixel(lcd,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
LCD_drawLine(lcd,(unsigned int)old_points[3].x,(unsigned int)old_points[3].y,(unsigned int)old_points[2].x,(unsigned int)old_points[2].y);
}
}
}else {
for (int i=0;i<4;i++){
     3f8:	e6 15       	cp	r30, r6
     3fa:	f7 05       	cpc	r31, r7
     3fc:	c1 f7       	brne	.-16     	; 0x3ee <paint+0x144>
}
}



pushRAM(lcd);
     3fe:	c4 01       	movw	r24, r8
     400:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
     404:	99 cf       	rjmp	.-206    	; 0x338 <paint+0x8e>

}



}
     406:	6e 96       	adiw	r28, 0x1e	; 30
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	3f 90       	pop	r3
     434:	2f 90       	pop	r2
     436:	08 95       	ret

00000438 <test_buttons>:
}


void test_buttons(LCD_engine *lcd){

LCD_CLR();
     438:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
DOGENABLE;
     43c:	2c 98       	cbi	0x05, 4	; 5
LCD_setPage(0);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);rprintfStr("Test Buttons ");
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
     44a:	80 e6       	ldi	r24, 0x60	; 96
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(1);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);rprintfStr("START and touch to exit");
     458:	8a e0       	ldi	r24, 0x0A	; 10
     45a:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
     45e:	8e e6       	ldi	r24, 0x6E	; 110
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(3);
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(10);
     46c:	8a e0       	ldi	r24, 0x0A	; 10
     46e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>

while (1){LCD_setColumn(10);
     472:	8a e0       	ldi	r24, 0x0A	; 10
     474:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfBin(R_BUTTONS);rprintfStr("        ");
     478:	89 b1       	in	r24, 0x09	; 9
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <rprintfBin>
     480:	86 e8       	ldi	r24, 0x86	; 134
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
if (TOUCH_STATE==TOUCH_STATE_PRESSED && START_isPressedAndRel()){
     488:	80 91 64 0a 	lds	r24, 0x0A64
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	89 f7       	brne	.-30     	; 0x472 <test_buttons+0x3a>
     490:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
     494:	88 23       	and	r24, r24
     496:	69 f3       	breq	.-38     	; 0x472 <test_buttons+0x3a>
return;
}

}
}
     498:	08 95       	ret

0000049a <drawStartImage>:


}


void drawStartImage(LCD_engine *lcd){
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	c0 50       	subi	r28, 0x00	; 0
     4a8:	d4 40       	sbci	r29, 0x04	; 4
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	8c 01       	movw	r16, r24
//LCD_engine image;
//image.LCD_RAM
LCD_CLR();
     4b6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     4ba:	c8 01       	movw	r24, r16
     4bc:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     4c0:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     4c4:	c8 01       	movw	r24, r16
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     4cc:	c8 01       	movw	r24, r16
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     4d4:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
 0x00     ,/*  ________  */
 0x00     ,/*  ________  */
 0x00     ,/*  ________  */
 0x00     ,/*  ________  */
 0x00     /*  ________  */
};
     4d8:	de 01       	movw	r26, r28
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	ee e4       	ldi	r30, 0x4E	; 78
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	94 e0       	ldi	r25, 0x04	; 4
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <drawStartImage+0x4a>
 0x27     ,/*  __#__###  */
 0x00     ,/*  ________  */
 0x00     /*  ________  */
};
//image.LCD_RAM=im;
LCD_drawImageToRam(lcd,im);
     4ec:	c8 01       	movw	r24, r16
     4ee:	be 01       	movw	r22, r28
     4f0:	6f 5f       	subi	r22, 0xFF	; 255
     4f2:	7f 4f       	sbci	r23, 0xFF	; 255
     4f4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_drawImageToRam>
//	LCD_draw16x16ImageToRam(lcd,im2,i*16,i);

//for (int i=0;i<5;i++)
//	LCD_draw16x16ImageToRam(lcd,im2,i*16,i+5+40);

pushRAM(lcd);
     4f8:	c8 01       	movw	r24, r16
     4fa:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>

while (1){if (START_isPressedAndRel()){break;}};
     4fe:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
     502:	88 23       	and	r24, r24
     504:	e1 f3       	breq	.-8      	; 0x4fe <drawStartImage+0x64>

}
     506:	c0 50       	subi	r28, 0x00	; 0
     508:	dc 4f       	sbci	r29, 0xFC	; 252
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <gui_screen_meny>:
return;
}
}
}

void gui_screen_meny(LCD_engine *lcd){
     51e:	8f 92       	push	r8
     520:	9f 92       	push	r9
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	c1 54       	subi	r28, 0x41	; 65
     53c:	d0 40       	sbci	r29, 0x00	; 0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	7c 01       	movw	r14, r24
LCD_CLR();
     54a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     54e:	c7 01       	movw	r24, r14
     550:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     554:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     558:	c7 01       	movw	r24, r14
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     560:	c7 01       	movw	r24, r14
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     568:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
ButtonsMeny BMA;
BMA.title="Screen";
     56c:	8f e8       	ldi	r24, 0x8F	; 143
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	9c 83       	std	Y+4, r25	; 0x04
     572:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     574:	1a 82       	std	Y+2, r1	; 0x02
     576:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[3];
b[0]=makeButton("Reversed",1);
     578:	8e 01       	movw	r16, r28
     57a:	0d 5c       	subi	r16, 0xCD	; 205
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	c8 01       	movw	r24, r16
     580:	66 e9       	ldi	r22, 0x96	; 150
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     58c:	de 01       	movw	r26, r28
     58e:	16 96       	adiw	r26, 0x06	; 6
     590:	f8 01       	movw	r30, r16
     592:	8f e0       	ldi	r24, 0x0F	; 15
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	e1 f7       	brne	.-8      	; 0x594 <gui_screen_meny+0x76>
b[1]=makeButton("Test",2);
     59c:	8e 01       	movw	r16, r28
     59e:	0d 5c       	subi	r16, 0xCD	; 205
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	c8 01       	movw	r24, r16
     5a4:	6f e9       	ldi	r22, 0x9F	; 159
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	42 e0       	ldi	r20, 0x02	; 2
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     5b0:	de 01       	movw	r26, r28
     5b2:	55 96       	adiw	r26, 0x15	; 21
     5b4:	f8 01       	movw	r30, r16
     5b6:	8f e0       	ldi	r24, 0x0F	; 15
     5b8:	01 90       	ld	r0, Z+
     5ba:	0d 92       	st	X+, r0
     5bc:	81 50       	subi	r24, 0x01	; 1
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <gui_screen_meny+0x9a>
b[2]=makeButton("Back",3);
     5c0:	8e 01       	movw	r16, r28
     5c2:	0d 5c       	subi	r16, 0xCD	; 205
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	c8 01       	movw	r24, r16
     5c8:	64 ea       	ldi	r22, 0xA4	; 164
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	43 e0       	ldi	r20, 0x03	; 3
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     5d4:	de 01       	movw	r26, r28
     5d6:	94 96       	adiw	r26, 0x24	; 36
     5d8:	f8 01       	movw	r30, r16
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	01 90       	ld	r0, Z+
     5de:	0d 92       	st	X+, r0
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <gui_screen_meny+0xbe>
addMenyButton(&BMA, &b[2]);
     5e4:	8e 01       	movw	r16, r28
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	c8 01       	movw	r24, r16
     5ec:	be 01       	movw	r22, r28
     5ee:	6c 5d       	subi	r22, 0xDC	; 220
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
//addMenyButton(&BMA, &b[1]);
addMenyButton(&BMA, &b[0]);
     5f6:	c8 01       	movw	r24, r16
     5f8:	be 01       	movw	r22, r28
     5fa:	6a 5f       	subi	r22, 0xFA	; 250
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,1);
     602:	48 01       	movw	r8, r16
if (valde==1){
if (lcd->DISPINVERTED){DisplaySetDispInverted(lcd, 0);
     604:	87 01       	movw	r16, r14
     606:	00 58       	subi	r16, 0x80	; 128
     608:	1b 4f       	sbci	r17, 0xFB	; 251
b[0].text="Reversed";
}else {DisplaySetDispInverted(lcd, 1);
b[0].text="Normal";
     60a:	39 ea       	ldi	r19, 0xA9	; 169
     60c:	a3 2e       	mov	r10, r19
     60e:	31 e0       	ldi	r19, 0x01	; 1
     610:	b3 2e       	mov	r11, r19
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,1);
if (valde==1){
if (lcd->DISPINVERTED){DisplaySetDispInverted(lcd, 0);
b[0].text="Reversed";
     612:	26 e9       	ldi	r18, 0x96	; 150
     614:	c2 2e       	mov	r12, r18
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	d2 2e       	mov	r13, r18
addMenyButton(&BMA, &b[2]);
//addMenyButton(&BMA, &b[1]);
addMenyButton(&BMA, &b[0]);
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,1);
     61a:	c7 01       	movw	r24, r14
     61c:	b4 01       	movw	r22, r8
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	91 05       	cpc	r25, r1
     62a:	91 f4       	brne	.+36     	; 0x650 <gui_screen_meny+0x132>
if (lcd->DISPINVERTED){DisplaySetDispInverted(lcd, 0);
     62c:	f8 01       	movw	r30, r16
     62e:	80 81       	ld	r24, Z
     630:	88 23       	and	r24, r24
     632:	39 f0       	breq	.+14     	; 0x642 <gui_screen_meny+0x124>
     634:	c7 01       	movw	r24, r14
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DisplaySetDispInverted>
b[0].text="Reversed";
     63c:	df 86       	std	Y+15, r13	; 0x0f
     63e:	ce 86       	std	Y+14, r12	; 0x0e
     640:	ec cf       	rjmp	.-40     	; 0x61a <gui_screen_meny+0xfc>
}else {DisplaySetDispInverted(lcd, 1);
     642:	c7 01       	movw	r24, r14
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DisplaySetDispInverted>
b[0].text="Normal";
     64a:	bf 86       	std	Y+15, r11	; 0x0f
     64c:	ae 86       	std	Y+14, r10	; 0x0e
     64e:	e5 cf       	rjmp	.-54     	; 0x61a <gui_screen_meny+0xfc>
}

}else if (valde==2){
     650:	02 97       	sbiw	r24, 0x02	; 2
     652:	19 f3       	breq	.-58     	; 0x61a <gui_screen_meny+0xfc>
//test_touch(lcd);
}else{
return;
}
}
}
     654:	cf 5b       	subi	r28, 0xBF	; 191
     656:	df 4f       	sbci	r29, 0xFF	; 255
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	08 95       	ret

0000067c <gui_touch_meny>:
return;
}
}
}

void gui_touch_meny(LCD_engine *lcd){
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	c1 54       	subi	r28, 0x41	; 65
     690:	d0 40       	sbci	r29, 0x00	; 0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	7c 01       	movw	r14, r24
LCD_CLR();
     69e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     6a2:	c7 01       	movw	r24, r14
     6a4:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     6a8:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     6ac:	c7 01       	movw	r24, r14
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     6b4:	c7 01       	movw	r24, r14
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     6bc:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
ButtonsMeny BMA;
BMA.title="Touch";
     6c0:	80 eb       	ldi	r24, 0xB0	; 176
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9c 83       	std	Y+4, r25	; 0x04
     6c6:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     6c8:	1a 82       	std	Y+2, r1	; 0x02
     6ca:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[3];
b[0]=makeButton("Calibrate",1);
     6cc:	8e 01       	movw	r16, r28
     6ce:	0d 5c       	subi	r16, 0xCD	; 205
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	c8 01       	movw	r24, r16
     6d4:	66 eb       	ldi	r22, 0xB6	; 182
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     6e0:	de 01       	movw	r26, r28
     6e2:	16 96       	adiw	r26, 0x06	; 6
     6e4:	f8 01       	movw	r30, r16
     6e6:	8f e0       	ldi	r24, 0x0F	; 15
     6e8:	01 90       	ld	r0, Z+
     6ea:	0d 92       	st	X+, r0
     6ec:	81 50       	subi	r24, 0x01	; 1
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <gui_touch_meny+0x6c>
b[1]=makeButton("Test",2);
     6f0:	8e 01       	movw	r16, r28
     6f2:	0d 5c       	subi	r16, 0xCD	; 205
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	c8 01       	movw	r24, r16
     6f8:	6f e9       	ldi	r22, 0x9F	; 159
     6fa:	71 e0       	ldi	r23, 0x01	; 1
     6fc:	42 e0       	ldi	r20, 0x02	; 2
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     704:	de 01       	movw	r26, r28
     706:	55 96       	adiw	r26, 0x15	; 21
     708:	f8 01       	movw	r30, r16
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	01 90       	ld	r0, Z+
     70e:	0d 92       	st	X+, r0
     710:	81 50       	subi	r24, 0x01	; 1
     712:	e1 f7       	brne	.-8      	; 0x70c <gui_touch_meny+0x90>
b[2]=makeButton("Back",3);
     714:	8e 01       	movw	r16, r28
     716:	0d 5c       	subi	r16, 0xCD	; 205
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	c8 01       	movw	r24, r16
     71c:	64 ea       	ldi	r22, 0xA4	; 164
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	43 e0       	ldi	r20, 0x03	; 3
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     728:	de 01       	movw	r26, r28
     72a:	94 96       	adiw	r26, 0x24	; 36
     72c:	f8 01       	movw	r30, r16
     72e:	8f e0       	ldi	r24, 0x0F	; 15
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	81 50       	subi	r24, 0x01	; 1
     736:	e1 f7       	brne	.-8      	; 0x730 <gui_touch_meny+0xb4>
addMenyButton(&BMA, &b[2]);
     738:	8e 01       	movw	r16, r28
     73a:	0f 5f       	subi	r16, 0xFF	; 255
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	c8 01       	movw	r24, r16
     740:	be 01       	movw	r22, r28
     742:	6c 5d       	subi	r22, 0xDC	; 220
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[1]);
     74a:	c8 01       	movw	r24, r16
     74c:	be 01       	movw	r22, r28
     74e:	6b 5e       	subi	r22, 0xEB	; 235
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[0]);
     756:	c8 01       	movw	r24, r16
     758:	be 01       	movw	r22, r28
     75a:	6a 5f       	subi	r22, 0xFA	; 250
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,3);
     762:	d0 2e       	mov	r13, r16
     764:	01 2f       	mov	r16, r17
     766:	c7 01       	movw	r24, r14
     768:	6d 2d       	mov	r22, r13
     76a:	70 2f       	mov	r23, r16
     76c:	43 e0       	ldi	r20, 0x03	; 3
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	91 05       	cpc	r25, r1
     778:	21 f4       	brne	.+8      	; 0x782 <gui_touch_meny+0x106>
calibrate_touch(lcd);
     77a:	c7 01       	movw	r24, r14
     77c:	0e 94 67 18 	call	0x30ce	; 0x30ce <calibrate_touch>
     780:	f2 cf       	rjmp	.-28     	; 0x766 <gui_touch_meny+0xea>
}else if (valde==2){
     782:	02 97       	sbiw	r24, 0x02	; 2
     784:	21 f4       	brne	.+8      	; 0x78e <gui_touch_meny+0x112>
test_touch(lcd);
     786:	c7 01       	movw	r24, r14
     788:	0e 94 99 00 	call	0x132	; 0x132 <test_touch>
     78c:	ec cf       	rjmp	.-40     	; 0x766 <gui_touch_meny+0xea>
}else{
return;
}
}
}
     78e:	cf 5b       	subi	r28, 0xBF	; 191
     790:	df 4f       	sbci	r29, 0xFF	; 255
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	08 95       	ret

000007ac <gui_button_meny>:
if (TOUCH_STATE!=TOUCH_STATE_OFF){
start_reading_with_interrupt();
}
}

void gui_button_meny(LCD_engine *lcd){
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	c1 54       	subi	r28, 0x41	; 65
     7c0:	d0 40       	sbci	r29, 0x00	; 0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	7c 01       	movw	r14, r24
LCD_CLR();
     7ce:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     7d2:	c7 01       	movw	r24, r14
     7d4:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     7d8:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     7dc:	c7 01       	movw	r24, r14
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     7e4:	c7 01       	movw	r24, r14
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     7ec:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
ButtonsMeny BMA;
BMA.title="Buttons";
     7f0:	80 ec       	ldi	r24, 0xC0	; 192
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	9c 83       	std	Y+4, r25	; 0x04
     7f6:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     7f8:	1a 82       	std	Y+2, r1	; 0x02
     7fa:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[3];
b[0]=makeButton("Test",1);
     7fc:	8e 01       	movw	r16, r28
     7fe:	0d 5c       	subi	r16, 0xCD	; 205
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	c8 01       	movw	r24, r16
     804:	6f e9       	ldi	r22, 0x9F	; 159
     806:	71 e0       	ldi	r23, 0x01	; 1
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     810:	de 01       	movw	r26, r28
     812:	16 96       	adiw	r26, 0x06	; 6
     814:	f8 01       	movw	r30, r16
     816:	8f e0       	ldi	r24, 0x0F	; 15
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	e1 f7       	brne	.-8      	; 0x818 <gui_button_meny+0x6c>
//b[1]=makeButton("Test",2);
b[2]=makeButton("Back",3);
     820:	8e 01       	movw	r16, r28
     822:	0d 5c       	subi	r16, 0xCD	; 205
     824:	1f 4f       	sbci	r17, 0xFF	; 255
     826:	c8 01       	movw	r24, r16
     828:	64 ea       	ldi	r22, 0xA4	; 164
     82a:	71 e0       	ldi	r23, 0x01	; 1
     82c:	43 e0       	ldi	r20, 0x03	; 3
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     834:	de 01       	movw	r26, r28
     836:	94 96       	adiw	r26, 0x24	; 36
     838:	f8 01       	movw	r30, r16
     83a:	8f e0       	ldi	r24, 0x0F	; 15
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	81 50       	subi	r24, 0x01	; 1
     842:	e1 f7       	brne	.-8      	; 0x83c <gui_button_meny+0x90>
addMenyButton(&BMA, &b[2]);
     844:	8e 01       	movw	r16, r28
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	c8 01       	movw	r24, r16
     84c:	be 01       	movw	r22, r28
     84e:	6c 5d       	subi	r22, 0xDC	; 220
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
//addMenyButton(&BMA, &b[1]);
addMenyButton(&BMA, &b[0]);
     856:	c8 01       	movw	r24, r16
     858:	be 01       	movw	r22, r28
     85a:	6a 5f       	subi	r22, 0xFA	; 250
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,3);
     862:	d0 2e       	mov	r13, r16
     864:	01 2f       	mov	r16, r17
     866:	c7 01       	movw	r24, r14
     868:	6d 2d       	mov	r22, r13
     86a:	70 2f       	mov	r23, r16
     86c:	43 e0       	ldi	r20, 0x03	; 3
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	91 05       	cpc	r25, r1
     878:	21 f4       	brne	.+8      	; 0x882 <gui_button_meny+0xd6>
//calibrate_touch(lcd);
test_buttons(lcd);
     87a:	c7 01       	movw	r24, r14
     87c:	0e 94 1c 02 	call	0x438	; 0x438 <test_buttons>
     880:	f2 cf       	rjmp	.-28     	; 0x866 <gui_button_meny+0xba>
}else if (valde==2){
     882:	02 97       	sbiw	r24, 0x02	; 2
     884:	81 f3       	breq	.-32     	; 0x866 <gui_button_meny+0xba>
//test_buttons(lcd);
}else{
return;
}
}
}
     886:	cf 5b       	subi	r28, 0xBF	; 191
     888:	df 4f       	sbci	r29, 0xFF	; 255
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	08 95       	ret

000008a4 <gui_system_meny>:
return;
}
}
}

void gui_system_meny(LCD_engine *lcd){
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	c0 55       	subi	r28, 0x50	; 80
     8b8:	d0 40       	sbci	r29, 0x00	; 0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	7c 01       	movw	r14, r24
LCD_CLR();
     8c6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     8ca:	c7 01       	movw	r24, r14
     8cc:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     8d0:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     8d4:	c7 01       	movw	r24, r14
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     8dc:	c7 01       	movw	r24, r14
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     8e4:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
ButtonsMeny BMA;
BMA.title="System";
     8e8:	88 ec       	ldi	r24, 0xC8	; 200
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     8f0:	1a 82       	std	Y+2, r1	; 0x02
     8f2:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[4];
b[0]=makeButton("Touch",1);
     8f4:	8e 01       	movw	r16, r28
     8f6:	0e 5b       	subi	r16, 0xBE	; 190
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	c8 01       	movw	r24, r16
     8fc:	60 eb       	ldi	r22, 0xB0	; 176
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     908:	de 01       	movw	r26, r28
     90a:	16 96       	adiw	r26, 0x06	; 6
     90c:	f8 01       	movw	r30, r16
     90e:	8f e0       	ldi	r24, 0x0F	; 15
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	81 50       	subi	r24, 0x01	; 1
     916:	e1 f7       	brne	.-8      	; 0x910 <gui_system_meny+0x6c>
b[1]=makeButton("Buttons",2);
     918:	8e 01       	movw	r16, r28
     91a:	0e 5b       	subi	r16, 0xBE	; 190
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	c8 01       	movw	r24, r16
     920:	60 ec       	ldi	r22, 0xC0	; 192
     922:	71 e0       	ldi	r23, 0x01	; 1
     924:	42 e0       	ldi	r20, 0x02	; 2
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     92c:	de 01       	movw	r26, r28
     92e:	55 96       	adiw	r26, 0x15	; 21
     930:	f8 01       	movw	r30, r16
     932:	8f e0       	ldi	r24, 0x0F	; 15
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	81 50       	subi	r24, 0x01	; 1
     93a:	e1 f7       	brne	.-8      	; 0x934 <gui_system_meny+0x90>
b[2]=makeButton("Screen",3);
     93c:	8e 01       	movw	r16, r28
     93e:	0e 5b       	subi	r16, 0xBE	; 190
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	c8 01       	movw	r24, r16
     944:	6f e8       	ldi	r22, 0x8F	; 143
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	43 e0       	ldi	r20, 0x03	; 3
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     950:	de 01       	movw	r26, r28
     952:	94 96       	adiw	r26, 0x24	; 36
     954:	f8 01       	movw	r30, r16
     956:	8f e0       	ldi	r24, 0x0F	; 15
     958:	01 90       	ld	r0, Z+
     95a:	0d 92       	st	X+, r0
     95c:	81 50       	subi	r24, 0x01	; 1
     95e:	e1 f7       	brne	.-8      	; 0x958 <gui_system_meny+0xb4>
b[3]=makeButton("Back",4);
     960:	8e 01       	movw	r16, r28
     962:	0e 5b       	subi	r16, 0xBE	; 190
     964:	1f 4f       	sbci	r17, 0xFF	; 255
     966:	c8 01       	movw	r24, r16
     968:	64 ea       	ldi	r22, 0xA4	; 164
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	44 e0       	ldi	r20, 0x04	; 4
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     974:	de 01       	movw	r26, r28
     976:	d3 96       	adiw	r26, 0x33	; 51
     978:	f8 01       	movw	r30, r16
     97a:	8f e0       	ldi	r24, 0x0F	; 15
     97c:	01 90       	ld	r0, Z+
     97e:	0d 92       	st	X+, r0
     980:	81 50       	subi	r24, 0x01	; 1
     982:	e1 f7       	brne	.-8      	; 0x97c <gui_system_meny+0xd8>
addMenyButton(&BMA, &b[3]);
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	c8 01       	movw	r24, r16
     98c:	be 01       	movw	r22, r28
     98e:	6d 5c       	subi	r22, 0xCD	; 205
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[2]);
     996:	c8 01       	movw	r24, r16
     998:	be 01       	movw	r22, r28
     99a:	6c 5d       	subi	r22, 0xDC	; 220
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[1]);
     9a2:	c8 01       	movw	r24, r16
     9a4:	be 01       	movw	r22, r28
     9a6:	6b 5e       	subi	r22, 0xEB	; 235
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[0]);
     9ae:	c8 01       	movw	r24, r16
     9b0:	be 01       	movw	r22, r28
     9b2:	6a 5f       	subi	r22, 0xFA	; 250
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
int valde=0;
while (1){
valde = Buttons_meny(lcd,&BMA,2);
     9ba:	d0 2e       	mov	r13, r16
     9bc:	01 2f       	mov	r16, r17
     9be:	c7 01       	movw	r24, r14
     9c0:	6d 2d       	mov	r22, r13
     9c2:	70 2f       	mov	r23, r16
     9c4:	42 e0       	ldi	r20, 0x02	; 2
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	91 05       	cpc	r25, r1
     9d0:	21 f4       	brne	.+8      	; 0x9da <gui_system_meny+0x136>
gui_touch_meny(lcd);
     9d2:	c7 01       	movw	r24, r14
     9d4:	0e 94 3e 03 	call	0x67c	; 0x67c <gui_touch_meny>
     9d8:	f2 cf       	rjmp	.-28     	; 0x9be <gui_system_meny+0x11a>
}else if (valde==2){
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	91 05       	cpc	r25, r1
     9de:	21 f4       	brne	.+8      	; 0x9e8 <gui_system_meny+0x144>
gui_button_meny(lcd);
     9e0:	c7 01       	movw	r24, r14
     9e2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <gui_button_meny>
     9e6:	eb cf       	rjmp	.-42     	; 0x9be <gui_system_meny+0x11a>
}else if (valde==3){
     9e8:	03 97       	sbiw	r24, 0x03	; 3
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <gui_system_meny+0x150>
gui_screen_meny(lcd);
     9ec:	c7 01       	movw	r24, r14
     9ee:	0e 94 8f 02 	call	0x51e	; 0x51e <gui_screen_meny>
     9f2:	e5 cf       	rjmp	.-54     	; 0x9be <gui_system_meny+0x11a>
}else{
return;
}
}
}
     9f4:	c0 5b       	subi	r28, 0xB0	; 176
     9f6:	df 4f       	sbci	r29, 0xFF	; 255
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	df 90       	pop	r13
     a10:	08 95       	ret

00000a12 <about>:


}


void about(LCD_engine *lcd){
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
LCD_CLR();
     a18:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     a22:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     a26:	ce 01       	movw	r24, r28
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     a2e:	ce 01       	movw	r24, r28
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     a36:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
LCD_setPage(0);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
rprintfStrCenter("This is the work of");
     a40:	8f ec       	ldi	r24, 0xCF	; 207
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <rprintfStrCenter>
LCD_setPage(1);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
rprintfStrCenter("Christofer");
     a4e:	83 ee       	ldi	r24, 0xE3	; 227
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <rprintfStrCenter>
LCD_setPage(2);
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
rprintfStrCenter("Johansson Hiitti");
     a5c:	8e ee       	ldi	r24, 0xEE	; 238
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <rprintfStrCenter>
LCD_setPage(3);
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
rprintfStrCenter("T08");
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <rprintfStrCenter>

LCD_setPage(7);
     a72:	87 e0       	ldi	r24, 0x07	; 7
     a74:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
rprintfStrCenter("FIM project 2011");
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <rprintfStrCenter>


while (1){
if (START_isPressedAndRel()){
     a80:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
     a84:	88 23       	and	r24, r24
     a86:	e1 f3       	breq	.-8      	; 0xa80 <about+0x6e>
		drawStartImage(lcd);
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 4d 02 	call	0x49a	; 0x49a <drawStartImage>
		}

}


}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <gui_games_meny>:
}




void gui_games_meny(LCD_engine *lcd){
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	cf 55       	subi	r28, 0x5F	; 95
     aaa:	d0 40       	sbci	r29, 0x00	; 0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	6c 01       	movw	r12, r24
LCD_CLR();
     ab8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     abc:	c6 01       	movw	r24, r12
     abe:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     ac2:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     ac6:	c6 01       	movw	r24, r12
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     ace:	c6 01       	movw	r24, r12
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     ad6:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>



ButtonsMeny BMA;
BMA.title="Games";
     ada:	84 e1       	ldi	r24, 0x14	; 20
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	9c 83       	std	Y+4, r25	; 0x04
     ae0:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     ae2:	1a 82       	std	Y+2, r1	; 0x02
     ae4:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[5];
b[0]=makeButton("Pong",1);
     ae6:	8e 01       	movw	r16, r28
     ae8:	0f 5a       	subi	r16, 0xAF	; 175
     aea:	1f 4f       	sbci	r17, 0xFF	; 255
     aec:	c8 01       	movw	r24, r16
     aee:	6a e1       	ldi	r22, 0x1A	; 26
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     afa:	de 01       	movw	r26, r28
     afc:	16 96       	adiw	r26, 0x06	; 6
     afe:	f8 01       	movw	r30, r16
     b00:	8f e0       	ldi	r24, 0x0F	; 15
     b02:	01 90       	ld	r0, Z+
     b04:	0d 92       	st	X+, r0
     b06:	81 50       	subi	r24, 0x01	; 1
     b08:	e1 f7       	brne	.-8      	; 0xb02 <gui_games_meny+0x6e>
b[1]=makeButton("Missiles",2);
     b0a:	8e 01       	movw	r16, r28
     b0c:	0f 5a       	subi	r16, 0xAF	; 175
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	c8 01       	movw	r24, r16
     b12:	6f e1       	ldi	r22, 0x1F	; 31
     b14:	72 e0       	ldi	r23, 0x02	; 2
     b16:	42 e0       	ldi	r20, 0x02	; 2
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     b1e:	de 01       	movw	r26, r28
     b20:	55 96       	adiw	r26, 0x15	; 21
     b22:	f8 01       	movw	r30, r16
     b24:	8f e0       	ldi	r24, 0x0F	; 15
     b26:	01 90       	ld	r0, Z+
     b28:	0d 92       	st	X+, r0
     b2a:	81 50       	subi	r24, 0x01	; 1
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <gui_games_meny+0x92>
b[2]=makeButton("Paint",3);
     b2e:	8e 01       	movw	r16, r28
     b30:	0f 5a       	subi	r16, 0xAF	; 175
     b32:	1f 4f       	sbci	r17, 0xFF	; 255
     b34:	c8 01       	movw	r24, r16
     b36:	68 e2       	ldi	r22, 0x28	; 40
     b38:	72 e0       	ldi	r23, 0x02	; 2
     b3a:	43 e0       	ldi	r20, 0x03	; 3
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     b42:	de 01       	movw	r26, r28
     b44:	94 96       	adiw	r26, 0x24	; 36
     b46:	f8 01       	movw	r30, r16
     b48:	8f e0       	ldi	r24, 0x0F	; 15
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	81 50       	subi	r24, 0x01	; 1
     b50:	e1 f7       	brne	.-8      	; 0xb4a <gui_games_meny+0xb6>
b[3]=makeButton("3d",4);
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5a       	subi	r16, 0xAF	; 175
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	c8 01       	movw	r24, r16
     b5a:	6e e2       	ldi	r22, 0x2E	; 46
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	44 e0       	ldi	r20, 0x04	; 4
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     b66:	de 01       	movw	r26, r28
     b68:	d3 96       	adiw	r26, 0x33	; 51
     b6a:	f8 01       	movw	r30, r16
     b6c:	8f e0       	ldi	r24, 0x0F	; 15
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	81 50       	subi	r24, 0x01	; 1
     b74:	e1 f7       	brne	.-8      	; 0xb6e <gui_games_meny+0xda>
b[4]=makeButton("Back",5);
     b76:	8e 01       	movw	r16, r28
     b78:	0f 5a       	subi	r16, 0xAF	; 175
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	c8 01       	movw	r24, r16
     b7e:	64 ea       	ldi	r22, 0xA4	; 164
     b80:	71 e0       	ldi	r23, 0x01	; 1
     b82:	45 e0       	ldi	r20, 0x05	; 5
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     b8a:	de 01       	movw	r26, r28
     b8c:	ae 5b       	subi	r26, 0xBE	; 190
     b8e:	bf 4f       	sbci	r27, 0xFF	; 255
     b90:	f8 01       	movw	r30, r16
     b92:	8f e0       	ldi	r24, 0x0F	; 15
     b94:	01 90       	ld	r0, Z+
     b96:	0d 92       	st	X+, r0
     b98:	81 50       	subi	r24, 0x01	; 1
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <gui_games_meny+0x100>
addMenyButton(&BMA, &b[4]);
     b9c:	46 e0       	ldi	r20, 0x06	; 6
     b9e:	e4 2e       	mov	r14, r20
     ba0:	f1 2c       	mov	r15, r1
     ba2:	ec 0e       	add	r14, r28
     ba4:	fd 1e       	adc	r15, r29
     ba6:	b7 01       	movw	r22, r14
     ba8:	64 5c       	subi	r22, 0xC4	; 196
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	8e 01       	movw	r16, r28
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	c8 01       	movw	r24, r16
     bb4:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[3]);
     bb8:	c8 01       	movw	r24, r16
     bba:	be 01       	movw	r22, r28
     bbc:	6d 5c       	subi	r22, 0xCD	; 205
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[2]);
     bc4:	c8 01       	movw	r24, r16
     bc6:	be 01       	movw	r22, r28
     bc8:	6c 5d       	subi	r22, 0xDC	; 220
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
     bcc:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[1]);
     bd0:	c8 01       	movw	r24, r16
     bd2:	be 01       	movw	r22, r28
     bd4:	6b 5e       	subi	r22, 0xEB	; 235
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[0]);
     bdc:	c8 01       	movw	r24, r16
     bde:	b7 01       	movw	r22, r14
     be0:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>

int valde=0;

while (1){

valde = Buttons_meny(lcd,&BMA,4);
     be4:	e0 2e       	mov	r14, r16
     be6:	01 2f       	mov	r16, r17
     be8:	c6 01       	movw	r24, r12
     bea:	6e 2d       	mov	r22, r14
     bec:	70 2f       	mov	r23, r16
     bee:	44 e0       	ldi	r20, 0x04	; 4
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	91 05       	cpc	r25, r1
     bfa:	21 f4       	brne	.+8      	; 0xc04 <gui_games_meny+0x170>
game_ball(lcd);
     bfc:	c6 01       	movw	r24, r12
     bfe:	0e 94 de 12 	call	0x25bc	; 0x25bc <game_ball>
     c02:	f2 cf       	rjmp	.-28     	; 0xbe8 <gui_games_meny+0x154>
}else if (valde==2){
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	91 05       	cpc	r25, r1
     c08:	21 f4       	brne	.+8      	; 0xc12 <gui_games_meny+0x17e>
game_missile(lcd);
     c0a:	c6 01       	movw	r24, r12
     c0c:	0e 94 14 28 	call	0x5028	; 0x5028 <game_missile>
     c10:	eb cf       	rjmp	.-42     	; 0xbe8 <gui_games_meny+0x154>
}else if (valde==3){
     c12:	83 30       	cpi	r24, 0x03	; 3
     c14:	91 05       	cpc	r25, r1
     c16:	21 f4       	brne	.+8      	; 0xc20 <gui_games_meny+0x18c>
paint(lcd);
     c18:	c6 01       	movw	r24, r12
     c1a:	0e 94 55 01 	call	0x2aa	; 0x2aa <paint>
     c1e:	e4 cf       	rjmp	.-56     	; 0xbe8 <gui_games_meny+0x154>
}else if (valde==4){
     c20:	04 97       	sbiw	r24, 0x04	; 4
     c22:	21 f4       	brne	.+8      	; 0xc2c <gui_games_meny+0x198>
start_3dDemo(lcd);
     c24:	c6 01       	movw	r24, r12
     c26:	0e 94 40 2b 	call	0x5680	; 0x5680 <start_3dDemo>
     c2a:	de cf       	rjmp	.-68     	; 0xbe8 <gui_games_meny+0x154>

}



}
     c2c:	c1 5a       	subi	r28, 0xA1	; 161
     c2e:	df 4f       	sbci	r29, 0xFF	; 255
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <main_gui_meny>:
}


}

void main_gui_meny(LCD_engine *lcd){
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	c1 54       	subi	r28, 0x41	; 65
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	7c 01       	movw	r14, r24
LCD_CLR();
     c6e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
     c72:	c7 01       	movw	r24, r14
     c74:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
     c78:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
     c7c:	c7 01       	movw	r24, r14
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
     c84:	c7 01       	movw	r24, r14
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
     c8c:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
LCD_setPage(0);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("meny");
     c9c:	81 e3       	ldi	r24, 0x31	; 49
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>

ButtonsMeny BMA;
BMA.title="Main meny";
     ca4:	86 e3       	ldi	r24, 0x36	; 54
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01
MenyButton b[3];
b[0]=makeButton("Games",1);
     cb0:	8e 01       	movw	r16, r28
     cb2:	0d 5c       	subi	r16, 0xCD	; 205
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	c8 01       	movw	r24, r16
     cb8:	64 e1       	ldi	r22, 0x14	; 20
     cba:	72 e0       	ldi	r23, 0x02	; 2
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     cc4:	de 01       	movw	r26, r28
     cc6:	16 96       	adiw	r26, 0x06	; 6
     cc8:	f8 01       	movw	r30, r16
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	01 90       	ld	r0, Z+
     cce:	0d 92       	st	X+, r0
     cd0:	81 50       	subi	r24, 0x01	; 1
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main_gui_meny+0x80>
b[1]=makeButton("System",2);
     cd4:	8e 01       	movw	r16, r28
     cd6:	0d 5c       	subi	r16, 0xCD	; 205
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	c8 01       	movw	r24, r16
     cdc:	68 ec       	ldi	r22, 0xC8	; 200
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	42 e0       	ldi	r20, 0x02	; 2
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     ce8:	de 01       	movw	r26, r28
     cea:	55 96       	adiw	r26, 0x15	; 21
     cec:	f8 01       	movw	r30, r16
     cee:	8f e0       	ldi	r24, 0x0F	; 15
     cf0:	01 90       	ld	r0, Z+
     cf2:	0d 92       	st	X+, r0
     cf4:	81 50       	subi	r24, 0x01	; 1
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <main_gui_meny+0xa4>
b[2]=makeButton("About",3);
     cf8:	8e 01       	movw	r16, r28
     cfa:	0d 5c       	subi	r16, 0xCD	; 205
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	c8 01       	movw	r24, r16
     d00:	60 e4       	ldi	r22, 0x40	; 64
     d02:	72 e0       	ldi	r23, 0x02	; 2
     d04:	43 e0       	ldi	r20, 0x03	; 3
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
     d0c:	de 01       	movw	r26, r28
     d0e:	94 96       	adiw	r26, 0x24	; 36
     d10:	f8 01       	movw	r30, r16
     d12:	8f e0       	ldi	r24, 0x0F	; 15
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	81 50       	subi	r24, 0x01	; 1
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main_gui_meny+0xc8>
addMenyButton(&BMA, &b[2]);
     d1c:	8e 01       	movw	r16, r28
     d1e:	0f 5f       	subi	r16, 0xFF	; 255
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	c8 01       	movw	r24, r16
     d24:	be 01       	movw	r22, r28
     d26:	6c 5d       	subi	r22, 0xDC	; 220
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[1]);
     d2e:	c8 01       	movw	r24, r16
     d30:	be 01       	movw	r22, r28
     d32:	6b 5e       	subi	r22, 0xEB	; 235
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>
addMenyButton(&BMA, &b[0]);
     d3a:	c8 01       	movw	r24, r16
     d3c:	be 01       	movw	r22, r28
     d3e:	6a 5f       	subi	r22, 0xFA	; 250
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	0e 94 4c 1a 	call	0x3498	; 0x3498 <addMenyButton>

int valde=0;

while (1){

valde = Buttons_meny(lcd,&BMA,4);
     d46:	d0 2e       	mov	r13, r16
     d48:	01 2f       	mov	r16, r17
     d4a:	c7 01       	movw	r24, r14
     d4c:	6d 2d       	mov	r22, r13
     d4e:	70 2f       	mov	r23, r16
     d50:	44 e0       	ldi	r20, 0x04	; 4
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==1){
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	21 f4       	brne	.+8      	; 0xd66 <main_gui_meny+0x11a>
gui_games_meny(lcd);
     d5e:	c7 01       	movw	r24, r14
     d60:	0e 94 4a 05 	call	0xa94	; 0xa94 <gui_games_meny>
     d64:	f2 cf       	rjmp	.-28     	; 0xd4a <main_gui_meny+0xfe>
}else if (valde==2){
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	21 f4       	brne	.+8      	; 0xd74 <main_gui_meny+0x128>
//game_missile(lcd);
gui_system_meny(lcd);
     d6c:	c7 01       	movw	r24, r14
     d6e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <gui_system_meny>
     d72:	eb cf       	rjmp	.-42     	; 0xd4a <main_gui_meny+0xfe>
}else if (valde==3){
     d74:	03 97       	sbiw	r24, 0x03	; 3
     d76:	49 f7       	brne	.-46     	; 0xd4a <main_gui_meny+0xfe>
//	calibrate_touch(lcd);
about(lcd);
     d78:	c7 01       	movw	r24, r14
     d7a:	0e 94 09 05 	call	0xa12	; 0xa12 <about>
     d7e:	e5 cf       	rjmp	.-54     	; 0xd4a <main_gui_meny+0xfe>

00000d80 <main>:

while (1){if (START_isPressedAndRel()){break;}};

}

int main(void){
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
flash_finish();
LCD_engine *lcd = init_lcd();
     d86:	0e 94 99 10 	call	0x2132	; 0x2132 <init_lcd>
     d8a:	ec 01       	movw	r28, r24
button_init();
     d8c:	0e 94 b6 10 	call	0x216c	; 0x216c <button_init>

//Init the sys_time
TCCR0B=0b00000011; //64 prescaler
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	85 bd       	out	0x25, r24	; 37
TIMSK0=0x01;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 6e 00 	sts	0x006E, r24
sei();
     d9a:	78 94       	sei

touch_init_advance();
     d9c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <touch_init_advance>


draw_main_meny(lcd);
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>

//start_3dDemo(lcd);//TEMPORARY



unsigned char starts=eeprom_read(10);
     da6:	8a e0       	ldi	r24, 0x0A	; 10
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 58 18 	call	0x30b0	; 0x30b0 <eeprom_read>
     dae:	18 2f       	mov	r17, r24
if (starts==255){//just flashed...
     db0:	8f 3f       	cpi	r24, 0xFF	; 255
     db2:	51 f4       	brne	.+20     	; 0xdc8 <main+0x48>
set_calibration(37,164,47,86);
     db4:	85 e2       	ldi	r24, 0x25	; 37
     db6:	64 ea       	ldi	r22, 0xA4	; 164
     db8:	4f e2       	ldi	r20, 0x2F	; 47
     dba:	26 e5       	ldi	r18, 0x56	; 86
     dbc:	0e 94 38 17 	call	0x2e70	; 0x2e70 <set_calibration>
calibrate_touch(lcd);
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 67 18 	call	0x30ce	; 0x30ce <calibrate_touch>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <main+0x4c>

}
if (starts!=254){
     dc8:	8e 3f       	cpi	r24, 0xFE	; 254
     dca:	31 f0       	breq	.+12     	; 0xdd8 <main+0x58>
eeprom_write(10,starts+1);
     dcc:	61 2f       	mov	r22, r17
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 5f 18 	call	0x30be	; 0x30be <eeprom_write>
}

LCD_setPage(3);
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("eeprom:");
     de4:	86 e4       	ldi	r24, 0x46	; 70
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
rprintfInt(starts);
     dec:	81 2f       	mov	r24, r17
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>



//

drawStartImage(lcd);
     df4:	ce 01       	movw	r24, r28
     df6:	0e 94 4d 02 	call	0x49a	; 0x49a <drawStartImage>



main_gui_meny(lcd);
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 94 26 06 	call	0xc4c	; 0xc4c <main_gui_meny>


while (1){
	//if (~R_BUTTONS&(1<<B_A)){
	if (A_isPressed()){
     e00:	0e 94 cc 10 	call	0x2198	; 0x2198 <A_isPressed>
     e04:	88 23       	and	r24, r24
     e06:	59 f0       	breq	.+22     	; 0xe1e <main+0x9e>
	DisplaySetDispInverted(lcd, 1);
     e08:	ce 01       	movw	r24, r28
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DisplaySetDispInverted>
	DOGDATA;
     e10:	2a 9a       	sbi	0x05, 2	; 5
		game_ball(lcd);
     e12:	ce 01       	movw	r24, r28
     e14:	0e 94 de 12 	call	0x25bc	; 0x25bc <game_ball>
		draw_main_meny(lcd);
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
	}
	if (RIGHT_isPressed()){
     e1e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <RIGHT_isPressed>
     e22:	88 23       	and	r24, r24
     e24:	31 f0       	breq	.+12     	; 0xe32 <main+0xb2>
		//calibrate_touch(lcd);
		game_missile(lcd);
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 14 28 	call	0x5028	; 0x5028 <game_missile>
		draw_main_meny(lcd);
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
	}
	if (B_isPressed()){
     e32:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <B_isPressed>
     e36:	88 23       	and	r24, r24
     e38:	49 f0       	breq	.+18     	; 0xe4c <main+0xcc>
		calibrate_touch(lcd);
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 67 18 	call	0x30ce	; 0x30ce <calibrate_touch>
		draw_main_meny(lcd);
     e40:	ce 01       	movw	r24, r28
     e42:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
		gui_meny_demo(lcd);
     e46:	ce 01       	movw	r24, r28
     e48:	0e 94 1b 20 	call	0x4036	; 0x4036 <gui_meny_demo>
	}
	if (LEFT_isPressed()){
     e4c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LEFT_isPressed>
     e50:	88 23       	and	r24, r24
     e52:	31 f0       	breq	.+12     	; 0xe60 <main+0xe0>
		//test_touch(lcd);
		//calibrate_touch(lcd);
		paint(lcd);
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 55 01 	call	0x2aa	; 0x2aa <paint>
		draw_main_meny(lcd);
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
	}
	if (UP_isPressed()){
     e60:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UP_isPressed>
     e64:	88 23       	and	r24, r24
     e66:	31 f0       	breq	.+12     	; 0xe74 <main+0xf4>
		//test_touch(lcd);
		calibrate_touch(lcd);
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 94 67 18 	call	0x30ce	; 0x30ce <calibrate_touch>
		draw_main_meny(lcd);
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
		//paint(lcd);
	}
	if (DOWN_isPressed()){
     e74:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DOWN_isPressed>
     e78:	88 23       	and	r24, r24
     e7a:	11 f2       	breq	.-124    	; 0xe00 <main+0x80>
		//test_touch(lcd);
		main_gui_meny(lcd);
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 26 06 	call	0xc4c	; 0xc4c <main_gui_meny>
		draw_main_meny(lcd);
     e82:	ce 01       	movw	r24, r28
     e84:	0e 94 77 00 	call	0xee	; 0xee <draw_main_meny>
     e88:	bb cf       	rjmp	.-138    	; 0xe00 <main+0x80>

00000e8a <__vector_18>:
void paint(LCD_engine *lcd);
void test_buttons(LCD_engine *lcd);
void draw_main_meny(LCD_engine *lcd);
void drawStartImage(LCD_engine *lcd);

ISR(TIMER0_OVF_vect) {
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	0b b6       	in	r0, 0x3b	; 59
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
sys_time++;
     eb0:	80 91 65 0a 	lds	r24, 0x0A65
     eb4:	90 91 66 0a 	lds	r25, 0x0A66
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	90 93 66 0a 	sts	0x0A66, r25
     ebe:	80 93 65 0a 	sts	0x0A65, r24

if (TOUCH_STATE!=TOUCH_STATE_OFF){
     ec2:	80 91 64 0a 	lds	r24, 0x0A64
     ec6:	88 23       	and	r24, r24
     ec8:	11 f0       	breq	.+4      	; 0xece <__vector_18+0x44>
start_reading_with_interrupt();
     eca:	0e 94 83 17 	call	0x2f06	; 0x2f06 <start_reading_with_interrupt>
}
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0b be       	out	0x3b, r0	; 59
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <DOG_MasterInit>:



void DOG_MasterInit(void){
//Direction 
DDR_SPI|=(1<<DD_A0)|(1<<DD_RE); //A0 and RE is out 
     ef4:	84 b1       	in	r24, 0x04	; 4
     ef6:	8c 60       	ori	r24, 0x0C	; 12
     ef8:	84 b9       	out	0x04, r24	; 4
//Data
//PORT_CS&=~(1<<OUT_CS); //Chip select to 0 
PORT_RE|=(1<<OUT_RE);  //Reset to 1
     efa:	2b 9a       	sbi	0x05, 3	; 5
PORT_A0|=(1<<OUT_A0);  //A0 (command or data) to 1
     efc:	2a 9a       	sbi	0x05, 2	; 5
}
     efe:	08 95       	ret

00000f00 <SPI_MasterInit>:

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
//DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     f00:	80 eb       	ldi	r24, 0xB0	; 176
     f02:	84 b9       	out	0x04, r24	; 4

/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     f04:	81 e5       	ldi	r24, 0x51	; 81
     f06:	8c bd       	out	0x2c, r24	; 44
}
     f08:	08 95       	ret

00000f0a <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f0a:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <SPI_MasterTransmit+0x2>
}
     f12:	08 95       	ret

00000f14 <initDOGL128>:


void initDOGL128(void)
{
  	DOGENABLE;
     f14:	2c 98       	cbi	0x05, 4	; 5
  	DOGCOMMAND;
     f16:	2a 98       	cbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f1c:	0d b4       	in	r0, 0x2d	; 45
     f1e:	07 fe       	sbrs	r0, 7
     f20:	fd cf       	rjmp	.-6      	; 0xf1c <initDOGL128+0x8>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f22:	81 ea       	ldi	r24, 0xA1	; 161
     f24:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f26:	0d b4       	in	r0, 0x2d	; 45
     f28:	07 fe       	sbrs	r0, 7
     f2a:	fd cf       	rjmp	.-6      	; 0xf26 <initDOGL128+0x12>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f2c:	80 ec       	ldi	r24, 0xC0	; 192
     f2e:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f30:	0d b4       	in	r0, 0x2d	; 45
     f32:	07 fe       	sbrs	r0, 7
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <initDOGL128+0x1c>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f36:	86 ea       	ldi	r24, 0xA6	; 166
     f38:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <initDOGL128+0x26>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f40:	82 ea       	ldi	r24, 0xA2	; 162
     f42:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f44:	0d b4       	in	r0, 0x2d	; 45
     f46:	07 fe       	sbrs	r0, 7
     f48:	fd cf       	rjmp	.-6      	; 0xf44 <initDOGL128+0x30>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f4a:	8f e2       	ldi	r24, 0x2F	; 47
     f4c:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f4e:	0d b4       	in	r0, 0x2d	; 45
     f50:	07 fe       	sbrs	r0, 7
     f52:	fd cf       	rjmp	.-6      	; 0xf4e <initDOGL128+0x3a>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f54:	88 ef       	ldi	r24, 0xF8	; 248
     f56:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f58:	0d b4       	in	r0, 0x2d	; 45
     f5a:	07 fe       	sbrs	r0, 7
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <initDOGL128+0x44>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f5e:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f60:	0d b4       	in	r0, 0x2d	; 45
     f62:	07 fe       	sbrs	r0, 7
     f64:	fd cf       	rjmp	.-6      	; 0xf60 <initDOGL128+0x4c>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f66:	87 e2       	ldi	r24, 0x27	; 39
     f68:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f6a:	0d b4       	in	r0, 0x2d	; 45
     f6c:	07 fe       	sbrs	r0, 7
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <initDOGL128+0x56>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f70:	81 e8       	ldi	r24, 0x81	; 129
     f72:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f74:	0d b4       	in	r0, 0x2d	; 45
     f76:	07 fe       	sbrs	r0, 7
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <initDOGL128+0x60>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f7a:	80 e1       	ldi	r24, 0x10	; 16
     f7c:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f7e:	0d b4       	in	r0, 0x2d	; 45
     f80:	07 fe       	sbrs	r0, 7
     f82:	fd cf       	rjmp	.-6      	; 0xf7e <initDOGL128+0x6a>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f84:	8c ea       	ldi	r24, 0xAC	; 172
     f86:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f88:	0d b4       	in	r0, 0x2d	; 45
     f8a:	07 fe       	sbrs	r0, 7
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <initDOGL128+0x74>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f8e:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f90:	0d b4       	in	r0, 0x2d	; 45
     f92:	07 fe       	sbrs	r0, 7
     f94:	fd cf       	rjmp	.-6      	; 0xf90 <initDOGL128+0x7c>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     f96:	8f ea       	ldi	r24, 0xAF	; 175
     f98:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     f9a:	0d b4       	in	r0, 0x2d	; 45
     f9c:	07 fe       	sbrs	r0, 7
     f9e:	fd cf       	rjmp	.-6      	; 0xf9a <initDOGL128+0x86>
    SPI_MasterTransmit(DISPON);
	//SPI_MasterTransmit(0xA4);
	
	//
	//DOGDATA;
  DOGDISABLE; //Why?
     fa0:	2c 9a       	sbi	0x05, 4	; 5


}
     fa2:	08 95       	ret

00000fa4 <swaap>:
void swaap(int *i, int *j) {
     fa4:	fc 01       	movw	r30, r24
     fa6:	db 01       	movw	r26, r22
   int t = *i;
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
   *i = *j;
     fac:	8d 91       	ld	r24, X+
     fae:	9c 91       	ld	r25, X
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
   *j = t;
     fb6:	2d 93       	st	X+, r18
     fb8:	3c 93       	st	X, r19
}
     fba:	08 95       	ret

00000fbc <pixelSetOrClearOrInvert>:

void pixelSetOrClearOrInvert(LCD_engine * me, char set){
me->SETPIXEL=set;
     fbc:	fc 01       	movw	r30, r24
     fbe:	ef 57       	subi	r30, 0x7F	; 127
     fc0:	fb 4f       	sbci	r31, 0xFB	; 251
     fc2:	60 83       	st	Z, r22
}
     fc4:	08 95       	ret

00000fc6 <DisplaySetDispInverted>:
void DisplaySetDispInverted(LCD_engine * me, char set){
me->DISPINVERTED=set;// 1 for inverted, 0 for normal
     fc6:	fc 01       	movw	r30, r24
     fc8:	e0 58       	subi	r30, 0x80	; 128
     fca:	fb 4f       	sbci	r31, 0xFB	; 251
     fcc:	60 83       	st	Z, r22
DOGCOMMAND;
     fce:	2a 98       	cbi	0x05, 2	; 5
if (set){
     fd0:	66 23       	and	r22, r22
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <DisplaySetDispInverted+0x1a>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     fd4:	87 ea       	ldi	r24, 0xA7	; 167
     fd6:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     fd8:	0d b4       	in	r0, 0x2d	; 45
     fda:	07 fe       	sbrs	r0, 7
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <DisplaySetDispInverted+0x12>
     fde:	08 95       	ret
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     fe0:	86 ea       	ldi	r24, 0xA6	; 166
     fe2:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
     fe4:	0d b4       	in	r0, 0x2d	; 45
     fe6:	07 fe       	sbrs	r0, 7
     fe8:	fd cf       	rjmp	.-6      	; 0xfe4 <DisplaySetDispInverted+0x1e>
     fea:	08 95       	ret

00000fec <setDubbelbuffer>:
}
//		SPI_MasterTransmit(DISPREVERSE);
	//	DOGDATA;
}
void setDubbelbuffer(LCD_engine * me,char dubbel){
me->DUBBELBUFFER=dubbel;
     fec:	fc 01       	movw	r30, r24
     fee:	ee 57       	subi	r30, 0x7E	; 126
     ff0:	fb 4f       	sbci	r31, 0xFB	; 251
     ff2:	60 83       	st	Z, r22
}
     ff4:	08 95       	ret

00000ff6 <LCD_draw16x16ImageToRam>:

void LCD_draw16x16ImageToRam(LCD_engine * me,unsigned char image[32],unsigned char x,unsigned char y){
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <LCD_draw16x16ImageToRam+0x26>
    101c:	00 d0       	rcall	.+0      	; 0x101e <LCD_draw16x16ImageToRam+0x28>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <LCD_draw16x16ImageToRam+0x2a>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2c 01       	movw	r4, r24
//for (int row=0;row<2;row++){
for (int i=0;i<16;i++){
//me->LCD_RAM[((y/8)+row)*128+(i+x)]|=image[(i+row*16)];
if (y%8!=0){

me->LCD_RAM[((y/8))*128+(i+x)]|=image[(i)]<<(y%8);
    1026:	e2 2f       	mov	r30, r18
    1028:	e6 95       	lsr	r30
    102a:	e6 95       	lsr	r30
    102c:	e6 95       	lsr	r30
    102e:	f0 e0       	ldi	r31, 0x00	; 0
}
void setDubbelbuffer(LCD_engine * me,char dubbel){
me->DUBBELBUFFER=dubbel;
}

void LCD_draw16x16ImageToRam(LCD_engine * me,unsigned char image[32],unsigned char x,unsigned char y){
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	cf 01       	movw	r24, r30
    1034:	96 95       	lsr	r25
    1036:	98 2f       	mov	r25, r24
    1038:	88 27       	eor	r24, r24
    103a:	97 95       	ror	r25
    103c:	87 95       	ror	r24
    103e:	84 0f       	add	r24, r20
    1040:	95 1f       	adc	r25, r21
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	4c 01       	movw	r8, r24
    1048:	84 0c       	add	r8, r4
    104a:	95 1c       	adc	r9, r5
    104c:	86 2f       	mov	r24, r22
    104e:	97 2f       	mov	r25, r23
    1050:	dc 01       	movw	r26, r24
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	1f 01       	movw	r2, r30
    1056:	36 94       	lsr	r3
    1058:	32 2c       	mov	r3, r2
    105a:	22 24       	eor	r2, r2
    105c:	37 94       	ror	r3
    105e:	27 94       	ror	r2
    1060:	24 0e       	add	r2, r20
    1062:	35 1e       	adc	r3, r21
    1064:	c2 01       	movw	r24, r4
    1066:	82 0d       	add	r24, r2
    1068:	93 1d       	adc	r25, r3
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
    106e:	cf 01       	movw	r24, r30
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	96 95       	lsr	r25
    1074:	98 2f       	mov	r25, r24
    1076:	88 27       	eor	r24, r24
    1078:	97 95       	ror	r25
    107a:	87 95       	ror	r24
    107c:	84 0f       	add	r24, r20
    107e:	95 1f       	adc	r25, r21
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	5c 01       	movw	r10, r24
    1086:	a4 0c       	add	r10, r4
    1088:	b5 1c       	adc	r11, r5
    108a:	64 01       	movw	r12, r8
    108c:	0b 81       	ldd	r16, Y+3	; 0x03
    108e:	1c 81       	ldd	r17, Y+4	; 0x04
    1090:	66 24       	eor	r6, r6
    1092:	77 24       	eor	r7, r7


//for (int row=0;row<2;row++){
for (int i=0;i<16;i++){
//me->LCD_RAM[((y/8)+row)*128+(i+x)]|=image[(i+row*16)];
if (y%8!=0){
    1094:	e2 2e       	mov	r14, r18
    1096:	ff 24       	eor	r15, r15
    1098:	a7 01       	movw	r20, r14
    109a:	47 70       	andi	r20, 0x07	; 7
    109c:	50 70       	andi	r21, 0x00	; 0

me->LCD_RAM[((y/8))*128+(i+x)]|=image[(i)]<<(y%8);

me->LCD_RAM[((y/8)+1)*128+(i+x)]|=image[(i)]>>(8-y%8);
    109e:	68 e0       	ldi	r22, 0x08	; 8
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	64 1b       	sub	r22, r20
    10a4:	75 0b       	sbc	r23, r21
    10a6:	9c 91       	ld	r25, X


//for (int row=0;row<2;row++){
for (int i=0;i<16;i++){
//me->LCD_RAM[((y/8)+row)*128+(i+x)]|=image[(i+row*16)];
if (y%8!=0){
    10a8:	41 15       	cp	r20, r1
    10aa:	51 05       	cpc	r21, r1
    10ac:	a1 f1       	breq	.+104    	; 0x1116 <LCD_draw16x16ImageToRam+0x120>

me->LCD_RAM[((y/8))*128+(i+x)]|=image[(i)]<<(y%8);
    10ae:	89 2f       	mov	r24, r25
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	04 2e       	mov	r0, r20
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <LCD_draw16x16ImageToRam+0xc4>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <LCD_draw16x16ImageToRam+0xc0>
    10be:	f6 01       	movw	r30, r12
    10c0:	20 81       	ld	r18, Z
    10c2:	28 2b       	or	r18, r24
    10c4:	20 83       	st	Z, r18

me->LCD_RAM[((y/8)+1)*128+(i+x)]|=image[(i)]>>(8-y%8);
    10c6:	8c 91       	ld	r24, X
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	06 2e       	mov	r0, r22
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <LCD_draw16x16ImageToRam+0xdc>
    10ce:	95 95       	asr	r25
    10d0:	87 95       	ror	r24
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <LCD_draw16x16ImageToRam+0xd8>
    10d6:	eb 81       	ldd	r30, Y+3	; 0x03
    10d8:	fc 81       	ldd	r31, Y+4	; 0x04
    10da:	20 81       	ld	r18, Z
    10dc:	28 2b       	or	r18, r24
    10de:	20 83       	st	Z, r18

me->LCD_RAM[((y/8)+1)*128+(i+x)]|=image[(i+16)]<<(y%8);
    10e0:	50 96       	adiw	r26, 0x10	; 16
    10e2:	8c 91       	ld	r24, X
    10e4:	50 97       	sbiw	r26, 0x10	; 16
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	04 2e       	mov	r0, r20
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <LCD_draw16x16ImageToRam+0xfa>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <LCD_draw16x16ImageToRam+0xf6>
    10f4:	28 2b       	or	r18, r24
    10f6:	20 83       	st	Z, r18

me->LCD_RAM[((y/8)+2)*128+(i+x)]|=image[(i+16)]>>(8-y%8);
    10f8:	50 96       	adiw	r26, 0x10	; 16
    10fa:	8c 91       	ld	r24, X
    10fc:	50 97       	sbiw	r26, 0x10	; 16
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	06 2e       	mov	r0, r22
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <LCD_draw16x16ImageToRam+0x112>
    1104:	95 95       	asr	r25
    1106:	87 95       	ror	r24
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <LCD_draw16x16ImageToRam+0x10e>
    110c:	f5 01       	movw	r30, r10
    110e:	20 81       	ld	r18, Z
    1110:	28 2b       	or	r18, r24
    1112:	20 83       	st	Z, r18
    1114:	0b c0       	rjmp	.+22     	; 0x112c <LCD_draw16x16ImageToRam+0x136>
//me->LCD_RAM[((y/8)+1)*128+(i+x)]|=image[(i+16)]<<(y%8);


//me->LCD_RAM[((y/8)+row+1)*128+(i+x)]|=image[(i+row*16)]<<(y%8);
}else{
me->LCD_RAM[((y/8))*128+(i+x)]|=image[(i)];
    1116:	f4 01       	movw	r30, r8
    1118:	80 81       	ld	r24, Z
    111a:	89 2b       	or	r24, r25
    111c:	80 83       	st	Z, r24
me->LCD_RAM[((y/8)+1)*128+(i+x)]|=image[(i+16)];
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	50 96       	adiw	r26, 0x10	; 16
    1124:	9c 91       	ld	r25, X
    1126:	50 97       	sbiw	r26, 0x10	; 16
    1128:	89 2b       	or	r24, r25
    112a:	80 83       	st	Z, r24

void LCD_draw16x16ImageToRam(LCD_engine * me,unsigned char image[32],unsigned char x,unsigned char y){


//for (int row=0;row<2;row++){
for (int i=0;i<16;i++){
    112c:	08 94       	sec
    112e:	61 1c       	adc	r6, r1
    1130:	71 1c       	adc	r7, r1
    1132:	08 94       	sec
    1134:	c1 1c       	adc	r12, r1
    1136:	d1 1c       	adc	r13, r1
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	08 94       	sec
    1146:	a1 1c       	adc	r10, r1
    1148:	b1 1c       	adc	r11, r1
    114a:	08 94       	sec
    114c:	81 1c       	adc	r8, r1
    114e:	91 1c       	adc	r9, r1
    1150:	0f 5f       	subi	r16, 0xFF	; 255
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	90 e1       	ldi	r25, 0x10	; 16
    1156:	69 16       	cp	r6, r25
    1158:	71 04       	cpc	r7, r1
    115a:	09 f0       	breq	.+2      	; 0x115e <LCD_draw16x16ImageToRam+0x168>
    115c:	a4 cf       	rjmp	.-184    	; 0x10a6 <LCD_draw16x16ImageToRam+0xb0>
//me->LCD_RAM[((y/8)+row-1)*128+(i+x)]|=image[(i+row*16)]>>(y%8);

}
//}

if (y%8!=0){
    115e:	a7 e0       	ldi	r26, 0x07	; 7
    1160:	ea 22       	and	r14, r26
    1162:	ff 24       	eor	r15, r15
    1164:	ef 28       	or	r14, r15
    1166:	71 f0       	breq	.+28     	; 0x1184 <LCD_draw16x16ImageToRam+0x18e>
me->LCD_changed_RAM[(((y)/8+2)*128+x)/8]=0xFF;
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	33 e0       	ldi	r19, 0x03	; 3
    116e:	f5 95       	asr	r31
    1170:	e7 95       	ror	r30
    1172:	3a 95       	dec	r19
    1174:	e1 f7       	brne	.-8      	; 0x116e <LCD_draw16x16ImageToRam+0x178>
    1176:	e4 0d       	add	r30, r4
    1178:	f5 1d       	adc	r31, r5
    117a:	e0 50       	subi	r30, 0x00	; 0
    117c:	fc 4f       	sbci	r31, 0xFC	; 252
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	81 93       	st	Z+, r24
me->LCD_changed_RAM[(((y)/8+2)*128+x)/8+1]=0xFF;
    1182:	80 83       	st	Z, r24

}

me->LCD_changed_RAM[((y/8)*128+x)/8]=0xFF;
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	23 e0       	ldi	r18, 0x03	; 3
    118a:	f5 95       	asr	r31
    118c:	e7 95       	ror	r30
    118e:	2a 95       	dec	r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <LCD_draw16x16ImageToRam+0x194>
    1192:	e4 0d       	add	r30, r4
    1194:	f5 1d       	adc	r31, r5
    1196:	e0 50       	subi	r30, 0x00	; 0
    1198:	fc 4f       	sbci	r31, 0xFC	; 252
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	81 93       	st	Z+, r24
me->LCD_changed_RAM[((y/8)*128+x)/8+1]=0xFF;
    119e:	80 83       	st	Z, r24
me->LCD_changed_RAM[(((y)/8+1)*128+x)/8]=0xFF;
    11a0:	f1 01       	movw	r30, r2
    11a2:	93 e0       	ldi	r25, 0x03	; 3
    11a4:	f5 95       	asr	r31
    11a6:	e7 95       	ror	r30
    11a8:	9a 95       	dec	r25
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <LCD_draw16x16ImageToRam+0x1ae>
    11ac:	e4 0d       	add	r30, r4
    11ae:	f5 1d       	adc	r31, r5
    11b0:	e0 50       	subi	r30, 0x00	; 0
    11b2:	fc 4f       	sbci	r31, 0xFC	; 252
    11b4:	81 93       	st	Z+, r24
me->LCD_changed_RAM[(((y)/8+1)*128+x)/8+1]=0xFF;
    11b6:	80 83       	st	Z, r24
//me->LCD_changed_RAM[j]=0xFF;
//}



}
    11b8:	26 96       	adiw	r28, 0x06	; 6
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	6f 90       	pop	r6
    11e0:	5f 90       	pop	r5
    11e2:	4f 90       	pop	r4
    11e4:	3f 90       	pop	r3
    11e6:	2f 90       	pop	r2
    11e8:	08 95       	ret

000011ea <LCD_drawImageToRam>:

void LCD_drawImageToRam(LCD_engine * me,unsigned char image[1024]){
    11ea:	ac 01       	movw	r20, r24
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0

for (int i=0;i<1024;i++){
me->LCD_RAM[i]=image[i];
    11f0:	fa 01       	movw	r30, r20
    11f2:	e2 0f       	add	r30, r18
    11f4:	f3 1f       	adc	r31, r19
    11f6:	db 01       	movw	r26, r22
    11f8:	a2 0f       	add	r26, r18
    11fa:	b3 1f       	adc	r27, r19
    11fc:	8c 91       	ld	r24, X
    11fe:	80 83       	st	Z, r24

}

void LCD_drawImageToRam(LCD_engine * me,unsigned char image[1024]){

for (int i=0;i<1024;i++){
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	20 30       	cpi	r18, 0x00	; 0
    1208:	38 07       	cpc	r19, r24
    120a:	91 f7       	brne	.-28     	; 0x11f0 <LCD_drawImageToRam+0x6>
    120c:	fa 01       	movw	r30, r20
    120e:	e0 50       	subi	r30, 0x00	; 0
    1210:	fc 4f       	sbci	r31, 0xFC	; 252
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
me->LCD_RAM[i]=image[i];
}
for (int j=0;j<128;j++){
me->LCD_changed_RAM[j]=0xFF;
    1216:	2f ef       	ldi	r18, 0xFF	; 255
    1218:	21 93       	st	Z+, r18
void LCD_drawImageToRam(LCD_engine * me,unsigned char image[1024]){

for (int i=0;i<1024;i++){
me->LCD_RAM[i]=image[i];
}
for (int j=0;j<128;j++){
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	80 38       	cpi	r24, 0x80	; 128
    121e:	91 05       	cpc	r25, r1
    1220:	d9 f7       	brne	.-10     	; 0x1218 <LCD_drawImageToRam+0x2e>
me->LCD_changed_RAM[j]=0xFF;
}



}
    1222:	08 95       	ret

00001224 <redrawRAM>:
LCD_setColumn(x);
LCD_setPage(y/8);
DOGDATA;
SPI_MasterTransmit(me->LCD_RAM[(y/8)*128+x]);
}
void redrawRAM(LCD_engine * me){
    1224:	dc 01       	movw	r26, r24
    1226:	60 eb       	ldi	r22, 0xB0	; 176
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    122c:	90 e1       	ldi	r25, 0x10	; 16
}
void redrawRAM(LCD_engine * me){
for(int adrPage = 0; adrPage < 8; adrPage++)
	{  
	
	DOGCOMMAND;
    122e:	2a 98       	cbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1230:	6e bd       	out	0x2e, r22	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1232:	0d b4       	in	r0, 0x2d	; 45
    1234:	07 fe       	sbrs	r0, 7
    1236:	fd cf       	rjmp	.-6      	; 0x1232 <redrawRAM+0xe>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1238:	9e bd       	out	0x2e, r25	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    123a:	0d b4       	in	r0, 0x2d	; 45
    123c:	07 fe       	sbrs	r0, 7
    123e:	fd cf       	rjmp	.-6      	; 0x123a <redrawRAM+0x16>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1240:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1242:	0d b4       	in	r0, 0x2d	; 45
    1244:	07 fe       	sbrs	r0, 7
    1246:	fd cf       	rjmp	.-6      	; 0x1242 <redrawRAM+0x1e>
	
	DOGCOMMAND;
	SPI_MasterTransmit(PAGEADR+adrPage);
	SPI_MasterTransmit(COLADRH+0);
	SPI_MasterTransmit(COLADRL+0);
	DOGDATA;
    1248:	2a 9a       	sbi	0x05, 2	; 5
    124a:	fd 01       	movw	r30, r26
    124c:	e4 0f       	add	r30, r20
    124e:	f5 1f       	adc	r31, r21
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
      	for(int adrLaw = 0; adrLaw < 128; adrLaw++)
      	{SPI_MasterTransmit(me->LCD_RAM[adrPage*128+adrLaw]);
    1254:	80 81       	ld	r24, Z
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1256:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1258:	0d b4       	in	r0, 0x2d	; 45
    125a:	07 fe       	sbrs	r0, 7
    125c:	fd cf       	rjmp	.-6      	; 0x1258 <redrawRAM+0x34>
	DOGCOMMAND;
	SPI_MasterTransmit(PAGEADR+adrPage);
	SPI_MasterTransmit(COLADRH+0);
	SPI_MasterTransmit(COLADRL+0);
	DOGDATA;
      	for(int adrLaw = 0; adrLaw < 128; adrLaw++)
    125e:	2f 5f       	subi	r18, 0xFF	; 255
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	31 96       	adiw	r30, 0x01	; 1
    1264:	20 38       	cpi	r18, 0x80	; 128
    1266:	31 05       	cpc	r19, r1
    1268:	a9 f7       	brne	.-22     	; 0x1254 <redrawRAM+0x30>
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	40 58       	subi	r20, 0x80	; 128
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
LCD_setPage(y/8);
DOGDATA;
SPI_MasterTransmit(me->LCD_RAM[(y/8)*128+x]);
}
void redrawRAM(LCD_engine * me){
for(int adrPage = 0; adrPage < 8; adrPage++)
    1270:	68 3b       	cpi	r22, 0xB8	; 184
    1272:	e9 f6       	brne	.-70     	; 0x122e <redrawRAM+0xa>
      	for(int adrLaw = 0; adrLaw < 128; adrLaw++)
      	{SPI_MasterTransmit(me->LCD_RAM[adrPage*128+adrLaw]);
		}
	}

}
    1274:	08 95       	ret

00001276 <LCD_setContrast>:




void LCD_setContrast(LCD_engine * me,unsigned char contrast){
DOGCOMMAND;
    1276:	2a 98       	cbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1278:	81 e8       	ldi	r24, 0x81	; 129
    127a:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    127c:	0d b4       	in	r0, 0x2d	; 45
    127e:	07 fe       	sbrs	r0, 7
    1280:	fd cf       	rjmp	.-6      	; 0x127c <LCD_setContrast+0x6>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1282:	6e bd       	out	0x2e, r22	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1284:	0d b4       	in	r0, 0x2d	; 45
    1286:	07 fe       	sbrs	r0, 7
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <LCD_setContrast+0xe>
void LCD_setContrast(LCD_engine * me,unsigned char contrast){
DOGCOMMAND;
SPI_MasterTransmit(SETCONTRAST);        
SPI_MasterTransmit(contrast);

}
    128a:	08 95       	ret

0000128c <LCD_RAM_CLR>:
void LCD_RAM_CLR(LCD_engine * me)
{
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 1024; i++)
	{  
      		me->LCD_changed_RAM[(i)/8]=0;
    1290:	f9 01       	movw	r30, r18
    1292:	b3 e0       	ldi	r27, 0x03	; 3
    1294:	f5 95       	asr	r31
    1296:	e7 95       	ror	r30
    1298:	ba 95       	dec	r27
    129a:	e1 f7       	brne	.-8      	; 0x1294 <LCD_RAM_CLR+0x8>
    129c:	e8 0f       	add	r30, r24
    129e:	f9 1f       	adc	r31, r25
    12a0:	e0 50       	subi	r30, 0x00	; 0
    12a2:	fc 4f       	sbci	r31, 0xFC	; 252
    12a4:	10 82       	st	Z, r1
      		me->LCD_RAM[i]=0x00;
    12a6:	fc 01       	movw	r30, r24
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	10 82       	st	Z, r1
SPI_MasterTransmit(contrast);

}
void LCD_RAM_CLR(LCD_engine * me)
{
	for(int i = 0; i < 1024; i++)
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	44 e0       	ldi	r20, 0x04	; 4
    12b4:	20 30       	cpi	r18, 0x00	; 0
    12b6:	34 07       	cpc	r19, r20
    12b8:	59 f7       	brne	.-42     	; 0x1290 <LCD_RAM_CLR+0x4>
      		me->LCD_RAM[i]=0x00;

      	
   	}

}
    12ba:	08 95       	ret

000012bc <LCD_CLR>:
	//return;
   	uint8_t adrPage, adrLaw, Data;
	Data = 0;
   	
	//set page 0
	DOGENABLE;
    12bc:	2c 98       	cbi	0x05, 4	; 5
    12be:	90 eb       	ldi	r25, 0xB0	; 176
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    12c0:	20 e1       	ldi	r18, 0x10	; 16
	//SPI_MasterTransmit(COLADRH+0);
	//SPI_MasterTransmit(COLADRL+0);
	
	for(adrPage = 0; adrPage < 8; adrPage++)
	{  
	DOGCOMMAND;
    12c2:	2a 98       	cbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    12c4:	9e bd       	out	0x2e, r25	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    12c6:	0d b4       	in	r0, 0x2d	; 45
    12c8:	07 fe       	sbrs	r0, 7
    12ca:	fd cf       	rjmp	.-6      	; 0x12c6 <LCD_CLR+0xa>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    12cc:	2e bd       	out	0x2e, r18	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    12ce:	0d b4       	in	r0, 0x2d	; 45
    12d0:	07 fe       	sbrs	r0, 7
    12d2:	fd cf       	rjmp	.-6      	; 0x12ce <LCD_CLR+0x12>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    12d4:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    12d6:	0d b4       	in	r0, 0x2d	; 45
    12d8:	07 fe       	sbrs	r0, 7
    12da:	fd cf       	rjmp	.-6      	; 0x12d6 <LCD_CLR+0x1a>
	SPI_MasterTransmit(PAGEADR+adrPage);
	SPI_MasterTransmit(COLADRH+0);
	SPI_MasterTransmit(COLADRL+0);
		//LCD_SetPageAddress(adrPage);
		//LCD_SetColumnAddress(0);
		DOGDATA;
    12dc:	2a 9a       	sbi	0x05, 2	; 5
    12de:	80 e0       	ldi	r24, 0x00	; 0
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    12e0:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    12e2:	0d b4       	in	r0, 0x2d	; 45
    12e4:	07 fe       	sbrs	r0, 7
    12e6:	fd cf       	rjmp	.-6      	; 0x12e2 <LCD_CLR+0x26>
	SPI_MasterTransmit(COLADRH+0);
	SPI_MasterTransmit(COLADRL+0);
		//LCD_SetPageAddress(adrPage);
		//LCD_SetColumnAddress(0);
		DOGDATA;
      	for(adrLaw = 0; adrLaw < 128; adrLaw++)
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 38       	cpi	r24, 0x80	; 128
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <LCD_CLR+0x24>
    12ee:	9f 5f       	subi	r25, 0xFF	; 255
	DOGENABLE;
	//SPI_MasterTransmit(PAGEADR+0);
	//SPI_MasterTransmit(COLADRH+0);
	//SPI_MasterTransmit(COLADRL+0);
	
	for(adrPage = 0; adrPage < 8; adrPage++)
    12f0:	98 3b       	cpi	r25, 0xB8	; 184
    12f2:	39 f7       	brne	.-50     	; 0x12c2 <LCD_CLR+0x6>
			//}else {
			SPI_MasterTransmit(Data);
			//}
      	}
   	}
	 DOGDISABLE;
    12f4:	2c 9a       	sbi	0x05, 4	; 5
} 
    12f6:	08 95       	ret

000012f8 <LCD_init>:

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
//DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
    12f8:	80 eb       	ldi	r24, 0xB0	; 176
    12fa:	84 b9       	out	0x04, r24	; 4

/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    12fc:	81 e5       	ldi	r24, 0x51	; 81
    12fe:	8c bd       	out	0x2c, r24	; 44
void LCD_init(void){


SPI_MasterInit();

DOG_MasterInit();
    1300:	0e 94 7a 07 	call	0xef4	; 0xef4 <DOG_MasterInit>

PORT_RE &= ~(1<<OUT_RE); // RES\ = LOW 
    1304:	2b 98       	cbi	0x05, 3	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	94 eb       	ldi	r25, 0xB4	; 180
    130a:	fc 01       	movw	r30, r24
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <LCD_init+0x14>
_delay_ms(50);
PORT_RE |= (1<<OUT_RE); // RES\ = HIGH
    1310:	2b 9a       	sbi	0x05, 3	; 5
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <LCD_init+0x1a>
_delay_ms(50);

initDOGL128();
    1316:	0e 94 8a 07 	call	0xf14	; 0xf14 <initDOGL128>



LCD_CLR();
    131a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
DOGENABLE;
    131e:	2c 98       	cbi	0x05, 4	; 5
}
    1320:	08 95       	ret

00001322 <resetConnection>:
			//}
      	}
   	}
	 DOGDISABLE;
} 
void resetConnection(){DOGENABLE;}
    1322:	2c 98       	cbi	0x05, 4	; 5
    1324:	08 95       	ret

00001326 <LCD_setPage>:
void LCD_setPage(unsigned char page){
DOGCOMMAND;
    1326:	2a 98       	cbi	0x05, 2	; 5
SPI_MasterTransmit(PAGEADR+page);
    1328:	80 55       	subi	r24, 0x50	; 80
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    132a:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    132c:	0d b4       	in	r0, 0x2d	; 45
    132e:	07 fe       	sbrs	r0, 7
    1330:	fd cf       	rjmp	.-6      	; 0x132c <LCD_setPage+0x6>
//SPI_MasterTransmit(COLADRH+0x7);
//SPI_MasterTransmit(COLADRL+0xF);
//DOGDATA;


}
    1332:	08 95       	ret

00001334 <LCD_setColumn>:
void LCD_setColumn(unsigned char col){
    1334:	98 2f       	mov	r25, r24
DOGCOMMAND;
    1336:	2a 98       	cbi	0x05, 2	; 5
//SPI_MasterTransmit(PAGEADR+page);
SPI_MasterTransmit(COLADRH+((col&0xF0)>>4));
    1338:	82 95       	swap	r24
    133a:	8f 70       	andi	r24, 0x0F	; 15
    133c:	80 5f       	subi	r24, 0xF0	; 240
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    133e:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1340:	0d b4       	in	r0, 0x2d	; 45
    1342:	07 fe       	sbrs	r0, 7
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <LCD_setColumn+0xc>
}
void LCD_setColumn(unsigned char col){
DOGCOMMAND;
//SPI_MasterTransmit(PAGEADR+page);
SPI_MasterTransmit(COLADRH+((col&0xF0)>>4));
SPI_MasterTransmit(COLADRL+(col&0x0F));
    1346:	9f 70       	andi	r25, 0x0F	; 15
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1348:	9e bd       	out	0x2e, r25	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    134a:	0d b4       	in	r0, 0x2d	; 45
    134c:	07 fe       	sbrs	r0, 7
    134e:	fd cf       	rjmp	.-6      	; 0x134a <LCD_setColumn+0x16>
//SPI_MasterTransmit(PAGEADR+page);
SPI_MasterTransmit(COLADRH+((col&0xF0)>>4));
SPI_MasterTransmit(COLADRL+(col&0x0F));
//DOGDATA;

}
    1350:	08 95       	ret

00001352 <pushRAM>:
		}
	}

}

void pushRAM(LCD_engine * me){
    1352:	2f 92       	push	r2
    1354:	3f 92       	push	r3
    1356:	4f 92       	push	r4
    1358:	5f 92       	push	r5
    135a:	6f 92       	push	r6
    135c:	7f 92       	push	r7
    135e:	8f 92       	push	r8
    1360:	9f 92       	push	r9
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	6c 01       	movw	r12, r24
    1378:	60 eb       	ldi	r22, 0xB0	; 176
    137a:	76 2e       	mov	r7, r22
    137c:	ee 24       	eor	r14, r14
    137e:	ff 24       	eor	r15, r15
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1380:	50 e1       	ldi	r21, 0x10	; 16
    1382:	65 2e       	mov	r6, r21
      	{	//LCD_RAM[adrPage*128+adrLaw]|=0x00;
			
	//LCD_changed_RAM[((y/8)*128+x)/8]|=1<<(((y/8)*128+x)%8);
			//unsigned char pos=adrPage*128+adrLaw;
			//if (LCD_changed_RAM[((adrPage)*128+adrLaw)/8]){//pixel have changed
      		if (me->LCD_changed_RAM[((adrPage)*128+adrLaw)/8]&(1<<(7-((adrPage)*128+adrLaw)%8))){//pixel have changed
    1384:	47 e0       	ldi	r20, 0x07	; 7
    1386:	24 2e       	mov	r2, r20
    1388:	31 2c       	mov	r3, r1
				
				//SPI_MasterTransmit(~me->LCD_RAM[adrPage*128+adrLaw]);
				
				SPI_MasterTransmit(me->LCD_RAM[adrPage*128+adrLaw]);
				
				me->LCD_changed_RAM[((adrPage)*128+adrLaw)/8]&=~(1<<(7-((adrPage)*128+adrLaw)%8));
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	43 2e       	mov	r4, r19
    138e:	51 2c       	mov	r5, r1
void pushRAM(LCD_engine * me){
int active_col=0;
for(int adrPage = 0; adrPage < 8; adrPage++)
	{  
	
	DOGCOMMAND;
    1390:	2a 98       	cbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1392:	7e bc       	out	0x2e, r7	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1394:	0d b4       	in	r0, 0x2d	; 45
    1396:	07 fe       	sbrs	r0, 7
    1398:	fd cf       	rjmp	.-6      	; 0x1394 <pushRAM+0x42>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    139a:	6e bc       	out	0x2e, r6	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    139c:	0d b4       	in	r0, 0x2d	; 45
    139e:	07 fe       	sbrs	r0, 7
    13a0:	fd cf       	rjmp	.-6      	; 0x139c <pushRAM+0x4a>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    13a2:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    13a4:	0d b4       	in	r0, 0x2d	; 45
    13a6:	07 fe       	sbrs	r0, 7
    13a8:	fd cf       	rjmp	.-6      	; 0x13a4 <pushRAM+0x52>
	SPI_MasterTransmit(COLADRH+0);
	SPI_MasterTransmit(COLADRL+0);
	active_col=-1;
		//LCD_SetPageAddress(adrPage);
		//LCD_SetColumnAddress(0);
		DOGDATA;
    13aa:	2a 9a       	sbi	0x05, 2	; 5
    13ac:	86 01       	movw	r16, r12
    13ae:	0e 0d       	add	r16, r14
    13b0:	1f 1d       	adc	r17, r15
    13b2:	4f ef       	ldi	r20, 0xFF	; 255
    13b4:	5f ef       	ldi	r21, 0xFF	; 255
    13b6:	c0 e0       	ldi	r28, 0x00	; 0
    13b8:	d0 e0       	ldi	r29, 0x00	; 0
    13ba:	ce 01       	movw	r24, r28
    13bc:	8e 0d       	add	r24, r14
    13be:	9f 1d       	adc	r25, r15
      	{	//LCD_RAM[adrPage*128+adrLaw]|=0x00;
			
	//LCD_changed_RAM[((y/8)*128+x)/8]|=1<<(((y/8)*128+x)%8);
			//unsigned char pos=adrPage*128+adrLaw;
			//if (LCD_changed_RAM[((adrPage)*128+adrLaw)/8]){//pixel have changed
      		if (me->LCD_changed_RAM[((adrPage)*128+adrLaw)/8]&(1<<(7-((adrPage)*128+adrLaw)%8))){//pixel have changed
    13c0:	4c 01       	movw	r8, r24
    13c2:	23 e0       	ldi	r18, 0x03	; 3
    13c4:	95 94       	asr	r9
    13c6:	87 94       	ror	r8
    13c8:	2a 95       	dec	r18
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <pushRAM+0x72>
    13cc:	87 70       	andi	r24, 0x07	; 7
    13ce:	90 70       	andi	r25, 0x00	; 0
    13d0:	51 01       	movw	r10, r2
    13d2:	a8 1a       	sub	r10, r24
    13d4:	b9 0a       	sbc	r11, r25
    13d6:	f6 01       	movw	r30, r12
    13d8:	e8 0d       	add	r30, r8
    13da:	f9 1d       	adc	r31, r9
    13dc:	e0 50       	subi	r30, 0x00	; 0
    13de:	fc 4f       	sbci	r31, 0xFC	; 252
    13e0:	80 81       	ld	r24, Z
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0a 2c       	mov	r0, r10
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <pushRAM+0x9a>
    13e8:	95 95       	asr	r25
    13ea:	87 95       	ror	r24
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <pushRAM+0x96>
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	1f c0       	rjmp	.+62     	; 0x1432 <pushRAM+0xe0>
				
				if (active_col!=adrLaw){
    13f4:	4c 17       	cp	r20, r28
    13f6:	5d 07       	cpc	r21, r29
    13f8:	29 f0       	breq	.+10     	; 0x1404 <pushRAM+0xb2>
				LCD_setColumn(adrLaw);
    13fa:	8c 2f       	mov	r24, r28
    13fc:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
				active_col=adrLaw;
				DOGDATA;
    1400:	2a 9a       	sbi	0x05, 2	; 5
    1402:	ae 01       	movw	r20, r28
				}
				active_col++;
				
				//SPI_MasterTransmit(~me->LCD_RAM[adrPage*128+adrLaw]);
				
				SPI_MasterTransmit(me->LCD_RAM[adrPage*128+adrLaw]);
    1404:	f8 01       	movw	r30, r16
    1406:	80 81       	ld	r24, Z
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1408:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    140a:	0d b4       	in	r0, 0x2d	; 45
    140c:	07 fe       	sbrs	r0, 7
    140e:	fd cf       	rjmp	.-6      	; 0x140a <pushRAM+0xb8>
				if (active_col!=adrLaw){
				LCD_setColumn(adrLaw);
				active_col=adrLaw;
				DOGDATA;
				}
				active_col++;
    1410:	4f 5f       	subi	r20, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
				
				//SPI_MasterTransmit(~me->LCD_RAM[adrPage*128+adrLaw]);
				
				SPI_MasterTransmit(me->LCD_RAM[adrPage*128+adrLaw]);
				
				me->LCD_changed_RAM[((adrPage)*128+adrLaw)/8]&=~(1<<(7-((adrPage)*128+adrLaw)%8));
    1414:	f6 01       	movw	r30, r12
    1416:	e8 0d       	add	r30, r8
    1418:	f9 1d       	adc	r31, r9
    141a:	e0 50       	subi	r30, 0x00	; 0
    141c:	fc 4f       	sbci	r31, 0xFC	; 252
    141e:	c2 01       	movw	r24, r4
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <pushRAM+0xd4>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	aa 94       	dec	r10
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <pushRAM+0xd0>
    142a:	80 95       	com	r24
    142c:	20 81       	ld	r18, Z
    142e:	82 23       	and	r24, r18
    1430:	80 83       	st	Z, r24
	SPI_MasterTransmit(COLADRL+0);
	active_col=-1;
		//LCD_SetPageAddress(adrPage);
		//LCD_SetColumnAddress(0);
		DOGDATA;
      	for(int adrLaw = 0; adrLaw < 128; adrLaw++)
    1432:	21 96       	adiw	r28, 0x01	; 1
    1434:	0f 5f       	subi	r16, 0xFF	; 255
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	c0 38       	cpi	r28, 0x80	; 128
    143a:	d1 05       	cpc	r29, r1
    143c:	09 f0       	breq	.+2      	; 0x1440 <pushRAM+0xee>
    143e:	bd cf       	rjmp	.-134    	; 0x13ba <pushRAM+0x68>
    1440:	73 94       	inc	r7
    1442:	80 e8       	ldi	r24, 0x80	; 128
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	e8 0e       	add	r14, r24
    1448:	f9 1e       	adc	r15, r25

}

void pushRAM(LCD_engine * me){
int active_col=0;
for(int adrPage = 0; adrPage < 8; adrPage++)
    144a:	98 eb       	ldi	r25, 0xB8	; 184
    144c:	79 16       	cp	r7, r25
    144e:	09 f0       	breq	.+2      	; 0x1452 <pushRAM+0x100>
    1450:	9f cf       	rjmp	.-194    	; 0x1390 <pushRAM+0x3e>
				//_delay_ms(200);
      		}
			
		}
   	}
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	8f 90       	pop	r8
    146a:	7f 90       	pop	r7
    146c:	6f 90       	pop	r6
    146e:	5f 90       	pop	r5
    1470:	4f 90       	pop	r4
    1472:	3f 90       	pop	r3
    1474:	2f 90       	pop	r2
    1476:	08 95       	ret

00001478 <LCD_drawPixel>:


}

//void LCD_drawPixel(LCD_engine * me,unsigned char x,unsigned char y){
void LCD_drawPixel(LCD_engine * me,int x,int y){
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	8c 01       	movw	r16, r24
    1486:	7b 01       	movw	r14, r22
if (x>127 || y>63 || x<0 || y<0){
    1488:	60 38       	cpi	r22, 0x80	; 128
    148a:	71 05       	cpc	r23, r1
    148c:	0c f0       	brlt	.+2      	; 0x1490 <LCD_drawPixel+0x18>
    148e:	ba c0       	rjmp	.+372    	; 0x1604 <LCD_drawPixel+0x18c>
    1490:	40 34       	cpi	r20, 0x40	; 64
    1492:	51 05       	cpc	r21, r1
    1494:	0c f0       	brlt	.+2      	; 0x1498 <LCD_drawPixel+0x20>
    1496:	b6 c0       	rjmp	.+364    	; 0x1604 <LCD_drawPixel+0x18c>
    1498:	77 fd       	sbrc	r23, 7
    149a:	b4 c0       	rjmp	.+360    	; 0x1604 <LCD_drawPixel+0x18c>
    149c:	57 fd       	sbrc	r21, 7
    149e:	b2 c0       	rjmp	.+356    	; 0x1604 <LCD_drawPixel+0x18c>
	return;
}


if (me->SETPIXEL== SET_PIXELS){//set pixel
    14a0:	0f 57       	subi	r16, 0x7F	; 127
    14a2:	1b 4f       	sbci	r17, 0xFB	; 251
    14a4:	f8 01       	movw	r30, r16
    14a6:	80 81       	ld	r24, Z
    14a8:	01 58       	subi	r16, 0x81	; 129
    14aa:	14 40       	sbci	r17, 0x04	; 4
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	d9 f4       	brne	.+54     	; 0x14e6 <LCD_drawPixel+0x6e>
me->LCD_RAM[(y/8)*128+x]|=1<<(y%8); //Set
    14b0:	fa 01       	movw	r30, r20
    14b2:	a3 e0       	ldi	r26, 0x03	; 3
    14b4:	f5 95       	asr	r31
    14b6:	e7 95       	ror	r30
    14b8:	aa 95       	dec	r26
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <LCD_drawPixel+0x3c>
    14bc:	f6 95       	lsr	r31
    14be:	fe 2f       	mov	r31, r30
    14c0:	ee 27       	eor	r30, r30
    14c2:	f7 95       	ror	r31
    14c4:	e7 95       	ror	r30
    14c6:	ee 0d       	add	r30, r14
    14c8:	ff 1d       	adc	r31, r15
    14ca:	e0 0f       	add	r30, r16
    14cc:	f1 1f       	adc	r31, r17
    14ce:	9a 01       	movw	r18, r20
    14d0:	27 70       	andi	r18, 0x07	; 7
    14d2:	30 70       	andi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <LCD_drawPixel+0x66>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	2a 95       	dec	r18
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <LCD_drawPixel+0x62>
    14e2:	20 81       	ld	r18, Z
    14e4:	45 c0       	rjmp	.+138    	; 0x1570 <LCD_drawPixel+0xf8>
    14e6:	ea 01       	movw	r28, r20
    14e8:	63 e0       	ldi	r22, 0x03	; 3
    14ea:	d5 95       	asr	r29
    14ec:	c7 95       	ror	r28
    14ee:	6a 95       	dec	r22
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <LCD_drawPixel+0x72>
    14f2:	ba 01       	movw	r22, r20
    14f4:	67 70       	andi	r22, 0x07	; 7
    14f6:	70 70       	andi	r23, 0x00	; 0
} else if (me->SETPIXEL== CLEAR_PIXELS){//clear pixel
    14f8:	88 23       	and	r24, r24
    14fa:	a1 f4       	brne	.+40     	; 0x1524 <LCD_drawPixel+0xac>
me->LCD_RAM[(y/8)*128+x]&=~(1<<(y%8)); //Clear
    14fc:	fe 01       	movw	r30, r28
    14fe:	f6 95       	lsr	r31
    1500:	fe 2f       	mov	r31, r30
    1502:	ee 27       	eor	r30, r30
    1504:	f7 95       	ror	r31
    1506:	e7 95       	ror	r30
    1508:	ee 0d       	add	r30, r14
    150a:	ff 1d       	adc	r31, r15
    150c:	e0 0f       	add	r30, r16
    150e:	f1 1f       	adc	r31, r17
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <LCD_drawPixel+0xa2>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	6a 95       	dec	r22
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <LCD_drawPixel+0x9e>
    151e:	80 95       	com	r24
    1520:	20 81       	ld	r18, Z
    1522:	1d c0       	rjmp	.+58     	; 0x155e <LCD_drawPixel+0xe6>
}else {//INVERT_PIXELS allways go to this when out of range, for debugging

if (me->LCD_RAM[(y/8)*128+x]&(1<<(y%8))){//is it set?
    1524:	fe 01       	movw	r30, r28
    1526:	f6 95       	lsr	r31
    1528:	fe 2f       	mov	r31, r30
    152a:	ee 27       	eor	r30, r30
    152c:	f7 95       	ror	r31
    152e:	e7 95       	ror	r30
    1530:	ee 0d       	add	r30, r14
    1532:	ff 1d       	adc	r31, r15
    1534:	e0 0f       	add	r30, r16
    1536:	f1 1f       	adc	r31, r17
    1538:	20 81       	ld	r18, Z
    153a:	82 2f       	mov	r24, r18
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	06 2e       	mov	r0, r22
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <LCD_drawPixel+0xce>
    1542:	95 95       	asr	r25
    1544:	87 95       	ror	r24
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <LCD_drawPixel+0xca>
    154a:	80 ff       	sbrs	r24, 0
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <LCD_drawPixel+0xea>

me->LCD_RAM[(y/8)*128+x]&=~(1<<(y%8)); //Clear
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <LCD_drawPixel+0xe0>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	6a 95       	dec	r22
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <LCD_drawPixel+0xdc>
    155c:	80 95       	com	r24
    155e:	28 23       	and	r18, r24
    1560:	08 c0       	rjmp	.+16     	; 0x1572 <LCD_drawPixel+0xfa>
}else {
me->LCD_RAM[(y/8)*128+x]|=1<<(y%8); //Set
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <LCD_drawPixel+0xf4>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	6a 95       	dec	r22
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <LCD_drawPixel+0xf0>
    1570:	28 2b       	or	r18, r24
    1572:	20 83       	st	Z, r18
}


}

if (me->DUBBELBUFFER){
    1574:	0e 57       	subi	r16, 0x7E	; 126
    1576:	1b 4f       	sbci	r17, 0xFB	; 251
    1578:	f8 01       	movw	r30, r16
    157a:	80 81       	ld	r24, Z
    157c:	02 58       	subi	r16, 0x82	; 130
    157e:	14 40       	sbci	r17, 0x04	; 4
    1580:	ea 01       	movw	r28, r20
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	d5 95       	asr	r29
    1586:	c7 95       	ror	r28
    1588:	9a 95       	dec	r25
    158a:	e1 f7       	brne	.-8      	; 0x1584 <LCD_drawPixel+0x10c>
    158c:	88 23       	and	r24, r24
    158e:	09 f1       	breq	.+66     	; 0x15d2 <LCD_drawPixel+0x15a>
//LCD_changed_RAM[((y/8)*128+x)/8]|=1<<(((y/8)*128+x)%8);
//LCD_changed_RAM[((y/8)*128+x)/8]=0xFF;
//unsigned char pos=(y/8)*128+x;
//LCD_changed_RAM[pos/8]|=1<<(pos%8);
me->LCD_changed_RAM[((y/8)*128+x)/8]|=1<<(7-((y/8)*128+x)%8);
    1590:	ce 01       	movw	r24, r28
    1592:	96 95       	lsr	r25
    1594:	98 2f       	mov	r25, r24
    1596:	88 27       	eor	r24, r24
    1598:	97 95       	ror	r25
    159a:	87 95       	ror	r24
    159c:	8e 0d       	add	r24, r14
    159e:	9f 1d       	adc	r25, r15
    15a0:	fc 01       	movw	r30, r24
    15a2:	a3 e0       	ldi	r26, 0x03	; 3
    15a4:	f5 95       	asr	r31
    15a6:	e7 95       	ror	r30
    15a8:	aa 95       	dec	r26
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <LCD_drawPixel+0x12c>
    15ac:	e0 0f       	add	r30, r16
    15ae:	f1 1f       	adc	r31, r17
    15b0:	e0 50       	subi	r30, 0x00	; 0
    15b2:	fc 4f       	sbci	r31, 0xFC	; 252
    15b4:	80 95       	com	r24
    15b6:	90 95       	com	r25
    15b8:	87 70       	andi	r24, 0x07	; 7
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <LCD_drawPixel+0x14e>
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <LCD_drawPixel+0x14a>
    15ca:	80 81       	ld	r24, Z
    15cc:	82 2b       	or	r24, r18
    15ce:	80 83       	st	Z, r24
    15d0:	19 c0       	rjmp	.+50     	; 0x1604 <LCD_drawPixel+0x18c>
return;
}
LCD_setColumn(x);
    15d2:	8e 2d       	mov	r24, r14
    15d4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
   	}
	 DOGDISABLE;
} 
void resetConnection(){DOGENABLE;}
void LCD_setPage(unsigned char page){
DOGCOMMAND;
    15d8:	2a 98       	cbi	0x05, 2	; 5
SPI_MasterTransmit(PAGEADR+page);
    15da:	9e 01       	movw	r18, r28
    15dc:	20 55       	subi	r18, 0x50	; 80
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    15de:	2e bd       	out	0x2e, r18	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    15e0:	0d b4       	in	r0, 0x2d	; 45
    15e2:	07 fe       	sbrs	r0, 7
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <LCD_drawPixel+0x168>
me->LCD_changed_RAM[((y/8)*128+x)/8]|=1<<(7-((y/8)*128+x)%8);
return;
}
LCD_setColumn(x);
LCD_setPage(y/8);
DOGDATA;
    15e6:	2a 9a       	sbi	0x05, 2	; 5
SPI_MasterTransmit(me->LCD_RAM[(y/8)*128+x]);
    15e8:	d6 95       	lsr	r29
    15ea:	dc 2f       	mov	r29, r28
    15ec:	cc 27       	eor	r28, r28
    15ee:	d7 95       	ror	r29
    15f0:	c7 95       	ror	r28
    15f2:	ce 0d       	add	r28, r14
    15f4:	df 1d       	adc	r29, r15
    15f6:	c0 0f       	add	r28, r16
    15f8:	d1 1f       	adc	r29, r17
    15fa:	88 81       	ld	r24, Y
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    15fc:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    15fe:	0d b4       	in	r0, 0x2d	; 45
    1600:	07 fe       	sbrs	r0, 7
    1602:	fd cf       	rjmp	.-6      	; 0x15fe <LCD_drawPixel+0x186>
}
LCD_setColumn(x);
LCD_setPage(y/8);
DOGDATA;
SPI_MasterTransmit(me->LCD_RAM[(y/8)*128+x]);
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	08 95       	ret

00001612 <drawCircle>:

  }
}

void drawCircle(LCD_engine * me,int x0, int y0, int radius)
{
    1612:	2f 92       	push	r2
    1614:	3f 92       	push	r3
    1616:	4f 92       	push	r4
    1618:	5f 92       	push	r5
    161a:	6f 92       	push	r6
    161c:	7f 92       	push	r7
    161e:	8f 92       	push	r8
    1620:	9f 92       	push	r9
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <drawCircle+0x26>
    1638:	00 d0       	rcall	.+0      	; 0x163a <drawCircle+0x28>
    163a:	00 d0       	rcall	.+0      	; 0x163c <drawCircle+0x2a>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	2b 01       	movw	r4, r22
    1646:	3a 01       	movw	r6, r20
    1648:	89 01       	movw	r16, r18

//http://en.wikipedia.org/wiki/Midpoint_circle_algorithm
  int f = 1 - radius;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	28 2e       	mov	r2, r24
    164e:	31 2c       	mov	r3, r1
    1650:	22 1a       	sub	r2, r18
    1652:	33 0a       	sbc	r3, r19
  int ddF_x = 1;
  int ddF_y = -2 * radius;
    1654:	c9 01       	movw	r24, r18
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	22 27       	eor	r18, r18
    165c:	33 27       	eor	r19, r19
    165e:	28 1b       	sub	r18, r24
    1660:	39 0b       	sbc	r19, r25
    1662:	3a 83       	std	Y+2, r19	; 0x02
    1664:	29 83       	std	Y+1, r18	; 0x01
  int x = 0;
  int y = radius;
 
  LCD_drawPixel(me,x0, y0 + radius);
    1666:	a8 01       	movw	r20, r16
    1668:	46 0d       	add	r20, r6
    166a:	57 1d       	adc	r21, r7
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
  LCD_drawPixel(me,x0, y0 - radius);
    1674:	a3 01       	movw	r20, r6
    1676:	40 1b       	sub	r20, r16
    1678:	51 0b       	sbc	r21, r17
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	b2 01       	movw	r22, r4
    1680:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
  LCD_drawPixel(me,x0 + radius, y0);
    1684:	b8 01       	movw	r22, r16
    1686:	64 0d       	add	r22, r4
    1688:	75 1d       	adc	r23, r5
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	a3 01       	movw	r20, r6
    1690:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
  LCD_drawPixel(me,x0 - radius, y0);
    1694:	b2 01       	movw	r22, r4
    1696:	60 1b       	sub	r22, r16
    1698:	71 0b       	sbc	r23, r17
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	a3 01       	movw	r20, r6
    16a0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    16a4:	48 01       	movw	r8, r16
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	aa 24       	eor	r10, r10
    16b0:	bb 24       	eor	r11, r11
    16b2:	5f c0       	rjmp	.+190    	; 0x1772 <drawCircle+0x160>
  while(x < y)
  {
    // ddF_x == 2 * x + 1;
    // ddF_y == -2 * y;
    // f == x*x + y*y - radius*radius + 2*x - y + 1;
    if(f >= 0) 
    16b4:	37 fc       	sbrc	r3, 7
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <drawCircle+0xba>
    {
      y--;
    16b8:	08 94       	sec
    16ba:	81 08       	sbc	r8, r1
    16bc:	91 08       	sbc	r9, r1
      ddF_y += 2;
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	32 96       	adiw	r30, 0x02	; 2
    16c4:	fa 83       	std	Y+2, r31	; 0x02
    16c6:	e9 83       	std	Y+1, r30	; 0x01
      f += ddF_y;
    16c8:	2e 0e       	add	r2, r30
    16ca:	3f 1e       	adc	r3, r31
    }
    x++;
    16cc:	08 94       	sec
    16ce:	a1 1c       	adc	r10, r1
    16d0:	b1 1c       	adc	r11, r1
    ddF_x += 2;
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	2e 5f       	subi	r18, 0xFE	; 254
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	3c 83       	std	Y+4, r19	; 0x04
    16dc:	2b 83       	std	Y+3, r18	; 0x03
    f += ddF_x;    
    16de:	22 0e       	add	r2, r18
    16e0:	33 1e       	adc	r3, r19

  }
}

void drawCircle(LCD_engine * me,int x0, int y0, int radius)
{
    16e2:	65 01       	movw	r12, r10
    16e4:	c4 0c       	add	r12, r4
    16e6:	d5 1c       	adc	r13, r5
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;    
    LCD_drawPixel(me,x0 + x, y0 + y);
    16e8:	84 01       	movw	r16, r8
    16ea:	06 0d       	add	r16, r6
    16ec:	17 1d       	adc	r17, r7
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	b6 01       	movw	r22, r12
    16f4:	a8 01       	movw	r20, r16
    16f6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    16fa:	72 01       	movw	r14, r4
    16fc:	ea 18       	sub	r14, r10
    16fe:	fb 08       	sbc	r15, r11
    LCD_drawPixel(me,x0 - x, y0 + y);
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	b7 01       	movw	r22, r14
    1706:	a8 01       	movw	r20, r16
    1708:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    LCD_drawPixel(me,x0 + x, y0 - y);
    170c:	83 01       	movw	r16, r6
    170e:	08 19       	sub	r16, r8
    1710:	19 09       	sbc	r17, r9
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	b6 01       	movw	r22, r12
    1718:	a8 01       	movw	r20, r16
    171a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    LCD_drawPixel(me,x0 - x, y0 - y);
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	b7 01       	movw	r22, r14
    1724:	a8 01       	movw	r20, r16
    1726:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    LCD_drawPixel(me,x0 + y, y0 + x);
    172a:	64 01       	movw	r12, r8
    172c:	c4 0c       	add	r12, r4
    172e:	d5 1c       	adc	r13, r5

  }
}

void drawCircle(LCD_engine * me,int x0, int y0, int radius)
{
    1730:	85 01       	movw	r16, r10
    1732:	06 0d       	add	r16, r6
    1734:	17 1d       	adc	r17, r7
    f += ddF_x;    
    LCD_drawPixel(me,x0 + x, y0 + y);
    LCD_drawPixel(me,x0 - x, y0 + y);
    LCD_drawPixel(me,x0 + x, y0 - y);
    LCD_drawPixel(me,x0 - x, y0 - y);
    LCD_drawPixel(me,x0 + y, y0 + x);
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	b6 01       	movw	r22, r12
    173c:	a8 01       	movw	r20, r16
    173e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    LCD_drawPixel(me,x0 - y, y0 + x);
    1742:	72 01       	movw	r14, r4
    1744:	e8 18       	sub	r14, r8
    1746:	f9 08       	sbc	r15, r9
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	b7 01       	movw	r22, r14
    174e:	a8 01       	movw	r20, r16
    1750:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    1754:	83 01       	movw	r16, r6
    1756:	0a 19       	sub	r16, r10
    1758:	1b 09       	sbc	r17, r11
    LCD_drawPixel(me,x0 + y, y0 - x);
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	b6 01       	movw	r22, r12
    1760:	a8 01       	movw	r20, r16
    1762:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
    LCD_drawPixel(me,x0 - y, y0 - x);
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	b7 01       	movw	r22, r14
    176c:	a8 01       	movw	r20, r16
    176e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
  LCD_drawPixel(me,x0, y0 + radius);
  LCD_drawPixel(me,x0, y0 - radius);
  LCD_drawPixel(me,x0 + radius, y0);
  LCD_drawPixel(me,x0 - radius, y0);
 
  while(x < y)
    1772:	a8 14       	cp	r10, r8
    1774:	b9 04       	cpc	r11, r9
    1776:	0c f4       	brge	.+2      	; 0x177a <drawCircle+0x168>
    1778:	9d cf       	rjmp	.-198    	; 0x16b4 <drawCircle+0xa2>
    LCD_drawPixel(me,x0 + y, y0 + x);
    LCD_drawPixel(me,x0 - y, y0 + x);
    LCD_drawPixel(me,x0 + y, y0 - x);
    LCD_drawPixel(me,x0 - y, y0 - x);
  }
}
    177a:	26 96       	adiw	r28, 0x06	; 6
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	7f 90       	pop	r7
    17a0:	6f 90       	pop	r6
    17a2:	5f 90       	pop	r5
    17a4:	4f 90       	pop	r4
    17a6:	3f 90       	pop	r3
    17a8:	2f 90       	pop	r2
    17aa:	08 95       	ret

000017ac <LCD_drawLine>:
			
		}
   	}
}

void LCD_drawLine(LCD_engine * me,int x0,int y0,int x1,int y1){
    17ac:	2f 92       	push	r2
    17ae:	3f 92       	push	r3
    17b0:	4f 92       	push	r4
    17b2:	5f 92       	push	r5
    17b4:	6f 92       	push	r6
    17b6:	7f 92       	push	r7
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	af 92       	push	r10
    17be:	bf 92       	push	r11
    17c0:	cf 92       	push	r12
    17c2:	df 92       	push	r13
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <LCD_drawLine+0x26>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <LCD_drawLine+0x28>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6b 01       	movw	r12, r22
    17de:	fa 01       	movw	r30, r20
    17e0:	59 01       	movw	r10, r18
//http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm

	int steep=abs(y1 - y0) > abs(x1 - x0);
    17e2:	22 24       	eor	r2, r2
    17e4:	33 24       	eor	r3, r3
    17e6:	98 01       	movw	r18, r16
    17e8:	24 1b       	sub	r18, r20
    17ea:	35 0b       	sbc	r19, r21
    17ec:	37 ff       	sbrs	r19, 7
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <LCD_drawLine+0x4a>
    17f0:	30 95       	com	r19
    17f2:	21 95       	neg	r18
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	c5 01       	movw	r24, r10
    17f8:	8c 19       	sub	r24, r12
    17fa:	9d 09       	sbc	r25, r13
    17fc:	97 ff       	sbrs	r25, 7
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <LCD_drawLine+0x5a>
    1800:	90 95       	com	r25
    1802:	81 95       	neg	r24
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	82 17       	cp	r24, r18
    1808:	93 07       	cpc	r25, r19
    180a:	4c f4       	brge	.+18     	; 0x181e <LCD_drawLine+0x72>
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	22 2e       	mov	r2, r18
    1810:	31 2c       	mov	r3, r1
    if (steep){
    1812:	cf 01       	movw	r24, r30
    1814:	f6 01       	movw	r30, r12
    1816:	6c 01       	movw	r12, r24
    1818:	c8 01       	movw	r24, r16
    181a:	85 01       	movw	r16, r10
    181c:	5c 01       	movw	r10, r24
         swaap(&x0, &y0);
         swaap(&x1, &y1);	 
	}
    if (x0 > x1){
    181e:	ac 14       	cp	r10, r12
    1820:	bd 04       	cpc	r11, r13
    1822:	34 f4       	brge	.+12     	; 0x1830 <LCD_drawLine+0x84>
    1824:	c5 01       	movw	r24, r10
    1826:	56 01       	movw	r10, r12
    1828:	6c 01       	movw	r12, r24
    182a:	c8 01       	movw	r24, r16
    182c:	8f 01       	movw	r16, r30
    182e:	fc 01       	movw	r30, r24
           swaap(&x0, &x1);
           swaap(&y0, &y1);
	}
     int deltax = x1 - x0;
    1830:	25 01       	movw	r4, r10
    1832:	4c 18       	sub	r4, r12
    1834:	5d 08       	sbc	r5, r13
     int deltay = abs(y1 - y0);
    1836:	48 01       	movw	r8, r16
    1838:	8e 1a       	sub	r8, r30
    183a:	9f 0a       	sbc	r9, r31
    183c:	97 fe       	sbrs	r9, 7
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <LCD_drawLine+0x9c>
    1840:	90 94       	com	r9
    1842:	81 94       	neg	r8
    1844:	91 08       	sbc	r9, r1
    1846:	93 94       	inc	r9
     int error = deltax / 2;
     int ystep;
     int y = y0;
     if (y0 < y1){ystep = 1;} else {ystep = -1;}
    1848:	e0 17       	cp	r30, r16
    184a:	f1 07       	cpc	r31, r17
    184c:	24 f0       	brlt	.+8      	; 0x1856 <LCD_drawLine+0xaa>
    184e:	66 24       	eor	r6, r6
    1850:	6a 94       	dec	r6
    1852:	76 2c       	mov	r7, r6
    1854:	03 c0       	rjmp	.+6      	; 0x185c <LCD_drawLine+0xb0>
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	69 2e       	mov	r6, r25
    185a:	71 2c       	mov	r7, r1
           swaap(&x0, &x1);
           swaap(&y0, &y1);
	}
     int deltax = x1 - x0;
     int deltay = abs(y1 - y0);
     int error = deltax / 2;
    185c:	c2 01       	movw	r24, r4
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    1866:	7c 83       	std	Y+4, r23	; 0x04
    1868:	6b 83       	std	Y+3, r22	; 0x03
    186a:	7f 01       	movw	r14, r30
    186c:	86 01       	movw	r16, r12
    186e:	1e c0       	rjmp	.+60     	; 0x18ac <LCD_drawLine+0x100>
     int ystep;
     int y = y0;
     if (y0 < y1){ystep = 1;} else {ystep = -1;}
     for (int x = x0 ; x<=x1;x++){
         if (steep){ LCD_drawPixel(me,y,x);} else {LCD_drawPixel(me,x,y);}
    1870:	21 14       	cp	r2, r1
    1872:	31 04       	cpc	r3, r1
    1874:	29 f0       	breq	.+10     	; 0x1880 <LCD_drawLine+0xd4>
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	b7 01       	movw	r22, r14
    187c:	a8 01       	movw	r20, r16
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <LCD_drawLine+0xdc>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	b8 01       	movw	r22, r16
    1886:	a7 01       	movw	r20, r14
    1888:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
         error = error - deltay;
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	88 19       	sub	r24, r8
    1892:	99 09       	sbc	r25, r9
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
         if (error < 0){
    1898:	97 ff       	sbrs	r25, 7
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <LCD_drawLine+0xfc>
             y = y + ystep;
    189c:	e6 0c       	add	r14, r6
    189e:	f7 1c       	adc	r15, r7
             error = error + deltax;
    18a0:	84 0d       	add	r24, r4
    18a2:	95 1d       	adc	r25, r5
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
     int deltay = abs(y1 - y0);
     int error = deltax / 2;
     int ystep;
     int y = y0;
     if (y0 < y1){ystep = 1;} else {ystep = -1;}
     for (int x = x0 ; x<=x1;x++){
    18a8:	0f 5f       	subi	r16, 0xFF	; 255
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	a0 16       	cp	r10, r16
    18ae:	b1 06       	cpc	r11, r17
    18b0:	fc f6       	brge	.-66     	; 0x1870 <LCD_drawLine+0xc4>
             error = error + deltax;
		}
	}


}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	9f 90       	pop	r9
    18d0:	8f 90       	pop	r8
    18d2:	7f 90       	pop	r7
    18d4:	6f 90       	pop	r6
    18d6:	5f 90       	pop	r5
    18d8:	4f 90       	pop	r4
    18da:	3f 90       	pop	r3
    18dc:	2f 90       	pop	r2
    18de:	08 95       	ret

000018e0 <fillCircle>:
LCD_drawLine(me,x+w,y,x+w,y+h);
}


void fillCircle(LCD_engine * me,int x0, int y0, int radius)
{
    18e0:	2f 92       	push	r2
    18e2:	3f 92       	push	r3
    18e4:	4f 92       	push	r4
    18e6:	5f 92       	push	r5
    18e8:	6f 92       	push	r6
    18ea:	7f 92       	push	r7
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <fillCircle+0x26>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <fillCircle+0x28>
    1908:	00 d0       	rcall	.+0      	; 0x190a <fillCircle+0x2a>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	1c 01       	movw	r2, r24
    1910:	3b 01       	movw	r6, r22
    1912:	4a 01       	movw	r8, r20
    1914:	79 01       	movw	r14, r18

//http://en.wikipedia.org/wiki/Midpoint_circle_algorithm
  int f = 1 - radius;
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	44 2e       	mov	r4, r20
    191a:	51 2c       	mov	r5, r1
    191c:	42 1a       	sub	r4, r18
    191e:	53 0a       	sbc	r5, r19
  int ddF_x = 1;
  int ddF_y = -2 * radius;
    1920:	c9 01       	movw	r24, r18
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	22 27       	eor	r18, r18
    1928:	33 27       	eor	r19, r19
    192a:	28 1b       	sub	r18, r24
    192c:	39 0b       	sbc	r19, r25
    192e:	3a 83       	std	Y+2, r19	; 0x02
    1930:	29 83       	std	Y+1, r18	; 0x01
  int x = 0;
  int y = radius;
 
  LCD_drawLine(me,x0, y0 + radius,x0, y0 - radius);
    1932:	a7 01       	movw	r20, r14
    1934:	48 0d       	add	r20, r8
    1936:	59 1d       	adc	r21, r9
    1938:	84 01       	movw	r16, r8
    193a:	0e 19       	sub	r16, r14
    193c:	1f 09       	sbc	r17, r15
    193e:	c1 01       	movw	r24, r2
    1940:	93 01       	movw	r18, r6
    1942:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
  LCD_drawLine(me,x0 + radius, y0,x0 - radius, y0);
    1946:	b7 01       	movw	r22, r14
    1948:	66 0d       	add	r22, r6
    194a:	77 1d       	adc	r23, r7
    194c:	93 01       	movw	r18, r6
    194e:	2e 19       	sub	r18, r14
    1950:	3f 09       	sbc	r19, r15
    1952:	c1 01       	movw	r24, r2
    1954:	a4 01       	movw	r20, r8
    1956:	84 01       	movw	r16, r8
    1958:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    195c:	57 01       	movw	r10, r14
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	1e 82       	std	Y+6, r1	; 0x06
    1968:	1d 82       	std	Y+5, r1	; 0x05
    196a:	4c c0       	rjmp	.+152    	; 0x1a04 <fillCircle+0x124>
  while(x < y)
  {
    // ddF_x == 2 * x + 1;
    // ddF_y == -2 * y;
    // f == x*x + y*y - radius*radius + 2*x - y + 1;
    if(f >= 0) 
    196c:	57 fc       	sbrc	r5, 7
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <fillCircle+0xa4>
    {
      y--;
    1970:	08 94       	sec
    1972:	a1 08       	sbc	r10, r1
    1974:	b1 08       	sbc	r11, r1
      ddF_y += 2;
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	32 96       	adiw	r30, 0x02	; 2
    197c:	fa 83       	std	Y+2, r31	; 0x02
    197e:	e9 83       	std	Y+1, r30	; 0x01
      f += ddF_y;
    1980:	4e 0e       	add	r4, r30
    1982:	5f 1e       	adc	r5, r31
    }
    x++;
    1984:	2d 81       	ldd	r18, Y+5	; 0x05
    1986:	3e 81       	ldd	r19, Y+6	; 0x06
    1988:	2f 5f       	subi	r18, 0xFF	; 255
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	3e 83       	std	Y+6, r19	; 0x06
    198e:	2d 83       	std	Y+5, r18	; 0x05
    ddF_x += 2;
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	02 96       	adiw	r24, 0x02	; 2
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    f += ddF_x;    
    199a:	48 0e       	add	r4, r24
    199c:	59 1e       	adc	r5, r25
LCD_drawLine(me,x+w,y,x+w,y+h);
}


void fillCircle(LCD_engine * me,int x0, int y0, int radius)
{
    199e:	79 01       	movw	r14, r18
    19a0:	e6 0c       	add	r14, r6
    19a2:	f7 1c       	adc	r15, r7
    19a4:	63 01       	movw	r12, r6
    19a6:	c2 1a       	sub	r12, r18
    19a8:	d3 0a       	sbc	r13, r19
    }
    x++;
    ddF_x += 2;
    f += ddF_x;    

	LCD_drawLine(me,x0 + x, y0 + y,x0 - x, y0 + y);
    19aa:	85 01       	movw	r16, r10
    19ac:	08 0d       	add	r16, r8
    19ae:	19 1d       	adc	r17, r9
    19b0:	c1 01       	movw	r24, r2
    19b2:	b7 01       	movw	r22, r14
    19b4:	a8 01       	movw	r20, r16
    19b6:	96 01       	movw	r18, r12
    19b8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	LCD_drawLine(me,x0 + x, y0 - y,x0 - x, y0 - y);
    19bc:	84 01       	movw	r16, r8
    19be:	0a 19       	sub	r16, r10
    19c0:	1b 09       	sbc	r17, r11
    19c2:	c1 01       	movw	r24, r2
    19c4:	b7 01       	movw	r22, r14
    19c6:	a8 01       	movw	r20, r16
    19c8:	96 01       	movw	r18, r12
    19ca:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	LCD_drawLine(me,x0 + y, y0 + x,x0 - y, y0 + x);
    19ce:	75 01       	movw	r14, r10
    19d0:	e6 0c       	add	r14, r6
    19d2:	f7 1c       	adc	r15, r7
    19d4:	63 01       	movw	r12, r6
    19d6:	ca 18       	sub	r12, r10
    19d8:	db 08       	sbc	r13, r11
LCD_drawLine(me,x+w,y,x+w,y+h);
}


void fillCircle(LCD_engine * me,int x0, int y0, int radius)
{
    19da:	0d 81       	ldd	r16, Y+5	; 0x05
    19dc:	1e 81       	ldd	r17, Y+6	; 0x06
    19de:	08 0d       	add	r16, r8
    19e0:	19 1d       	adc	r17, r9
    ddF_x += 2;
    f += ddF_x;    

	LCD_drawLine(me,x0 + x, y0 + y,x0 - x, y0 + y);
	LCD_drawLine(me,x0 + x, y0 - y,x0 - x, y0 - y);
	LCD_drawLine(me,x0 + y, y0 + x,x0 - y, y0 + x);
    19e2:	c1 01       	movw	r24, r2
    19e4:	b7 01       	movw	r22, r14
    19e6:	a8 01       	movw	r20, r16
    19e8:	96 01       	movw	r18, r12
    19ea:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    19ee:	84 01       	movw	r16, r8
    19f0:	ed 81       	ldd	r30, Y+5	; 0x05
    19f2:	fe 81       	ldd	r31, Y+6	; 0x06
    19f4:	0e 1b       	sub	r16, r30
    19f6:	1f 0b       	sbc	r17, r31
	LCD_drawLine(me,x0 + y, y0 - x,x0 - y, y0 - x);
    19f8:	c1 01       	movw	r24, r2
    19fa:	b7 01       	movw	r22, r14
    19fc:	a8 01       	movw	r20, r16
    19fe:	96 01       	movw	r18, r12
    1a00:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
  int x = 0;
  int y = radius;
 
  LCD_drawLine(me,x0, y0 + radius,x0, y0 - radius);
  LCD_drawLine(me,x0 + radius, y0,x0 - radius, y0);
  while(x < y)
    1a04:	2d 81       	ldd	r18, Y+5	; 0x05
    1a06:	3e 81       	ldd	r19, Y+6	; 0x06
    1a08:	2a 15       	cp	r18, r10
    1a0a:	3b 05       	cpc	r19, r11
    1a0c:	0c f4       	brge	.+2      	; 0x1a10 <fillCircle+0x130>
    1a0e:	ae cf       	rjmp	.-164    	; 0x196c <fillCircle+0x8c>
	LCD_drawLine(me,x0 + x, y0 - y,x0 - x, y0 - y);
	LCD_drawLine(me,x0 + y, y0 + x,x0 - y, y0 + x);
	LCD_drawLine(me,x0 + y, y0 - x,x0 - y, y0 - x);

  }
}
    1a10:	26 96       	adiw	r28, 0x06	; 6
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	cf 90       	pop	r12
    1a2c:	bf 90       	pop	r11
    1a2e:	af 90       	pop	r10
    1a30:	9f 90       	pop	r9
    1a32:	8f 90       	pop	r8
    1a34:	7f 90       	pop	r7
    1a36:	6f 90       	pop	r6
    1a38:	5f 90       	pop	r5
    1a3a:	4f 90       	pop	r4
    1a3c:	3f 90       	pop	r3
    1a3e:	2f 90       	pop	r2
    1a40:	08 95       	ret

00001a42 <drawRect>:
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}



void drawRect(LCD_engine * me,int x,int y,int w,int h){
    1a42:	2f 92       	push	r2
    1a44:	3f 92       	push	r3
    1a46:	4f 92       	push	r4
    1a48:	5f 92       	push	r5
    1a4a:	6f 92       	push	r6
    1a4c:	7f 92       	push	r7
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	3c 01       	movw	r6, r24
    1a64:	4b 01       	movw	r8, r22
    1a66:	6a 01       	movw	r12, r20
    1a68:	59 01       	movw	r10, r18
    1a6a:	78 01       	movw	r14, r16
LCD_drawLine(me,x+1,y,x+w-1,y);
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	08 94       	sec
    1a70:	41 1c       	adc	r4, r1
    1a72:	51 1c       	adc	r5, r1
    1a74:	a6 0e       	add	r10, r22
    1a76:	b7 1e       	adc	r11, r23
    1a78:	15 01       	movw	r2, r10
    1a7a:	08 94       	sec
    1a7c:	21 08       	sbc	r2, r1
    1a7e:	31 08       	sbc	r3, r1
    1a80:	b2 01       	movw	r22, r4
    1a82:	91 01       	movw	r18, r2
    1a84:	86 01       	movw	r16, r12
    1a86:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(me,x+1,y+h,x+w-1,y+h);
    1a8a:	ec 0c       	add	r14, r12
    1a8c:	fd 1c       	adc	r15, r13
    1a8e:	c3 01       	movw	r24, r6
    1a90:	b2 01       	movw	r22, r4
    1a92:	a7 01       	movw	r20, r14
    1a94:	91 01       	movw	r18, r2
    1a96:	87 01       	movw	r16, r14
    1a98:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(me,x,y,x,y+h);
    1a9c:	c3 01       	movw	r24, r6
    1a9e:	b4 01       	movw	r22, r8
    1aa0:	a6 01       	movw	r20, r12
    1aa2:	94 01       	movw	r18, r8
    1aa4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(me,x+w,y,x+w,y+h);
    1aa8:	c3 01       	movw	r24, r6
    1aaa:	b5 01       	movw	r22, r10
    1aac:	a6 01       	movw	r20, r12
    1aae:	95 01       	movw	r18, r10
    1ab0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	af 90       	pop	r10
    1ac4:	9f 90       	pop	r9
    1ac6:	8f 90       	pop	r8
    1ac8:	7f 90       	pop	r7
    1aca:	6f 90       	pop	r6
    1acc:	5f 90       	pop	r5
    1ace:	4f 90       	pop	r4
    1ad0:	3f 90       	pop	r3
    1ad2:	2f 90       	pop	r2
    1ad4:	08 95       	ret

00001ad6 <c_fillRect>:
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}

void c_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1ad6:	2f 92       	push	r2
    1ad8:	3f 92       	push	r3
    1ada:	4f 92       	push	r4
    1adc:	5f 92       	push	r5
    1ade:	6f 92       	push	r6
    1ae0:	7f 92       	push	r7
    1ae2:	8f 92       	push	r8
    1ae4:	9f 92       	push	r9
    1ae6:	af 92       	push	r10
    1ae8:	bf 92       	push	r11
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	28 97       	sbiw	r28, 0x08	; 8
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	1c 01       	movw	r2, r24
    1b0c:	4b 01       	movw	r8, r22
    1b0e:	58 87       	std	Y+8, r21	; 0x08
    1b10:	4f 83       	std	Y+7, r20	; 0x07
    1b12:	39 01       	movw	r6, r18
    1b14:	28 01       	movw	r4, r16
drawRect(me,x,y,w,h);
    1b16:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
    1b1a:	57 01       	movw	r10, r14
    1b1c:	a8 0c       	add	r10, r8
    1b1e:	b9 1c       	adc	r11, r9
    1b20:	67 01       	movw	r12, r14
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
    1b22:	8f 81       	ldd	r24, Y+7	; 0x07
    1b24:	98 85       	ldd	r25, Y+8	; 0x08
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b2e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b30:	31 97       	sbiw	r30, 0x01	; 1
    1b32:	f8 87       	std	Y+8, r31	; 0x08
    1b34:	ef 83       	std	Y+7, r30	; 0x07
    1b36:	e4 0d       	add	r30, r4
    1b38:	f5 1d       	adc	r31, r5
    1b3a:	fe 83       	std	Y+6, r31	; 0x06
    1b3c:	ed 83       	std	Y+5, r30	; 0x05
    1b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b40:	98 85       	ldd	r25, Y+8	; 0x08
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	8f 83       	std	Y+7, r24	; 0x07
    1b48:	0d c0       	rjmp	.+26     	; 0x1b64 <c_fillRect+0x8e>
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}

void c_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
    1b4a:	95 01       	movw	r18, r10
    1b4c:	2e 19       	sub	r18, r14
    1b4e:	3f 09       	sbc	r19, r15
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
    1b50:	c1 01       	movw	r24, r2
    1b52:	b9 01       	movw	r22, r18
    1b54:	4b 81       	ldd	r20, Y+3	; 0x03
    1b56:	5c 81       	ldd	r21, Y+4	; 0x04
    1b58:	0d 81       	ldd	r16, Y+5	; 0x05
    1b5a:	1e 81       	ldd	r17, Y+6	; 0x06
    1b5c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}

void c_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1b60:	ce 0c       	add	r12, r14
    1b62:	df 1c       	adc	r13, r15
    1b64:	ae 0c       	add	r10, r14
    1b66:	bf 1c       	adc	r11, r15
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
    1b68:	c6 14       	cp	r12, r6
    1b6a:	d7 04       	cpc	r13, r7
    1b6c:	74 f3       	brlt	.-36     	; 0x1b4a <c_fillRect+0x74>
    1b6e:	af 80       	ldd	r10, Y+7	; 0x07
    1b70:	b8 84       	ldd	r11, Y+8	; 0x08
    1b72:	ae 0c       	add	r10, r14
    1b74:	bf 1c       	adc	r11, r15
    1b76:	67 01       	movw	r12, r14
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
for (int j=inc;j<h;j+=inc)
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
    1b78:	f4 01       	movw	r30, r8
    1b7a:	31 96       	adiw	r30, 0x01	; 1
    1b7c:	fa 83       	std	Y+2, r31	; 0x02
    1b7e:	e9 83       	std	Y+1, r30	; 0x01
    1b80:	08 94       	sec
    1b82:	81 08       	sbc	r8, r1
    1b84:	91 08       	sbc	r9, r1
    1b86:	86 0c       	add	r8, r6
    1b88:	97 1c       	adc	r9, r7
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <c_fillRect+0xce>
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}

void c_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
    1b8c:	85 01       	movw	r16, r10
    1b8e:	0e 19       	sub	r16, r14
    1b90:	1f 09       	sbc	r17, r15
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
for (int j=inc;j<h;j+=inc)
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
    1b92:	c1 01       	movw	r24, r2
    1b94:	69 81       	ldd	r22, Y+1	; 0x01
    1b96:	7a 81       	ldd	r23, Y+2	; 0x02
    1b98:	a8 01       	movw	r20, r16
    1b9a:	94 01       	movw	r18, r8
    1b9c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}

void c_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1ba0:	ce 0c       	add	r12, r14
    1ba2:	df 1c       	adc	r13, r15
    1ba4:	ae 0c       	add	r10, r14
    1ba6:	bf 1c       	adc	r11, r15
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
for (int j=inc;j<h;j+=inc)
    1ba8:	c4 14       	cp	r12, r4
    1baa:	d5 04       	cpc	r13, r5
    1bac:	7c f3       	brlt	.-34     	; 0x1b8c <c_fillRect+0xb6>
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}
    1bae:	28 96       	adiw	r28, 0x08	; 8
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	3f 90       	pop	r3
    1bdc:	2f 90       	pop	r2
    1bde:	08 95       	ret

00001be0 <v_fillRect>:
drawRect(me,x,y,w,h);
for (int j=inc;j<h;j+=inc)
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}

void v_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1be0:	2f 92       	push	r2
    1be2:	3f 92       	push	r3
    1be4:	4f 92       	push	r4
    1be6:	5f 92       	push	r5
    1be8:	6f 92       	push	r6
    1bea:	7f 92       	push	r7
    1bec:	8f 92       	push	r8
    1bee:	9f 92       	push	r9
    1bf0:	af 92       	push	r10
    1bf2:	bf 92       	push	r11
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	1c 01       	movw	r2, r24
    1c06:	6b 01       	movw	r12, r22
    1c08:	5a 01       	movw	r10, r20
    1c0a:	29 01       	movw	r4, r18
    1c0c:	48 01       	movw	r8, r16
drawRect(me,x,y,w,h);
    1c0e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
    1c12:	ce 0c       	add	r12, r14
    1c14:	df 1c       	adc	r13, r15
    1c16:	e7 01       	movw	r28, r14
for (int j=inc;j<w;j+=inc)
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
    1c18:	35 01       	movw	r6, r10
    1c1a:	08 94       	sec
    1c1c:	61 1c       	adc	r6, r1
    1c1e:	71 1c       	adc	r7, r1
    1c20:	08 94       	sec
    1c22:	a1 08       	sbc	r10, r1
    1c24:	b1 08       	sbc	r11, r1
    1c26:	a8 0c       	add	r10, r8
    1c28:	b9 1c       	adc	r11, r9
    1c2a:	0b c0       	rjmp	.+22     	; 0x1c42 <v_fillRect+0x62>
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}

void v_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
    1c2c:	96 01       	movw	r18, r12
    1c2e:	2e 19       	sub	r18, r14
    1c30:	3f 09       	sbc	r19, r15
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
    1c32:	c1 01       	movw	r24, r2
    1c34:	b9 01       	movw	r22, r18
    1c36:	a3 01       	movw	r20, r6
    1c38:	85 01       	movw	r16, r10
    1c3a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
drawRect(me,x,y,w,h);
for (int j=inc;j<h;j+=inc)
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}

void v_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1c3e:	ce 0d       	add	r28, r14
    1c40:	df 1d       	adc	r29, r15
    1c42:	ce 0c       	add	r12, r14
    1c44:	df 1c       	adc	r13, r15
drawRect(me,x,y,w,h);
for (int j=inc;j<w;j+=inc)
    1c46:	c4 15       	cp	r28, r4
    1c48:	d5 05       	cpc	r29, r5
    1c4a:	84 f3       	brlt	.-32     	; 0x1c2c <v_fillRect+0x4c>
	LCD_drawLine(me,x+j,y+1,x+j,h+y-1);
}
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	9f 90       	pop	r9
    1c62:	8f 90       	pop	r8
    1c64:	7f 90       	pop	r7
    1c66:	6f 90       	pop	r6
    1c68:	5f 90       	pop	r5
    1c6a:	4f 90       	pop	r4
    1c6c:	3f 90       	pop	r3
    1c6e:	2f 90       	pop	r2
    1c70:	08 95       	ret

00001c72 <h_fillRect>:

}

}

void h_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1c 01       	movw	r2, r24
    1c98:	6b 01       	movw	r12, r22
    1c9a:	5a 01       	movw	r10, r20
    1c9c:	49 01       	movw	r8, r18
    1c9e:	28 01       	movw	r4, r16
drawRect(me,x,y,w,h);
    1ca0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
    1ca4:	ae 0c       	add	r10, r14
    1ca6:	bf 1c       	adc	r11, r15
    1ca8:	e7 01       	movw	r28, r14
for (int j=inc;j<h;j+=inc)
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
    1caa:	36 01       	movw	r6, r12
    1cac:	08 94       	sec
    1cae:	61 1c       	adc	r6, r1
    1cb0:	71 1c       	adc	r7, r1
    1cb2:	08 94       	sec
    1cb4:	c1 08       	sbc	r12, r1
    1cb6:	d1 08       	sbc	r13, r1
    1cb8:	c8 0c       	add	r12, r8
    1cba:	d9 1c       	adc	r13, r9
    1cbc:	0b c0       	rjmp	.+22     	; 0x1cd4 <h_fillRect+0x62>

}

void h_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
drawRect(me,x,y,w,h);
for (int j=inc;j<h;j+=inc)
    1cbe:	85 01       	movw	r16, r10
    1cc0:	0e 19       	sub	r16, r14
    1cc2:	1f 09       	sbc	r17, r15
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
    1cc4:	c1 01       	movw	r24, r2
    1cc6:	b3 01       	movw	r22, r6
    1cc8:	a8 01       	movw	r20, r16
    1cca:	96 01       	movw	r18, r12
    1ccc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

}

}

void h_fillRect(LCD_engine * me,int x,int y,int w,int h,int inc){
    1cd0:	ce 0d       	add	r28, r14
    1cd2:	df 1d       	adc	r29, r15
    1cd4:	ae 0c       	add	r10, r14
    1cd6:	bf 1c       	adc	r11, r15
drawRect(me,x,y,w,h);
for (int j=inc;j<h;j+=inc)
    1cd8:	c4 15       	cp	r28, r4
    1cda:	d5 05       	cpc	r29, r5
    1cdc:	84 f3       	brlt	.-32     	; 0x1cbe <h_fillRect+0x4c>
	LCD_drawLine(me,x+1,j+y,x+w-1,j+y);
}
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	bf 90       	pop	r11
    1cf0:	af 90       	pop	r10
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	5f 90       	pop	r5
    1cfc:	4f 90       	pop	r4
    1cfe:	3f 90       	pop	r3
    1d00:	2f 90       	pop	r2
    1d02:	08 95       	ret

00001d04 <fillRect>:

}


//		FIGURES
void fillRect(LCD_engine * me,int x,int y,int w,int h){
    1d04:	6f 92       	push	r6
    1d06:	7f 92       	push	r7
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	3c 01       	movw	r6, r24
    1d22:	4b 01       	movw	r8, r22
    1d24:	5a 01       	movw	r10, r20
    1d26:	69 01       	movw	r12, r18
    1d28:	78 01       	movw	r14, r16
if (w>h){
    1d2a:	02 17       	cp	r16, r18
    1d2c:	13 07       	cpc	r17, r19
    1d2e:	2c f0       	brlt	.+10     	; 0x1d3a <fillRect+0x36>
    1d30:	c0 e0       	ldi	r28, 0x00	; 0
    1d32:	d0 e0       	ldi	r29, 0x00	; 0
for (int j=0;j<h;j++)
	LCD_drawLine(me,x,j+y,x+w,j+y);
}else{
for (int j=0;j<w;j++)
	LCD_drawLine(me,x+j,y,x+j,y+h);
    1d34:	e4 0e       	add	r14, r20
    1d36:	f5 1e       	adc	r15, r21
    1d38:	1d c0       	rjmp	.+58     	; 0x1d74 <fillRect+0x70>
}


//		FIGURES
void fillRect(LCD_engine * me,int x,int y,int w,int h){
if (w>h){
    1d3a:	c0 e0       	ldi	r28, 0x00	; 0
    1d3c:	d0 e0       	ldi	r29, 0x00	; 0
for (int j=0;j<h;j++)
	LCD_drawLine(me,x,j+y,x+w,j+y);
    1d3e:	c6 0e       	add	r12, r22
    1d40:	d7 1e       	adc	r13, r23
    1d42:	0a c0       	rjmp	.+20     	; 0x1d58 <fillRect+0x54>
}


//		FIGURES
void fillRect(LCD_engine * me,int x,int y,int w,int h){
if (w>h){
    1d44:	8e 01       	movw	r16, r28
    1d46:	0a 0d       	add	r16, r10
    1d48:	1b 1d       	adc	r17, r11
for (int j=0;j<h;j++)
	LCD_drawLine(me,x,j+y,x+w,j+y);
    1d4a:	c3 01       	movw	r24, r6
    1d4c:	b4 01       	movw	r22, r8
    1d4e:	a8 01       	movw	r20, r16
    1d50:	96 01       	movw	r18, r12
    1d52:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>


//		FIGURES
void fillRect(LCD_engine * me,int x,int y,int w,int h){
if (w>h){
for (int j=0;j<h;j++)
    1d56:	21 96       	adiw	r28, 0x01	; 1
    1d58:	ce 15       	cp	r28, r14
    1d5a:	df 05       	cpc	r29, r15
    1d5c:	9c f3       	brlt	.-26     	; 0x1d44 <fillRect+0x40>
    1d5e:	0d c0       	rjmp	.+26     	; 0x1d7a <fillRect+0x76>
    1d60:	9e 01       	movw	r18, r28
    1d62:	28 0d       	add	r18, r8
    1d64:	39 1d       	adc	r19, r9
	LCD_drawLine(me,x,j+y,x+w,j+y);
}else{
for (int j=0;j<w;j++)
	LCD_drawLine(me,x+j,y,x+j,y+h);
    1d66:	c3 01       	movw	r24, r6
    1d68:	b9 01       	movw	r22, r18
    1d6a:	a5 01       	movw	r20, r10
    1d6c:	87 01       	movw	r16, r14
    1d6e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
void fillRect(LCD_engine * me,int x,int y,int w,int h){
if (w>h){
for (int j=0;j<h;j++)
	LCD_drawLine(me,x,j+y,x+w,j+y);
}else{
for (int j=0;j<w;j++)
    1d72:	21 96       	adiw	r28, 0x01	; 1
    1d74:	cc 15       	cp	r28, r12
    1d76:	dd 05       	cpc	r29, r13
    1d78:	9c f3       	brlt	.-26     	; 0x1d60 <fillRect+0x5c>
	LCD_drawLine(me,x+j,y,x+j,y+h);

}

}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	bf 90       	pop	r11
    1d8c:	af 90       	pop	r10
    1d8e:	9f 90       	pop	r9
    1d90:	8f 90       	pop	r8
    1d92:	7f 90       	pop	r7
    1d94:	6f 90       	pop	r6
    1d96:	08 95       	ret

00001d98 <printHart>:


//Printing

void printHart(){
DOGDATA;
    1d98:	2a 9a       	sbi	0x05, 2	; 5
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1d9e:	0d b4       	in	r0, 0x2d	; 45
    1da0:	07 fe       	sbrs	r0, 7
    1da2:	fd cf       	rjmp	.-6      	; 0x1d9e <printHart+0x6>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1da4:	8e e1       	ldi	r24, 0x1E	; 30
    1da6:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1da8:	0d b4       	in	r0, 0x2d	; 45
    1daa:	07 fe       	sbrs	r0, 7
    1dac:	fd cf       	rjmp	.-6      	; 0x1da8 <printHart+0x10>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1dae:	8e e3       	ldi	r24, 0x3E	; 62
    1db0:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1db2:	0d b4       	in	r0, 0x2d	; 45
    1db4:	07 fe       	sbrs	r0, 7
    1db6:	fd cf       	rjmp	.-6      	; 0x1db2 <printHart+0x1a>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1db8:	8c e7       	ldi	r24, 0x7C	; 124
    1dba:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1dbc:	0d b4       	in	r0, 0x2d	; 45
    1dbe:	07 fe       	sbrs	r0, 7
    1dc0:	fd cf       	rjmp	.-6      	; 0x1dbc <printHart+0x24>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1dc2:	8e e3       	ldi	r24, 0x3E	; 62
    1dc4:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1dc6:	0d b4       	in	r0, 0x2d	; 45
    1dc8:	07 fe       	sbrs	r0, 7
    1dca:	fd cf       	rjmp	.-6      	; 0x1dc6 <printHart+0x2e>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1dcc:	8e e1       	ldi	r24, 0x1E	; 30
    1dce:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1dd0:	0d b4       	in	r0, 0x2d	; 45
    1dd2:	07 fe       	sbrs	r0, 7
    1dd4:	fd cf       	rjmp	.-6      	; 0x1dd0 <printHart+0x38>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1dd6:	8c e0       	ldi	r24, 0x0C	; 12
    1dd8:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1dda:	0d b4       	in	r0, 0x2d	; 45
    1ddc:	07 fe       	sbrs	r0, 7
    1dde:	fd cf       	rjmp	.-6      	; 0x1dda <printHart+0x42>
SPI_MasterTransmit(0b00111110); 				//#######
SPI_MasterTransmit(0b01111100); 				//-#####-
SPI_MasterTransmit(0b00111110); 				//--###--
SPI_MasterTransmit(0b00011110); 				//---#---
SPI_MasterTransmit(0b00001100); 				//-------
}
    1de0:	08 95       	ret

00001de2 <rprintfChar>:

void rprintfChar(unsigned char c)
{
    1de2:	98 2f       	mov	r25, r24
DOGDATA;
    1de4:	2a 9a       	sbi	0x05, 2	; 5




//if (c >95) {//Only big ascii table
if (c >127) {//end of table
    1de6:	87 ff       	sbrs	r24, 7
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <rprintfChar+0x16>
//if (c<123){//Small ascii
//c=c-32; //To big ascii
//}else {//Make a hart
printHart();
    1dea:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <printHart>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1dee:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1df0:	0d b4       	in	r0, 0x2d	; 45
    1df2:	07 fe       	sbrs	r0, 7
    1df4:	fd cf       	rjmp	.-6      	; 0x1df0 <rprintfChar+0xe>
    1df6:	08 95       	ret
printHart();
SPI_MasterTransmit(0x00); // small spaceing
return;
//}
}
if(c < 0x20) c = 0x20;
    1df8:	80 32       	cpi	r24, 0x20	; 32
    1dfa:	08 f4       	brcc	.+2      	; 0x1dfe <rprintfChar+0x1c>
    1dfc:	90 e2       	ldi	r25, 0x20	; 32
unsigned long dptr = (c-0x20)*5;
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	98 9f       	mul	r25, r24
    1e02:	c0 01       	movw	r24, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	80 5a       	subi	r24, 0xA0	; 160
    1e08:	90 40       	sbci	r25, 0x00	; 0
    1e0a:	aa 27       	eor	r26, r26
    1e0c:	97 fd       	sbrc	r25, 7
    1e0e:	a0 95       	com	r26
    1e10:	ba 2f       	mov	r27, r26
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 5b       	subi	r30, 0xB2	; 178
    1e16:	f9 4f       	sbci	r31, 0xF9	; 249

for(int i=0; i< 5; i++)
    1e18:	9c 01       	movw	r18, r24
    1e1a:	2b 5f       	subi	r18, 0xFB	; 251
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	22 5b       	subi	r18, 0xB2	; 178
    1e20:	39 4f       	sbci	r19, 0xF9	; 249
	{
	//((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
		//((((dptr)&0x0F)>9)?((dptr)+'A'-10):((dptr)+'0'))
    	SPI_MasterTransmit(ASCII5_7[dptr]);
    1e22:	80 81       	ld	r24, Z
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1e24:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1e26:	0d b4       	in	r0, 0x2d	; 45
    1e28:	07 fe       	sbrs	r0, 7
    1e2a:	fd cf       	rjmp	.-6      	; 0x1e26 <rprintfChar+0x44>
    1e2c:	31 96       	adiw	r30, 0x01	; 1
//}
}
if(c < 0x20) c = 0x20;
unsigned long dptr = (c-0x20)*5;

for(int i=0; i< 5; i++)
    1e2e:	e2 17       	cp	r30, r18
    1e30:	f3 07       	cpc	r31, r19
    1e32:	b9 f7       	brne	.-18     	; 0x1e22 <rprintfChar+0x40>
}

void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
    1e34:	1e bc       	out	0x2e, r1	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF))){}
    1e36:	0d b4       	in	r0, 0x2d	; 45
    1e38:	07 fe       	sbrs	r0, 7
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <rprintfChar+0x54>
    1e3c:	08 95       	ret

00001e3e <printfChar>:
}



void printfChar(LCD_engine * me,unsigned char c,unsigned char *x,unsigned char y)
{
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	3c 01       	movw	r6, r24
    1e5c:	6a 01       	movw	r12, r20
DOGDATA;
    1e5e:	2a 9a       	sbi	0x05, 2	; 5




//if (c >95) {//Only big ascii table
if (c >127) {//end of table
    1e60:	67 fd       	sbrc	r22, 7
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea <printfChar+0xac>
//printHart();
//SPI_MasterTransmit(0x00); // small spaceing
return;
//}
}
if(c < 0x20) c = 0x20;
    1e64:	60 32       	cpi	r22, 0x20	; 32
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <printfChar+0x2c>
    1e68:	60 e2       	ldi	r22, 0x20	; 32
unsigned long dptr = (c-0x20)*5;
    1e6a:	85 e0       	ldi	r24, 0x05	; 5
    1e6c:	68 9f       	mul	r22, r24
    1e6e:	c0 01       	movw	r24, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	80 5a       	subi	r24, 0xA0	; 160
    1e74:	90 40       	sbci	r25, 0x00	; 0
    1e76:	aa 27       	eor	r26, r26
    1e78:	97 fd       	sbrc	r25, 7
    1e7a:	a0 95       	com	r26
    1e7c:	ba 2f       	mov	r27, r26
    1e7e:	8c 01       	movw	r16, r24
    1e80:	02 5b       	subi	r16, 0xB2	; 178
    1e82:	19 4f       	sbci	r17, 0xF9	; 249
	{
	//((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
		//((((dptr)&0x0F)>9)?((dptr)+'A'-10):((dptr)+'0'))
		for (int j=7;j>=0;j--){
			if (ASCII5_7[dptr]&(1<<j)){
				LCD_drawPixel(me,*x,y+j);
    1e84:	82 2e       	mov	r8, r18
    1e86:	99 24       	eor	r9, r9
//}
}
if(c < 0x20) c = 0x20;
unsigned long dptr = (c-0x20)*5;

for(int i=0; i< 5; i++)
    1e88:	55 e0       	ldi	r21, 0x05	; 5
    1e8a:	e5 2e       	mov	r14, r21
    1e8c:	f1 2c       	mov	r15, r1
    1e8e:	e8 0e       	add	r14, r24
    1e90:	f9 1e       	adc	r15, r25
    1e92:	8e e4       	ldi	r24, 0x4E	; 78
    1e94:	96 e0       	ldi	r25, 0x06	; 6
    1e96:	e8 0e       	add	r14, r24
    1e98:	f9 1e       	adc	r15, r25
    1e9a:	20 c0       	rjmp	.+64     	; 0x1edc <printfChar+0x9e>
	{
	//((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
		//((((dptr)&0x0F)>9)?((dptr)+'A'-10):((dptr)+'0'))
		for (int j=7;j>=0;j--){
			if (ASCII5_7[dptr]&(1<<j)){
    1e9c:	c5 01       	movw	r24, r10
    1e9e:	0c 2e       	mov	r0, r28
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <printfChar+0x68>
    1ea2:	95 95       	asr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <printfChar+0x64>
    1eaa:	80 ff       	sbrs	r24, 0
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <printfChar+0x82>
				LCD_drawPixel(me,*x,y+j);
    1eae:	f6 01       	movw	r30, r12
    1eb0:	60 81       	ld	r22, Z
    1eb2:	ae 01       	movw	r20, r28
    1eb4:	48 0d       	add	r20, r8
    1eb6:	59 1d       	adc	r21, r9
    1eb8:	c3 01       	movw	r24, r6
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>

for(int i=0; i< 5; i++)
	{
	//((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
		//((((dptr)&0x0F)>9)?((dptr)+'A'-10):((dptr)+'0'))
		for (int j=7;j>=0;j--){
    1ec0:	21 97       	sbiw	r28, 0x01	; 1
    1ec2:	ff ef       	ldi	r31, 0xFF	; 255
    1ec4:	cf 3f       	cpi	r28, 0xFF	; 255
    1ec6:	df 07       	cpc	r29, r31
    1ec8:	49 f7       	brne	.-46     	; 0x1e9c <printfChar+0x5e>
				
			}
		}
    	//SPI_MasterTransmit(ASCII5_7[dptr]);
		//x++;
		(*x)=(*x)+1;
    1eca:	f6 01       	movw	r30, r12
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	80 83       	st	Z, r24
    1ed2:	0f 5f       	subi	r16, 0xFF	; 255
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
//}
}
if(c < 0x20) c = 0x20;
unsigned long dptr = (c-0x20)*5;

for(int i=0; i< 5; i++)
    1ed6:	0e 15       	cp	r16, r14
    1ed8:	1f 05       	cpc	r17, r15
    1eda:	39 f0       	breq	.+14     	; 0x1eea <printfChar+0xac>
	{
	//((((x)&0x0F)>9)?((x)+'A'-10):((x)+'0'))
		//((((dptr)&0x0F)>9)?((dptr)+'A'-10):((dptr)+'0'))
		for (int j=7;j>=0;j--){
			if (ASCII5_7[dptr]&(1<<j)){
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 81       	ld	r24, Z
    1ee0:	a8 2e       	mov	r10, r24
    1ee2:	bb 24       	eor	r11, r11
    1ee4:	c7 e0       	ldi	r28, 0x07	; 7
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	d9 cf       	rjmp	.-78     	; 0x1e9c <printfChar+0x5e>
    	dptr = dptr + 1;
	} 
		//xy_adrColumn = xy_adrColumn+6;  // Zeichenabstand 6 = ok, 5 fast zu eng, 

*/
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	cf 90       	pop	r12
    1efa:	bf 90       	pop	r11
    1efc:	af 90       	pop	r10
    1efe:	9f 90       	pop	r9
    1f00:	8f 90       	pop	r8
    1f02:	7f 90       	pop	r7
    1f04:	6f 90       	pop	r6
    1f06:	08 95       	ret

00001f08 <printfStr>:
void printfBin(LCD_engine * me,int i,unsigned char x,unsigned char y){
char str[10]; 
printfStr(me,itoa(i, str, 2),x,y);
}
void printfStr(LCD_engine * me,char str[],unsigned char x,unsigned char y)
{
    1f08:	bf 92       	push	r11
    1f0a:	cf 92       	push	r12
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	7c 01       	movw	r14, r24
    1f22:	8b 01       	movw	r16, r22
    1f24:	49 83       	std	Y+1, r20	; 0x01
    1f26:	b2 2e       	mov	r11, r18
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    1f28:	61 15       	cp	r22, r1
    1f2a:	71 05       	cpc	r23, r1
    1f2c:	61 f4       	brne	.+24     	; 0x1f46 <printfStr+0x3e>
    1f2e:	13 c0       	rjmp	.+38     	; 0x1f56 <printfStr+0x4e>

	// print the string until a null-terminator
	while (*str){
		printfChar(me,*str++,&x,y);
    1f30:	0f 5f       	subi	r16, 0xFF	; 255
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	c7 01       	movw	r24, r14
    1f36:	a6 01       	movw	r20, r12
    1f38:	2b 2d       	mov	r18, r11
    1f3a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printfChar>
		x++;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <printfStr+0x46>
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str){
		printfChar(me,*str++,&x,y);
    1f46:	6e 01       	movw	r12, r28
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str){
    1f4e:	f8 01       	movw	r30, r16
    1f50:	60 81       	ld	r22, Z
    1f52:	66 23       	and	r22, r22
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <printfStr+0x28>
		printfChar(me,*str++,&x,y);
		x++;
		}
}
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	df 90       	pop	r13
    1f66:	cf 90       	pop	r12
    1f68:	bf 90       	pop	r11
    1f6a:	08 95       	ret

00001f6c <rprintfStr>:
void rprintfBin(int i){
char str[10]; 
rprintfStr(itoa(i, str, 2));
}
void rprintfStr(char str[])
{
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <rprintfStr+0x12>
    1f76:	06 c0       	rjmp	.+12     	; 0x1f84 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    1f78:	21 96       	adiw	r28, 0x01	; 1
    1f7a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    1f7e:	88 81       	ld	r24, Y
    1f80:	88 23       	and	r24, r24
    1f82:	d1 f7       	brne	.-12     	; 0x1f78 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <StrLength>:
int StrLength(char str[]){
    1f8a:	fc 01       	movw	r30, r24
int l=0;
if (!str) return -1;
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <StrLength+0xc>
    1f90:	2f ef       	ldi	r18, 0xFF	; 255
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <StrLength+0x1e>
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <StrLength+0x18>
	// check the string until a null-terminator
	while (*str){
			*str++;
    1f9c:	31 96       	adiw	r30, 0x01	; 1
		l++;
    1f9e:	2f 5f       	subi	r18, 0xFF	; 255
    1fa0:	3f 4f       	sbci	r19, 0xFF	; 255
}
int StrLength(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 23       	and	r24, r24
    1fa6:	d1 f7       	brne	.-12     	; 0x1f9c <StrLength+0x12>
			*str++;
		l++;
	}
	return l;
}
    1fa8:	c9 01       	movw	r24, r18
    1faa:	08 95       	ret

00001fac <rprintfStrCenter>:
void rprintfStrCenter(char str[])
{LCD_setColumn(64-StrLength(str)*3);
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
	while (*str)
		rprintfChar(*str++);
}
int StrLength(char str[]){
int l=0;
if (!str) return -1;
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <rprintfStrCenter+0x10>
    1fb6:	2f ef       	ldi	r18, 0xFF	; 255
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	0a c0       	rjmp	.+20     	; 0x1fd0 <rprintfStrCenter+0x24>
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <rprintfStrCenter+0x1e>
	// check the string until a null-terminator
	while (*str){
			*str++;
    1fc4:	31 96       	adiw	r30, 0x01	; 1
		l++;
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
}
int StrLength(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 23       	and	r24, r24
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <rprintfStrCenter+0x18>
		l++;
	}
	return l;
}
void rprintfStrCenter(char str[])
{LCD_setColumn(64-StrLength(str)*3);
    1fd0:	c9 01       	movw	r24, r18
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	82 0f       	add	r24, r18
    1fd8:	93 1f       	adc	r25, r19
    1fda:	90 95       	com	r25
    1fdc:	81 95       	neg	r24
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	80 5c       	subi	r24, 0xC0	; 192
    1fe2:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr(str);
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	08 95       	ret

00001ff2 <rprintfBin>:

void rprintfInt(int i){
char str[10]; 
rprintfStr(itoa(i, str, 10));
}
void rprintfBin(int i){
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	2a 97       	sbiw	r28, 0x0a	; 10
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
char str[10]; 
rprintfStr(itoa(i, str, 2));
    2006:	be 01       	movw	r22, r28
    2008:	6f 5f       	subi	r22, 0xFF	; 255
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	42 e0       	ldi	r20, 0x02	; 2
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <itoa>
    2014:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
}
    2018:	2a 96       	adiw	r28, 0x0a	; 10
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <rprintfInt>:
		printfChar(me,*str++,&x,y);
		x++;
		}
}

void rprintfInt(int i){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	2a 97       	sbiw	r28, 0x0a	; 10
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
char str[10]; 
rprintfStr(itoa(i, str, 10));
    203e:	be 01       	movw	r22, r28
    2040:	6f 5f       	subi	r22, 0xFF	; 255
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	4a e0       	ldi	r20, 0x0A	; 10
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <itoa>
    204c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
}
    2050:	2a 96       	adiw	r28, 0x0a	; 10
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <printfBin>:

void printfInt(LCD_engine * me,int i,unsigned char x,unsigned char y){
char str[10]; 
printfStr(me,itoa(i, str, 10),x,y);
}
void printfBin(LCD_engine * me,int i,unsigned char x,unsigned char y){
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	2a 97       	sbiw	r28, 0x0a	; 10
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	8c 01       	movw	r16, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f4 2e       	mov	r15, r20
    2084:	e2 2e       	mov	r14, r18
char str[10]; 
printfStr(me,itoa(i, str, 2),x,y);
    2086:	be 01       	movw	r22, r28
    2088:	6f 5f       	subi	r22, 0xFF	; 255
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	42 e0       	ldi	r20, 0x02	; 2
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <itoa>
    2094:	bc 01       	movw	r22, r24
    2096:	c8 01       	movw	r24, r16
    2098:	4f 2d       	mov	r20, r15
    209a:	2e 2d       	mov	r18, r14
    209c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <printfStr>
}
    20a0:	2a 96       	adiw	r28, 0x0a	; 10
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	08 95       	ret

000020ba <printfInt>:
		//xy_adrColumn = xy_adrColumn+6;  // Zeichenabstand 6 = ok, 5 fast zu eng, 

*/
}

void printfInt(LCD_engine * me,int i,unsigned char x,unsigned char y){
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	2a 97       	sbiw	r28, 0x0a	; 10
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	8c 01       	movw	r16, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f4 2e       	mov	r15, r20
    20dc:	e2 2e       	mov	r14, r18
char str[10]; 
printfStr(me,itoa(i, str, 10),x,y);
    20de:	be 01       	movw	r22, r28
    20e0:	6f 5f       	subi	r22, 0xFF	; 255
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	4a e0       	ldi	r20, 0x0A	; 10
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <itoa>
    20ec:	bc 01       	movw	r22, r24
    20ee:	c8 01       	movw	r24, r16
    20f0:	4f 2d       	mov	r20, r15
    20f2:	2e 2d       	mov	r18, r14
    20f4:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <printfStr>
}
    20f8:	2a 96       	adiw	r28, 0x0a	; 10
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	08 95       	ret

00002112 <trash_ram>:
	//void (*aa)(char *x)=printf;
return me;
}

void trash_ram(LCD_engine * me){
free(me);
    2112:	0e 94 f7 34 	call	0x69ee	; 0x69ee <free>
}
    2116:	08 95       	ret

00002118 <get_new_ram>:
return me;
}


LCD_engine * get_new_ram(void){
	LCD_engine *me=malloc(sizeof(LCD_engine));
    2118:	83 e8       	ldi	r24, 0x83	; 131
    211a:	94 e0       	ldi	r25, 0x04	; 4
    211c:	0e 94 4a 34 	call	0x6894	; 0x6894 <malloc>
    2120:	fc 01       	movw	r30, r24
   *i = *j;
   *j = t;
}

void pixelSetOrClearOrInvert(LCD_engine * me, char set){
me->SETPIXEL=set;
    2122:	ef 57       	subi	r30, 0x7F	; 127
    2124:	fb 4f       	sbci	r31, 0xFB	; 251
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 83       	st	Z, r24
    212a:	e1 58       	subi	r30, 0x81	; 129
    212c:	f4 40       	sbci	r31, 0x04	; 4
	//me->print=hidden_print;
	//me->know=know;
	//me->print=printf;
	//void (*aa)(char *x)=printf;
return me;
}
    212e:	8e 2f       	mov	r24, r30
    2130:	08 95       	ret

00002132 <init_lcd>:
//***************************************************
//					Init LCD_engine			
//***************************************************
//void hidden_print(char * x);
//void know(LCD_engine * me);
LCD_engine * init_lcd(void){
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	1f 93       	push	r17
	LCD_engine *me=malloc(sizeof(LCD_engine));
    2138:	83 e8       	ldi	r24, 0x83	; 131
    213a:	94 e0       	ldi	r25, 0x04	; 4
    213c:	0e 94 4a 34 	call	0x6894	; 0x6894 <malloc>
    2140:	19 2f       	mov	r17, r25
    2142:	e8 2e       	mov	r14, r24
    2144:	f9 2e       	mov	r15, r25
   *i = *j;
   *j = t;
}

void pixelSetOrClearOrInvert(LCD_engine * me, char set){
me->SETPIXEL=set;
    2146:	81 e8       	ldi	r24, 0x81	; 129
    2148:	94 e0       	ldi	r25, 0x04	; 4
    214a:	e8 0e       	add	r14, r24
    214c:	f9 1e       	adc	r15, r25
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	f7 01       	movw	r30, r14
    2152:	80 83       	st	Z, r24
    2154:	8f e7       	ldi	r24, 0x7F	; 127
    2156:	9b ef       	ldi	r25, 0xFB	; 251
    2158:	e8 0e       	add	r14, r24
    215a:	f9 1e       	adc	r15, r25
//void know(LCD_engine * me);
LCD_engine * init_lcd(void){
	LCD_engine *me=malloc(sizeof(LCD_engine));

pixelSetOrClearOrInvert(me,SET_PIXELS);
LCD_init();
    215c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LCD_init>
	//me->print=hidden_print;
	//me->know=know;
	//me->print=printf;
	//void (*aa)(char *x)=printf;
return me;
}
    2160:	8e 2d       	mov	r24, r14
    2162:	91 2f       	mov	r25, r17
    2164:	1f 91       	pop	r17
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	08 95       	ret

0000216c <button_init>:
#include "buttons.h"
#include <avr/io.h>
#include "connections.h"

void button_init(void){
DD_BUTTONS &= ~((1<<B_UP)|(1<<B_LEFT)|(1<<B_RIGHT));
    216c:	8a b1       	in	r24, 0x0a	; 10
    216e:	8b 7c       	andi	r24, 0xCB	; 203
    2170:	8a b9       	out	0x0a, r24	; 10
P_BUTTONS=0xFF;
    2172:	8f ef       	ldi	r24, 0xFF	; 255
    2174:	8b b9       	out	0x0b, r24	; 11
//P_BUTTONS |=((1<<B_UP)|(1<<B_LEFT)|(1<<B_RIGHT));
//DD_BUTTONS &= ~(1<<B_UP);
//DD_BUTTONS=0x00;
}
    2176:	08 95       	ret

00002178 <only_combo_isPressed>:
unsigned char only_combo_isPressed(unsigned char combo){
return R_BUTTONS==(~combo);
    2178:	29 b1       	in	r18, 0x09	; 9
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	80 95       	com	r24
    2182:	90 95       	com	r25
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	09 f4       	brne	.+2      	; 0x218c <only_combo_isPressed+0x14>
    218a:	41 e0       	ldi	r20, 0x01	; 1
}
    218c:	84 2f       	mov	r24, r20
    218e:	08 95       	ret

00002190 <combo_isPressed>:
unsigned char combo_isPressed(unsigned char combo){
return ~R_BUTTONS&(combo);
    2190:	99 b1       	in	r25, 0x09	; 9
    2192:	90 95       	com	r25
}
    2194:	89 23       	and	r24, r25
    2196:	08 95       	ret

00002198 <A_isPressed>:

unsigned char A_isPressed(){
return ~R_BUTTONS&(1<<B_A);
    2198:	89 b1       	in	r24, 0x09	; 9
    219a:	80 95       	com	r24
}
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	08 95       	ret

000021a0 <START_isPressed>:
unsigned char START_isPressed(){
return ~R_BUTTONS&(1<<B_START);
    21a0:	89 b1       	in	r24, 0x09	; 9
    21a2:	80 95       	com	r24
}
    21a4:	80 74       	andi	r24, 0x40	; 64
    21a6:	08 95       	ret

000021a8 <B_isPressed>:
unsigned char B_isPressed(){
return ~R_BUTTONS&(1<<B_B);
    21a8:	89 b1       	in	r24, 0x09	; 9
    21aa:	80 95       	com	r24
}
    21ac:	82 70       	andi	r24, 0x02	; 2
    21ae:	08 95       	ret

000021b0 <DOWN_isPressed>:
unsigned char DOWN_isPressed(){
return ~R_BUTTONS&(1<<B_DOWN);
    21b0:	89 b1       	in	r24, 0x09	; 9
    21b2:	80 95       	com	r24
}
    21b4:	88 70       	andi	r24, 0x08	; 8
    21b6:	08 95       	ret

000021b8 <LEFT_isPressed>:
unsigned char LEFT_isPressed(){
return ~R_BUTTONS&(1<<B_LEFT);
    21b8:	89 b1       	in	r24, 0x09	; 9
    21ba:	80 95       	com	r24
}
    21bc:	80 71       	andi	r24, 0x10	; 16
    21be:	08 95       	ret

000021c0 <RIGHT_isPressed>:
unsigned char RIGHT_isPressed(){
return ~R_BUTTONS&(1<<B_RIGHT);
    21c0:	89 b1       	in	r24, 0x09	; 9
    21c2:	80 95       	com	r24
}
    21c4:	84 70       	andi	r24, 0x04	; 4
    21c6:	08 95       	ret

000021c8 <UP_isPressed>:
unsigned char UP_isPressed(){
return ~R_BUTTONS&(1<<B_UP);
    21c8:	89 b1       	in	r24, 0x09	; 9
    21ca:	80 95       	com	r24
}
    21cc:	80 72       	andi	r24, 0x20	; 32
    21ce:	08 95       	ret

000021d0 <UP_isPressedAndRel>:

unsigned char UP_isPressedAndRel(){
if (!UP_isPressed()) return 0;
    21d0:	4d 9b       	sbis	0x09, 5	; 9
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <UP_isPressedAndRel+0x8>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	08 95       	ret
while (UP_isPressed()){};
    21d8:	4d 9b       	sbis	0x09, 5	; 9
    21da:	fe cf       	rjmp	.-4      	; 0x21d8 <UP_isPressedAndRel+0x8>
    21dc:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    21de:	08 95       	ret

000021e0 <DOWN_isPressedAndRel>:

unsigned char DOWN_isPressedAndRel(){
if (!DOWN_isPressed()) return 0;
    21e0:	4b 9b       	sbis	0x09, 3	; 9
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DOWN_isPressedAndRel+0x8>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	08 95       	ret
while (DOWN_isPressed()){};
    21e8:	4b 9b       	sbis	0x09, 3	; 9
    21ea:	fe cf       	rjmp	.-4      	; 0x21e8 <DOWN_isPressedAndRel+0x8>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    21ee:	08 95       	ret

000021f0 <LEFT_isPressedAndRel>:

unsigned char LEFT_isPressedAndRel(){
if (!LEFT_isPressed()) return 0;
    21f0:	4c 9b       	sbis	0x09, 4	; 9
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <LEFT_isPressedAndRel+0x8>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	08 95       	ret
while (LEFT_isPressed()){};
    21f8:	4c 9b       	sbis	0x09, 4	; 9
    21fa:	fe cf       	rjmp	.-4      	; 0x21f8 <LEFT_isPressedAndRel+0x8>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    21fe:	08 95       	ret

00002200 <RIGHT_isPressedAndRel>:

unsigned char RIGHT_isPressedAndRel(){
if (!RIGHT_isPressed()) return 0;
    2200:	4a 9b       	sbis	0x09, 2	; 9
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <RIGHT_isPressedAndRel+0x8>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	08 95       	ret
while (RIGHT_isPressed()){};
    2208:	4a 9b       	sbis	0x09, 2	; 9
    220a:	fe cf       	rjmp	.-4      	; 0x2208 <RIGHT_isPressedAndRel+0x8>
    220c:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    220e:	08 95       	ret

00002210 <A_isPressedAndRel>:

unsigned char A_isPressedAndRel(){
if (!A_isPressed()) return 0;
    2210:	48 9b       	sbis	0x09, 0	; 9
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <A_isPressedAndRel+0x8>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	08 95       	ret
while (A_isPressed()){};
    2218:	48 9b       	sbis	0x09, 0	; 9
    221a:	fe cf       	rjmp	.-4      	; 0x2218 <A_isPressedAndRel+0x8>
    221c:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    221e:	08 95       	ret

00002220 <B_isPressedAndRel>:

unsigned char B_isPressedAndRel(){
if (!B_isPressed()) return 0;
    2220:	49 9b       	sbis	0x09, 1	; 9
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <B_isPressedAndRel+0x8>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	08 95       	ret
while (B_isPressed()){};
    2228:	49 9b       	sbis	0x09, 1	; 9
    222a:	fe cf       	rjmp	.-4      	; 0x2228 <B_isPressedAndRel+0x8>
    222c:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    222e:	08 95       	ret

00002230 <START_isPressedAndRel>:

unsigned char START_isPressedAndRel(){
if (!START_isPressed()) return 0;
    2230:	4e 9b       	sbis	0x09, 6	; 9
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <START_isPressedAndRel+0x8>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	08 95       	ret
while (START_isPressed()){};
    2238:	4e 9b       	sbis	0x09, 6	; 9
    223a:	fe cf       	rjmp	.-4      	; 0x2238 <START_isPressedAndRel+0x8>
    223c:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    223e:	08 95       	ret

00002240 <any_isPressed>:


unsigned char any_isPressed(){
return A_isPressed() || B_isPressed() || DOWN_isPressed() || LEFT_isPressed() || RIGHT_isPressed() || UP_isPressed();
    2240:	48 9b       	sbis	0x09, 0	; 9
    2242:	11 c0       	rjmp	.+34     	; 0x2266 <any_isPressed+0x26>
    2244:	49 9b       	sbis	0x09, 1	; 9
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <any_isPressed+0x26>
    2248:	4b 9b       	sbis	0x09, 3	; 9
    224a:	0d c0       	rjmp	.+26     	; 0x2266 <any_isPressed+0x26>
    224c:	4c 9b       	sbis	0x09, 4	; 9
    224e:	0b c0       	rjmp	.+22     	; 0x2266 <any_isPressed+0x26>
    2250:	4a 9b       	sbis	0x09, 2	; 9
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <any_isPressed+0x26>
}
unsigned char RIGHT_isPressed(){
return ~R_BUTTONS&(1<<B_RIGHT);
}
unsigned char UP_isPressed(){
return ~R_BUTTONS&(1<<B_UP);
    2254:	89 b1       	in	r24, 0x09	; 9
    2256:	80 95       	com	r24
    2258:	82 95       	swap	r24
    225a:	86 95       	lsr	r24
    225c:	87 70       	andi	r24, 0x07	; 7
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	81 70       	andi	r24, 0x01	; 1
    2262:	90 70       	andi	r25, 0x00	; 0
    2264:	08 95       	ret
return 1;
}


unsigned char any_isPressed(){
return A_isPressed() || B_isPressed() || DOWN_isPressed() || LEFT_isPressed() || RIGHT_isPressed() || UP_isPressed();
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
}
    226a:	08 95       	ret

0000226c <handle_ball_hit_pad>:
	LCD_drawPixel(lcd,x+1,y+1);


}

char handle_ball_hit_pad(Pad *pad,Ball *ball){
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	8c 01       	movw	r16, r24
    2276:	eb 01       	movw	r28, r22
	
	if (  ( (pad->side == SIDE_RIGHT && ball->dx<0 && ((int)ball->x)==pad->x+1 ) || (pad->side == SIDE_LEFT && ball->dx>0 && ((int)ball->x)==pad->x-1 ) ) && ((int)ball->y)>=pad->old_y && ((int)ball->y)<=pad->old_y+pad->size){
    2278:	fc 01       	movw	r30, r24
    227a:	86 85       	ldd	r24, Z+14	; 0x0e
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	c9 f4       	brne	.+50     	; 0x22b2 <handle_ball_hit_pad+0x46>
    2280:	68 85       	ldd	r22, Y+8	; 0x08
    2282:	79 85       	ldd	r23, Y+9	; 0x09
    2284:	8a 85       	ldd	r24, Y+10	; 0x0a
    2286:	9b 85       	ldd	r25, Y+11	; 0x0b
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	0e 94 09 31 	call	0x6212	; 0x6212 <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <handle_ball_hit_pad+0x2e>
    2298:	7c c0       	rjmp	.+248    	; 0x2392 <handle_ball_hit_pad+0x126>
    229a:	68 81       	ld	r22, Y
    229c:	79 81       	ldd	r23, Y+1	; 0x01
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    22a6:	f8 01       	movw	r30, r16
    22a8:	20 81       	ld	r18, Z
    22aa:	31 81       	ldd	r19, Z+1	; 0x01
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	1b c0       	rjmp	.+54     	; 0x22e8 <handle_ball_hit_pad+0x7c>
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	09 f0       	breq	.+2      	; 0x22b8 <handle_ball_hit_pad+0x4c>
    22b6:	6d c0       	rjmp	.+218    	; 0x2392 <handle_ball_hit_pad+0x126>
    22b8:	68 85       	ldd	r22, Y+8	; 0x08
    22ba:	79 85       	ldd	r23, Y+9	; 0x09
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	0c f0       	brlt	.+2      	; 0x22d2 <handle_ball_hit_pad+0x66>
    22d0:	60 c0       	rjmp	.+192    	; 0x2392 <handle_ball_hit_pad+0x126>
    22d2:	68 81       	ld	r22, Y
    22d4:	79 81       	ldd	r23, Y+1	; 0x01
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    22de:	f8 01       	movw	r30, r16
    22e0:	20 81       	ld	r18, Z
    22e2:	31 81       	ldd	r19, Z+1	; 0x01
    22e4:	21 50       	subi	r18, 0x01	; 1
    22e6:	30 40       	sbci	r19, 0x00	; 0
    22e8:	26 17       	cp	r18, r22
    22ea:	37 07       	cpc	r19, r23
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <handle_ball_hit_pad+0x84>
    22ee:	51 c0       	rjmp	.+162    	; 0x2392 <handle_ball_hit_pad+0x126>
    22f0:	6c 81       	ldd	r22, Y+4	; 0x04
    22f2:	7d 81       	ldd	r23, Y+5	; 0x05
    22f4:	8e 81       	ldd	r24, Y+6	; 0x06
    22f6:	9f 81       	ldd	r25, Y+7	; 0x07
    22f8:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    22fc:	f8 01       	movw	r30, r16
    22fe:	22 85       	ldd	r18, Z+10	; 0x0a
    2300:	33 85       	ldd	r19, Z+11	; 0x0b
    2302:	62 17       	cp	r22, r18
    2304:	73 07       	cpc	r23, r19
    2306:	0c f4       	brge	.+2      	; 0x230a <handle_ball_hit_pad+0x9e>
    2308:	44 c0       	rjmp	.+136    	; 0x2392 <handle_ball_hit_pad+0x126>
    230a:	44 85       	ldd	r20, Z+12	; 0x0c
    230c:	55 85       	ldd	r21, Z+13	; 0x0d
    230e:	24 0f       	add	r18, r20
    2310:	35 1f       	adc	r19, r21
    2312:	26 17       	cp	r18, r22
    2314:	37 07       	cpc	r19, r23
    2316:	ec f1       	brlt	.+122    	; 0x2392 <handle_ball_hit_pad+0x126>
		ball->dx=-ball->dx;
    2318:	88 85       	ldd	r24, Y+8	; 0x08
    231a:	99 85       	ldd	r25, Y+9	; 0x09
    231c:	aa 85       	ldd	r26, Y+10	; 0x0a
    231e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2320:	b0 58       	subi	r27, 0x80	; 128
    2322:	88 87       	std	Y+8, r24	; 0x08
    2324:	99 87       	std	Y+9, r25	; 0x09
    2326:	aa 87       	std	Y+10, r26	; 0x0a
    2328:	bb 87       	std	Y+11, r27	; 0x0b
		//Smart way to change dy depending on where the ball hit the pad
		int offset=(pad->y + (pad->size)/2 - ball->y);
		ball->dy+= -0.1 * offset;
    232a:	ca 01       	movw	r24, r20
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    2334:	88 27       	eor	r24, r24
    2336:	77 fd       	sbrc	r23, 7
    2338:	80 95       	com	r24
    233a:	98 2f       	mov	r25, r24
    233c:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    2340:	f8 01       	movw	r30, r16
    2342:	22 81       	ldd	r18, Z+2	; 0x02
    2344:	33 81       	ldd	r19, Z+3	; 0x03
    2346:	44 81       	ldd	r20, Z+4	; 0x04
    2348:	55 81       	ldd	r21, Z+5	; 0x05
    234a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    234e:	2c 81       	ldd	r18, Y+4	; 0x04
    2350:	3d 81       	ldd	r19, Y+5	; 0x05
    2352:	4e 81       	ldd	r20, Y+6	; 0x06
    2354:	5f 81       	ldd	r21, Y+7	; 0x07
    2356:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    235a:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    235e:	88 27       	eor	r24, r24
    2360:	77 fd       	sbrc	r23, 7
    2362:	80 95       	com	r24
    2364:	98 2f       	mov	r25, r24
    2366:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    236a:	2d ec       	ldi	r18, 0xCD	; 205
    236c:	3c ec       	ldi	r19, 0xCC	; 204
    236e:	4c ec       	ldi	r20, 0xCC	; 204
    2370:	5d eb       	ldi	r21, 0xBD	; 189
    2372:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    2376:	9b 01       	movw	r18, r22
    2378:	ac 01       	movw	r20, r24
    237a:	6c 85       	ldd	r22, Y+12	; 0x0c
    237c:	7d 85       	ldd	r23, Y+13	; 0x0d
    237e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2380:	9f 85       	ldd	r25, Y+15	; 0x0f
    2382:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2386:	6c 87       	std	Y+12, r22	; 0x0c
    2388:	7d 87       	std	Y+13, r23	; 0x0d
    238a:	8e 87       	std	Y+14, r24	; 0x0e
    238c:	9f 87       	std	Y+15, r25	; 0x0f
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <handle_ball_hit_pad+0x128>
		
		
		return 1;
    2392:	80 e0       	ldi	r24, 0x00	; 0
		}
	return 0;
	}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	08 95       	ret

0000239e <draw_board>:
	DOGENABLE;
	draw_board(lcd);
	pushRAM(lcd);
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
	}
void draw_board(LCD_engine *lcd){
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	7c 01       	movw	r14, r24
	LCD_drawLine(lcd,0,8,127,8);
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	48 e0       	ldi	r20, 0x08	; 8
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	2f e7       	ldi	r18, 0x7F	; 127
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	08 e0       	ldi	r16, 0x08	; 8
    23b6:	10 e0       	ldi	r17, 0x00	; 0
    23b8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	LCD_drawLine(lcd,0,63,127,63);
    23bc:	c7 01       	movw	r24, r14
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	4f e3       	ldi	r20, 0x3F	; 63
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	2f e7       	ldi	r18, 0x7F	; 127
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	0f e3       	ldi	r16, 0x3F	; 63
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	}
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	ef 90       	pop	r14
    23da:	08 95       	ret

000023dc <erase_pad>:

void draw_pad(LCD_engine *lcd, Pad *pad){
	LCD_drawLine(lcd,pad->x,(int)pad->y,pad->x,(int)pad->y+pad->size);
}

void erase_pad(LCD_engine *lcd, Pad *pad){
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	fb 01       	movw	r30, r22
	LCD_drawLine(lcd,pad->x,pad->old_y,pad->x,pad->old_y+pad->size);
    23e2:	20 81       	ld	r18, Z
    23e4:	31 81       	ldd	r19, Z+1	; 0x01
    23e6:	42 85       	ldd	r20, Z+10	; 0x0a
    23e8:	53 85       	ldd	r21, Z+11	; 0x0b
    23ea:	04 85       	ldd	r16, Z+12	; 0x0c
    23ec:	15 85       	ldd	r17, Z+13	; 0x0d
    23ee:	04 0f       	add	r16, r20
    23f0:	15 1f       	adc	r17, r21
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <draw_pad>:
		return 1;
		}
	return 0;
	}

void draw_pad(LCD_engine *lcd, Pad *pad){
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	5c 01       	movw	r10, r24
    2410:	7b 01       	movw	r14, r22
	LCD_drawLine(lcd,pad->x,(int)pad->y,pad->x,(int)pad->y+pad->size);
    2412:	fb 01       	movw	r30, r22
    2414:	c0 80       	ld	r12, Z
    2416:	d1 80       	ldd	r13, Z+1	; 0x01
    2418:	62 81       	ldd	r22, Z+2	; 0x02
    241a:	73 81       	ldd	r23, Z+3	; 0x03
    241c:	84 81       	ldd	r24, Z+4	; 0x04
    241e:	95 81       	ldd	r25, Z+5	; 0x05
    2420:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2424:	9b 01       	movw	r18, r22
    2426:	ac 01       	movw	r20, r24
    2428:	8b 01       	movw	r16, r22
    242a:	f7 01       	movw	r30, r14
    242c:	84 85       	ldd	r24, Z+12	; 0x0c
    242e:	95 85       	ldd	r25, Z+13	; 0x0d
    2430:	08 0f       	add	r16, r24
    2432:	19 1f       	adc	r17, r25
    2434:	c5 01       	movw	r24, r10
    2436:	b6 01       	movw	r22, r12
    2438:	a9 01       	movw	r20, r18
    243a:	96 01       	movw	r18, r12
    243c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	08 95       	ret

00002452 <lost_ball_animation>:

void erase_pad(LCD_engine *lcd, Pad *pad){
	LCD_drawLine(lcd,pad->x,pad->old_y,pad->x,pad->old_y+pad->size);
}

void lost_ball_animation(LCD_engine *lcd, int x,int y){
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	ec 01       	movw	r28, r24
    2468:	6b 01       	movw	r12, r22
    246a:	7a 01       	movw	r14, r20
	pixelSetOrClearOrInvert(lcd,INVERT_PIXELS);
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	10 e0       	ldi	r17, 0x00	; 0
    2476:	a1 2c       	mov	r10, r1
    2478:	84 eb       	ldi	r24, 0xB4	; 180
    247a:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30; i++)
	{
		drawCircle(lcd,x, y, i);
    247c:	ce 01       	movw	r24, r28
    247e:	b6 01       	movw	r22, r12
    2480:	a7 01       	movw	r20, r14
    2482:	98 01       	movw	r18, r16
    2484:	0e 94 09 0b 	call	0x1612	; 0x1612 <drawCircle>
		
		pushRAM(lcd);
    2488:	ce 01       	movw	r24, r28
    248a:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
    248e:	c5 01       	movw	r24, r10
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <lost_ball_animation+0x3e>
	LCD_drawLine(lcd,pad->x,pad->old_y,pad->x,pad->old_y+pad->size);
}

void lost_ball_animation(LCD_engine *lcd, int x,int y){
	pixelSetOrClearOrInvert(lcd,INVERT_PIXELS);
	for (int i = 0; i < 30; i++)
    2494:	0f 5f       	subi	r16, 0xFF	; 255
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	0e 31       	cpi	r16, 0x1E	; 30
    249a:	11 05       	cpc	r17, r1
    249c:	79 f7       	brne	.-34     	; 0x247c <lost_ball_animation+0x2a>
		drawCircle(lcd,x, y, i);
		
		pushRAM(lcd);
		_delay_ms(50);
	}
	LCD_CLR();
    249e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
	LCD_RAM_CLR(lcd);
    24a2:	ce 01       	movw	r24, r28
    24a4:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	DOGENABLE;
    24a8:	2c 98       	cbi	0x05, 4	; 5
	draw_board(lcd);
    24aa:	ce 01       	movw	r24, r28
    24ac:	0e 94 cf 11 	call	0x239e	; 0x239e <draw_board>
	pushRAM(lcd);
    24b0:	ce 01       	movw	r24, r28
    24b2:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    24b6:	ce 01       	movw	r24, r28
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
	}
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	08 95       	ret

000024d4 <draw_ball>:
	Pad pad2;
	}Player;



void draw_ball(LCD_engine *lcd,int x,int y){
    24d4:	6f 92       	push	r6
    24d6:	7f 92       	push	r7
    24d8:	8f 92       	push	r8
    24da:	9f 92       	push	r9
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	8c 01       	movw	r16, r24
    24ee:	7b 01       	movw	r14, r22
    24f0:	6a 01       	movw	r12, r20
	LCD_drawPixel(lcd,x,y-2);
    24f2:	42 50       	subi	r20, 0x02	; 2
    24f4:	50 40       	sbci	r21, 0x00	; 0
    24f6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x,y-1);
    24fa:	46 01       	movw	r8, r12
    24fc:	08 94       	sec
    24fe:	81 08       	sbc	r8, r1
    2500:	91 08       	sbc	r9, r1
    2502:	c8 01       	movw	r24, r16
    2504:	b7 01       	movw	r22, r14
    2506:	a4 01       	movw	r20, r8
    2508:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x,y);
    250c:	c8 01       	movw	r24, r16
    250e:	b7 01       	movw	r22, r14
    2510:	a6 01       	movw	r20, r12
    2512:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x,y+1);
    2516:	36 01       	movw	r6, r12
    2518:	08 94       	sec
    251a:	61 1c       	adc	r6, r1
    251c:	71 1c       	adc	r7, r1
    251e:	c8 01       	movw	r24, r16
    2520:	b7 01       	movw	r22, r14
    2522:	a3 01       	movw	r20, r6
    2524:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x,y+2);
    2528:	a6 01       	movw	r20, r12
    252a:	4e 5f       	subi	r20, 0xFE	; 254
    252c:	5f 4f       	sbci	r21, 0xFF	; 255
    252e:	c8 01       	movw	r24, r16
    2530:	b7 01       	movw	r22, r14
    2532:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	
	LCD_drawPixel(lcd,x-1,y-1);
    2536:	57 01       	movw	r10, r14
    2538:	08 94       	sec
    253a:	a1 08       	sbc	r10, r1
    253c:	b1 08       	sbc	r11, r1
    253e:	c8 01       	movw	r24, r16
    2540:	b5 01       	movw	r22, r10
    2542:	a4 01       	movw	r20, r8
    2544:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x-1,y);
    2548:	c8 01       	movw	r24, r16
    254a:	b5 01       	movw	r22, r10
    254c:	a6 01       	movw	r20, r12
    254e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x-2,y);
    2552:	b7 01       	movw	r22, r14
    2554:	62 50       	subi	r22, 0x02	; 2
    2556:	70 40       	sbci	r23, 0x00	; 0
    2558:	c8 01       	movw	r24, r16
    255a:	a6 01       	movw	r20, r12
    255c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x-1,y+1);
    2560:	c8 01       	movw	r24, r16
    2562:	b5 01       	movw	r22, r10
    2564:	a3 01       	movw	r20, r6
    2566:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	
	LCD_drawPixel(lcd,x+1,y-1);
    256a:	57 01       	movw	r10, r14
    256c:	08 94       	sec
    256e:	a1 1c       	adc	r10, r1
    2570:	b1 1c       	adc	r11, r1
    2572:	c8 01       	movw	r24, r16
    2574:	b5 01       	movw	r22, r10
    2576:	a4 01       	movw	r20, r8
    2578:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x+1,y);
    257c:	c8 01       	movw	r24, r16
    257e:	b5 01       	movw	r22, r10
    2580:	a6 01       	movw	r20, r12
    2582:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x+2,y);
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	e8 0e       	add	r14, r24
    258c:	f9 1e       	adc	r15, r25
    258e:	c8 01       	movw	r24, r16
    2590:	b7 01       	movw	r22, r14
    2592:	a6 01       	movw	r20, r12
    2594:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>
	LCD_drawPixel(lcd,x+1,y+1);
    2598:	c8 01       	movw	r24, r16
    259a:	b5 01       	movw	r22, r10
    259c:	a3 01       	movw	r20, r6
    259e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_drawPixel>


}
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	8f 90       	pop	r8
    25b6:	7f 90       	pop	r7
    25b8:	6f 90       	pop	r6
    25ba:	08 95       	ret

000025bc <game_ball>:
	}
void draw_board(LCD_engine *lcd){
	LCD_drawLine(lcd,0,8,127,8);
	LCD_drawLine(lcd,0,63,127,63);
	}
int game_ball(LCD_engine *lcd){
    25bc:	2f 92       	push	r2
    25be:	3f 92       	push	r3
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	c4 55       	subi	r28, 0x54	; 84
    25e6:	d0 40       	sbci	r29, 0x00	; 0
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	65 96       	adiw	r28, 0x15	; 21
    25f4:	9f af       	std	Y+63, r25	; 0x3f
    25f6:	8e af       	std	Y+62, r24	; 0x3e
    25f8:	65 97       	sbiw	r28, 0x15	; 21
	Player player_2;
	//Pad pad1;
	//Pad pad2;
	//char counter=0;
	
	LCD_CLR();
    25fa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
	LCD_RAM_CLR(lcd);
    25fe:	65 96       	adiw	r28, 0x15	; 21
    2600:	8e ad       	ldd	r24, Y+62	; 0x3e
    2602:	9f ad       	ldd	r25, Y+63	; 0x3f
    2604:	65 97       	sbiw	r28, 0x15	; 21
    2606:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	DOGENABLE;
    260a:	2c 98       	cbi	0x05, 4	; 5
	LCD_setPage(0);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(10);
    2612:	8a e0       	ldi	r24, 0x0A	; 10
    2614:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("Hello Pong ENGINE2!!!! :D öö");
    2618:	8e e2       	ldi	r24, 0x2E	; 46
    261a:	98 e0       	ldi	r25, 0x08	; 8
    261c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    2620:	80 e4       	ldi	r24, 0x40	; 64
    2622:	9c e9       	ldi	r25, 0x9C	; 156
    2624:	2c e5       	ldi	r18, 0x5C	; 92
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	f9 01       	movw	r30, r18
    262a:	31 97       	sbiw	r30, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <game_ball+0x6e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	d9 f7       	brne	.-10     	; 0x2628 <game_ball+0x6c>
	
	_delay_ms(4000);
	LCD_setPage(0);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(10);
    2638:	8a e0       	ldi	r24, 0x0A	; 10
    263a:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("                                  ");
    263e:	8b e4       	ldi	r24, 0x4B	; 75
    2640:	98 e0       	ldi	r25, 0x08	; 8
    2642:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
	setDubbelbuffer(lcd,1);
    2646:	65 96       	adiw	r28, 0x15	; 21
    2648:	8e ad       	ldd	r24, Y+62	; 0x3e
    264a:	9f ad       	ldd	r25, Y+63	; 0x3f
    264c:	65 97       	sbiw	r28, 0x15	; 21
    264e:	61 e0       	ldi	r22, 0x01	; 1
    2650:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
	
	DOGENABLE;
    2654:	2c 98       	cbi	0x05, 4	; 5
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	94 e2       	ldi	r25, 0x24	; 36
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <game_ball+0x9e>
	_delay_ms(10);
	//draw board
	draw_board(lcd);
    265e:	65 96       	adiw	r28, 0x15	; 21
    2660:	8e ad       	ldd	r24, Y+62	; 0x3e
    2662:	9f ad       	ldd	r25, Y+63	; 0x3f
    2664:	65 97       	sbiw	r28, 0x15	; 21
    2666:	0e 94 cf 11 	call	0x239e	; 0x239e <draw_board>
	
	
	ball.x=20;
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 ea       	ldi	r26, 0xA0	; 160
    2670:	b1 e4       	ldi	r27, 0x41	; 65
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	ab 83       	std	Y+3, r26	; 0x03
    2678:	bc 83       	std	Y+4, r27	; 0x04
	ball.y=30;
    267a:	0f 2e       	mov	r0, r31
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	ef 2e       	mov	r14, r31
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	ff 2e       	mov	r15, r31
    2684:	f0 ef       	ldi	r31, 0xF0	; 240
    2686:	0f 2f       	mov	r16, r31
    2688:	f1 e4       	ldi	r31, 0x41	; 65
    268a:	1f 2f       	mov	r17, r31
    268c:	f0 2d       	mov	r31, r0
    268e:	ed 82       	std	Y+5, r14	; 0x05
    2690:	fe 82       	std	Y+6, r15	; 0x06
    2692:	0f 83       	std	Y+7, r16	; 0x07
    2694:	18 87       	std	Y+8, r17	; 0x08
	ball.old_x=20;
    2696:	84 e1       	ldi	r24, 0x14	; 20
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9a 8b       	std	Y+18, r25	; 0x12
    269c:	89 8b       	std	Y+17, r24	; 0x11
	ball.old_y=30;
    269e:	be e1       	ldi	r27, 0x1E	; 30
    26a0:	cb 2e       	mov	r12, r27
    26a2:	d1 2c       	mov	r13, r1
    26a4:	dc 8a       	std	Y+20, r13	; 0x14
    26a6:	cb 8a       	std	Y+19, r12	; 0x13
	ball.dx=1;
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	bf e3       	ldi	r27, 0x3F	; 63
    26b0:	89 87       	std	Y+9, r24	; 0x09
    26b2:	9a 87       	std	Y+10, r25	; 0x0a
    26b4:	ab 87       	std	Y+11, r26	; 0x0b
    26b6:	bc 87       	std	Y+12, r27	; 0x0c
	ball.dy=1;
    26b8:	8d 87       	std	Y+13, r24	; 0x0d
    26ba:	9e 87       	std	Y+14, r25	; 0x0e
    26bc:	af 87       	std	Y+15, r26	; 0x0f
    26be:	b8 8b       	std	Y+16, r27	; 0x10
	//pad2.dy=0.1;
	//pad2.old_y=30;
	//pad2.size=10;
	//pad2.side=SIDE_LEFT;
	//player_1.pad=&pad1;
	player_1.score=0;
    26c0:	1d 8a       	std	Y+21, r1	; 0x15
	player_1.pad.x=2;
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9f 8b       	std	Y+23, r25	; 0x17
    26c8:	8e 8b       	std	Y+22, r24	; 0x16
	player_1.pad.y=30;
    26ca:	e8 8e       	std	Y+24, r14	; 0x18
    26cc:	f9 8e       	std	Y+25, r15	; 0x19
    26ce:	0a 8f       	std	Y+26, r16	; 0x1a
    26d0:	1b 8f       	std	Y+27, r17	; 0x1b
	player_1.pad.dy=0.5;
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	2c 8f       	std	Y+28, r18	; 0x1c
    26dc:	3d 8f       	std	Y+29, r19	; 0x1d
    26de:	4e 8f       	std	Y+30, r20	; 0x1e
    26e0:	5f 8f       	std	Y+31, r21	; 0x1f
	player_1.pad.old_y=30;
    26e2:	d9 a2       	std	Y+33, r13	; 0x21
    26e4:	c8 a2       	std	Y+32, r12	; 0x20
	player_1.pad.size=10;
    26e6:	6a e0       	ldi	r22, 0x0A	; 10
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	7b a3       	std	Y+35, r23	; 0x23
    26ec:	6a a3       	std	Y+34, r22	; 0x22
	player_1.pad.side=SIDE_RIGHT;
    26ee:	e2 e0       	ldi	r30, 0x02	; 2
    26f0:	ec a3       	std	Y+36, r30	; 0x24
	
	player_1.pad2.x=96;
    26f2:	80 e6       	ldi	r24, 0x60	; 96
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9e a3       	std	Y+38, r25	; 0x26
    26f8:	8d a3       	std	Y+37, r24	; 0x25
	player_1.pad2.y=30;
    26fa:	ef a2       	std	Y+39, r14	; 0x27
    26fc:	f8 a6       	std	Y+40, r15	; 0x28
    26fe:	09 a7       	std	Y+41, r16	; 0x29
    2700:	1a a7       	std	Y+42, r17	; 0x2a
	player_1.pad2.dy=0.5;
    2702:	2b a7       	std	Y+43, r18	; 0x2b
    2704:	3c a7       	std	Y+44, r19	; 0x2c
    2706:	4d a7       	std	Y+45, r20	; 0x2d
    2708:	5e a7       	std	Y+46, r21	; 0x2e
	player_1.pad2.old_y=30;
    270a:	d8 aa       	std	Y+48, r13	; 0x30
    270c:	cf a6       	std	Y+47, r12	; 0x2f
	player_1.pad2.size=10;
    270e:	7a ab       	std	Y+50, r23	; 0x32
    2710:	69 ab       	std	Y+49, r22	; 0x31
	player_1.pad2.side=SIDE_RIGHT;
    2712:	eb ab       	std	Y+51, r30	; 0x33
	
	
	//Player 2 on the rigth side
	player_2.score=0;
    2714:	1c aa       	std	Y+52, r1	; 0x34
	player_2.pad.x=126;
    2716:	8e e7       	ldi	r24, 0x7E	; 126
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9e ab       	std	Y+54, r25	; 0x36
    271c:	8d ab       	std	Y+53, r24	; 0x35
	player_2.pad.y=30;
    271e:	ef aa       	std	Y+55, r14	; 0x37
    2720:	f8 ae       	std	Y+56, r15	; 0x38
    2722:	09 af       	std	Y+57, r16	; 0x39
    2724:	1a af       	std	Y+58, r17	; 0x3a
	player_2.pad.dy=0.5;
    2726:	2b af       	std	Y+59, r18	; 0x3b
    2728:	3c af       	std	Y+60, r19	; 0x3c
    272a:	4d af       	std	Y+61, r20	; 0x3d
    272c:	5e af       	std	Y+62, r21	; 0x3e
	player_2.pad.old_y=30;
    272e:	af e3       	ldi	r26, 0x3F	; 63
    2730:	4a 2e       	mov	r4, r26
    2732:	51 2c       	mov	r5, r1
    2734:	4c 0e       	add	r4, r28
    2736:	5d 1e       	adc	r5, r29
    2738:	d2 01       	movw	r26, r4
    273a:	cd 92       	st	X+, r12
    273c:	dc 92       	st	X, r13
	player_2.pad.size=10;
    273e:	f1 e4       	ldi	r31, 0x41	; 65
    2740:	6f 2e       	mov	r6, r31
    2742:	71 2c       	mov	r7, r1
    2744:	6c 0e       	add	r6, r28
    2746:	7d 1e       	adc	r7, r29
    2748:	f3 01       	movw	r30, r6
    274a:	71 83       	std	Z+1, r23	; 0x01
    274c:	60 83       	st	Z, r22
	player_2.pad.side=SIDE_LEFT;
    274e:	33 24       	eor	r3, r3
    2750:	33 94       	inc	r3
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	30 82       	st	Z, r3
	
	player_2.pad2.x=32;
    275a:	e4 e4       	ldi	r30, 0x44	; 68
    275c:	8e 2e       	mov	r8, r30
    275e:	91 2c       	mov	r9, r1
    2760:	8c 0e       	add	r8, r28
    2762:	9d 1e       	adc	r9, r29
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	d4 01       	movw	r26, r8
    276a:	8d 93       	st	X+, r24
    276c:	9c 93       	st	X, r25
	player_2.pad2.y=30;
    276e:	96 e4       	ldi	r25, 0x46	; 70
    2770:	a9 2e       	mov	r10, r25
    2772:	b1 2c       	mov	r11, r1
    2774:	ac 0e       	add	r10, r28
    2776:	bd 1e       	adc	r11, r29
    2778:	f5 01       	movw	r30, r10
    277a:	e0 82       	st	Z, r14
    277c:	f1 82       	std	Z+1, r15	; 0x01
    277e:	02 83       	std	Z+2, r16	; 0x02
    2780:	13 83       	std	Z+3, r17	; 0x03
	player_2.pad2.dy=0.5;
    2782:	fe 01       	movw	r30, r28
    2784:	e6 5b       	subi	r30, 0xB6	; 182
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	20 83       	st	Z, r18
    278a:	31 83       	std	Z+1, r19	; 0x01
    278c:	42 83       	std	Z+2, r20	; 0x02
    278e:	53 83       	std	Z+3, r21	; 0x03
	player_2.pad2.old_y=30;
    2790:	ce 01       	movw	r24, r28
    2792:	82 5b       	subi	r24, 0xB2	; 178
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	dc 01       	movw	r26, r24
    2798:	cd 92       	st	X+, r12
    279a:	dc 92       	st	X, r13
	player_2.pad2.size=10;
    279c:	de 01       	movw	r26, r28
    279e:	a0 5b       	subi	r26, 0xB0	; 176
    27a0:	bf 4f       	sbci	r27, 0xFF	; 255
    27a2:	6d 93       	st	X+, r22
    27a4:	7c 93       	st	X, r23
	player_2.pad2.side=SIDE_LEFT;
    27a6:	fe 01       	movw	r30, r28
    27a8:	ee 5a       	subi	r30, 0xAE	; 174
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	30 82       	st	Z, r3
	char speed=0;
	while (1){//game loop

	
	
	if (START_isPressedAndRel()){
    27ae:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    27b2:	88 23       	and	r24, r24
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <game_ball+0x1fc>
    27b6:	d0 c2       	rjmp	.+1440   	; 0x2d58 <game_ball+0x79c>

	}

	
	
	LCD_setPage(0);
    27b8:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(0);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("Score:");rprintfInt(player_1.score);
    27c2:	8e e6       	ldi	r24, 0x6E	; 110
    27c4:	98 e0       	ldi	r25, 0x08	; 8
    27c6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    27ca:	8d 89       	ldd	r24, Y+21	; 0x15
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
	
	LCD_setColumn(60);rprintfStr("ö ");
    27d2:	8c e3       	ldi	r24, 0x3C	; 60
    27d4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    27d8:	85 e7       	ldi	r24, 0x75	; 117
    27da:	98 e0       	ldi	r25, 0x08	; 8
    27dc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
	
	//LCD_setColumn(100);
	rprintfStr("Score:");rprintfInt(player_2.score);
    27e0:	8e e6       	ldi	r24, 0x6E	; 110
    27e2:	98 e0       	ldi	r25, 0x08	; 8
    27e4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    27e8:	8c a9       	ldd	r24, Y+52	; 0x34
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
	//rprintfStr("L:");for(int i=0;i<lifes;i++){rprintfStr("ö");}rprintfStr("  ");
	//rprintfStr("s:");rprintfInt(speed);rprintfStr(" ");
	//rprintfStr("p:");rprintfInt((int)((pad1.dy)*100));rprintfStr(" ");
	//see keys
	//if (R_BUTTONS&(1<<B_LEFT)){
	if (LEFT_isPressed()){
    27f0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LEFT_isPressed>
	speed+=1;
	if (speed>50)
		speed=0;
	}
	//if (R_BUTTONS&(1<<B_RIGHT)){
	if (RIGHT_isPressed()){
    27f4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <RIGHT_isPressed>
	//pad1.dy=0.01;
	}
	
	//Player 1
	//if (R_BUTTONS&(1<<B_B)){
	if (B_isPressed()){
    27f8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <B_isPressed>
    27fc:	88 23       	and	r24, r24
    27fe:	f1 f0       	breq	.+60     	; 0x283c <game_ball+0x280>
	player_1.pad.y+=-player_1.pad.dy;
    2800:	68 8d       	ldd	r22, Y+24	; 0x18
    2802:	79 8d       	ldd	r23, Y+25	; 0x19
    2804:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2806:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2808:	2c 8d       	ldd	r18, Y+28	; 0x1c
    280a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    280c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    280e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2810:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    2814:	68 8f       	std	Y+24, r22	; 0x18
    2816:	79 8f       	std	Y+25, r23	; 0x19
    2818:	8a 8f       	std	Y+26, r24	; 0x1a
    281a:	9b 8f       	std	Y+27, r25	; 0x1b
	if (player_1.pad.y<9)
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e1       	ldi	r20, 0x10	; 16
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 09 31 	call	0x6212	; 0x6212 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	44 f4       	brge	.+16     	; 0x283c <game_ball+0x280>
		player_1.pad.y=9;
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e1       	ldi	r26, 0x10	; 16
    2832:	b1 e4       	ldi	r27, 0x41	; 65
    2834:	88 8f       	std	Y+24, r24	; 0x18
    2836:	99 8f       	std	Y+25, r25	; 0x19
    2838:	aa 8f       	std	Y+26, r26	; 0x1a
    283a:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	
	//if (R_BUTTONS&(1<<B_A)){
	if (A_isPressed()){
    283c:	0e 94 cc 10 	call	0x2198	; 0x2198 <A_isPressed>
    2840:	88 23       	and	r24, r24
    2842:	a9 f1       	breq	.+106    	; 0x28ae <game_ball+0x2f2>
	player_1.pad.y+=player_1.pad.dy;
    2844:	68 8d       	ldd	r22, Y+24	; 0x18
    2846:	79 8d       	ldd	r23, Y+25	; 0x19
    2848:	8a 8d       	ldd	r24, Y+26	; 0x1a
    284a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    284c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    284e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2850:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2852:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2854:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2858:	7b 01       	movw	r14, r22
    285a:	8c 01       	movw	r16, r24
    285c:	68 8f       	std	Y+24, r22	; 0x18
    285e:	79 8f       	std	Y+25, r23	; 0x19
    2860:	8a 8f       	std	Y+26, r24	; 0x1a
    2862:	9b 8f       	std	Y+27, r25	; 0x1b
	if (player_1.pad.y+player_1.pad.size>62)
    2864:	ca a0       	ldd	r12, Y+34	; 0x22
    2866:	db a0       	ldd	r13, Y+35	; 0x23
    2868:	b6 01       	movw	r22, r12
    286a:	88 27       	eor	r24, r24
    286c:	77 fd       	sbrc	r23, 7
    286e:	80 95       	com	r24
    2870:	98 2f       	mov	r25, r24
    2872:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    2876:	9b 01       	movw	r18, r22
    2878:	ac 01       	movw	r20, r24
    287a:	c8 01       	movw	r24, r16
    287c:	b7 01       	movw	r22, r14
    287e:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	48 e7       	ldi	r20, 0x78	; 120
    2888:	52 e4       	ldi	r21, 0x42	; 66
    288a:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	74 f4       	brge	.+28     	; 0x28ae <game_ball+0x2f2>
		player_1.pad.y=62-player_1.pad.size;
    2892:	6e e3       	ldi	r22, 0x3E	; 62
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	6c 19       	sub	r22, r12
    2898:	7d 09       	sbc	r23, r13
    289a:	88 27       	eor	r24, r24
    289c:	77 fd       	sbrc	r23, 7
    289e:	80 95       	com	r24
    28a0:	98 2f       	mov	r25, r24
    28a2:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    28a6:	68 8f       	std	Y+24, r22	; 0x18
    28a8:	79 8f       	std	Y+25, r23	; 0x19
    28aa:	8a 8f       	std	Y+26, r24	; 0x1a
    28ac:	9b 8f       	std	Y+27, r25	; 0x1b
	}
	//Second pad
	player_1.pad2.y=player_1.pad.y;
    28ae:	88 8d       	ldd	r24, Y+24	; 0x18
    28b0:	99 8d       	ldd	r25, Y+25	; 0x19
    28b2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    28b4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    28b6:	8f a3       	std	Y+39, r24	; 0x27
    28b8:	98 a7       	std	Y+40, r25	; 0x28
    28ba:	a9 a7       	std	Y+41, r26	; 0x29
    28bc:	ba a7       	std	Y+42, r27	; 0x2a
	
	
	//Player 1
	//if (R_BUTTONS&(1<<B_DOWN)){
	if (UP_isPressed()){
    28be:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UP_isPressed>
    28c2:	88 23       	and	r24, r24
    28c4:	f1 f0       	breq	.+60     	; 0x2902 <game_ball+0x346>
	player_2.pad.y+=-player_2.pad.dy;
    28c6:	6f a9       	ldd	r22, Y+55	; 0x37
    28c8:	78 ad       	ldd	r23, Y+56	; 0x38
    28ca:	89 ad       	ldd	r24, Y+57	; 0x39
    28cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ce:	2b ad       	ldd	r18, Y+59	; 0x3b
    28d0:	3c ad       	ldd	r19, Y+60	; 0x3c
    28d2:	4d ad       	ldd	r20, Y+61	; 0x3d
    28d4:	5e ad       	ldd	r21, Y+62	; 0x3e
    28d6:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    28da:	6f ab       	std	Y+55, r22	; 0x37
    28dc:	78 af       	std	Y+56, r23	; 0x38
    28de:	89 af       	std	Y+57, r24	; 0x39
    28e0:	9a af       	std	Y+58, r25	; 0x3a
	if (player_2.pad.y<9)
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e1       	ldi	r20, 0x10	; 16
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 09 31 	call	0x6212	; 0x6212 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	44 f4       	brge	.+16     	; 0x2902 <game_ball+0x346>
		player_2.pad.y=9;
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e1       	ldi	r26, 0x10	; 16
    28f8:	b1 e4       	ldi	r27, 0x41	; 65
    28fa:	8f ab       	std	Y+55, r24	; 0x37
    28fc:	98 af       	std	Y+56, r25	; 0x38
    28fe:	a9 af       	std	Y+57, r26	; 0x39
    2900:	ba af       	std	Y+58, r27	; 0x3a
	}
	//if (R_BUTTONS&(1<<B_UP)){
	if (DOWN_isPressed()){
    2902:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DOWN_isPressed>
    2906:	88 23       	and	r24, r24
    2908:	b9 f1       	breq	.+110    	; 0x2978 <game_ball+0x3bc>
	player_2.pad.y+=player_2.pad.dy;
    290a:	6f a9       	ldd	r22, Y+55	; 0x37
    290c:	78 ad       	ldd	r23, Y+56	; 0x38
    290e:	89 ad       	ldd	r24, Y+57	; 0x39
    2910:	9a ad       	ldd	r25, Y+58	; 0x3a
    2912:	2b ad       	ldd	r18, Y+59	; 0x3b
    2914:	3c ad       	ldd	r19, Y+60	; 0x3c
    2916:	4d ad       	ldd	r20, Y+61	; 0x3d
    2918:	5e ad       	ldd	r21, Y+62	; 0x3e
    291a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    291e:	7b 01       	movw	r14, r22
    2920:	8c 01       	movw	r16, r24
    2922:	6f ab       	std	Y+55, r22	; 0x37
    2924:	78 af       	std	Y+56, r23	; 0x38
    2926:	89 af       	std	Y+57, r24	; 0x39
    2928:	9a af       	std	Y+58, r25	; 0x3a
	if (player_2.pad.y+player_2.pad.size>62)
    292a:	23 96       	adiw	r28, 0x03	; 3
    292c:	ce ac       	ldd	r12, Y+62	; 0x3e
    292e:	df ac       	ldd	r13, Y+63	; 0x3f
    2930:	23 97       	sbiw	r28, 0x03	; 3
    2932:	b6 01       	movw	r22, r12
    2934:	88 27       	eor	r24, r24
    2936:	77 fd       	sbrc	r23, 7
    2938:	80 95       	com	r24
    293a:	98 2f       	mov	r25, r24
    293c:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    2940:	9b 01       	movw	r18, r22
    2942:	ac 01       	movw	r20, r24
    2944:	c8 01       	movw	r24, r16
    2946:	b7 01       	movw	r22, r14
    2948:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	48 e7       	ldi	r20, 0x78	; 120
    2952:	52 e4       	ldi	r21, 0x42	; 66
    2954:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	74 f4       	brge	.+28     	; 0x2978 <game_ball+0x3bc>
		player_2.pad.y=62-player_2.pad.size;
    295c:	6e e3       	ldi	r22, 0x3E	; 62
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	6c 19       	sub	r22, r12
    2962:	7d 09       	sbc	r23, r13
    2964:	88 27       	eor	r24, r24
    2966:	77 fd       	sbrc	r23, 7
    2968:	80 95       	com	r24
    296a:	98 2f       	mov	r25, r24
    296c:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    2970:	6f ab       	std	Y+55, r22	; 0x37
    2972:	78 af       	std	Y+56, r23	; 0x38
    2974:	89 af       	std	Y+57, r24	; 0x39
    2976:	9a af       	std	Y+58, r25	; 0x3a
	}
	//Second pad
	player_2.pad2.y=player_2.pad.y;
    2978:	8f a9       	ldd	r24, Y+55	; 0x37
    297a:	98 ad       	ldd	r25, Y+56	; 0x38
    297c:	a9 ad       	ldd	r26, Y+57	; 0x39
    297e:	ba ad       	ldd	r27, Y+58	; 0x3a
    2980:	2a 96       	adiw	r28, 0x0a	; 10
    2982:	8c af       	std	Y+60, r24	; 0x3c
    2984:	9d af       	std	Y+61, r25	; 0x3d
    2986:	ae af       	std	Y+62, r26	; 0x3e
    2988:	bf af       	std	Y+63, r27	; 0x3f
    298a:	2a 97       	sbiw	r28, 0x0a	; 10
	
	
	//Erase last frame
	pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    298c:	65 96       	adiw	r28, 0x15	; 21
    298e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2990:	9f ad       	ldd	r25, Y+63	; 0x3f
    2992:	65 97       	sbiw	r28, 0x15	; 21
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
	draw_ball(lcd,ball.old_x,ball.old_y);
    299a:	69 89       	ldd	r22, Y+17	; 0x11
    299c:	7a 89       	ldd	r23, Y+18	; 0x12
    299e:	4b 89       	ldd	r20, Y+19	; 0x13
    29a0:	5c 89       	ldd	r21, Y+20	; 0x14
    29a2:	65 96       	adiw	r28, 0x15	; 21
    29a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    29a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29a8:	65 97       	sbiw	r28, 0x15	; 21
    29aa:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <draw_ball>
void draw_pad(LCD_engine *lcd, Pad *pad){
	LCD_drawLine(lcd,pad->x,(int)pad->y,pad->x,(int)pad->y+pad->size);
}

void erase_pad(LCD_engine *lcd, Pad *pad){
	LCD_drawLine(lcd,pad->x,pad->old_y,pad->x,pad->old_y+pad->size);
    29ae:	2e 89       	ldd	r18, Y+22	; 0x16
    29b0:	3f 89       	ldd	r19, Y+23	; 0x17
    29b2:	48 a1       	ldd	r20, Y+32	; 0x20
    29b4:	59 a1       	ldd	r21, Y+33	; 0x21
    29b6:	0a a1       	ldd	r16, Y+34	; 0x22
    29b8:	1b a1       	ldd	r17, Y+35	; 0x23
    29ba:	04 0f       	add	r16, r20
    29bc:	15 1f       	adc	r17, r21
    29be:	65 96       	adiw	r28, 0x15	; 21
    29c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    29c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    29c4:	65 97       	sbiw	r28, 0x15	; 21
    29c6:	b9 01       	movw	r22, r18
    29c8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	erase_pad(lcd, &player_2.pad);
	erase_pad(lcd, &player_2.pad2);
	
	//erase_pad(lcd, &pad2);
	//Draw next frame
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    29cc:	2d a1       	ldd	r18, Y+37	; 0x25
    29ce:	3e a1       	ldd	r19, Y+38	; 0x26
    29d0:	4f a5       	ldd	r20, Y+47	; 0x2f
    29d2:	58 a9       	ldd	r21, Y+48	; 0x30
    29d4:	09 a9       	ldd	r16, Y+49	; 0x31
    29d6:	1a a9       	ldd	r17, Y+50	; 0x32
    29d8:	04 0f       	add	r16, r20
    29da:	15 1f       	adc	r17, r21
    29dc:	65 96       	adiw	r28, 0x15	; 21
    29de:	8e ad       	ldd	r24, Y+62	; 0x3e
    29e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    29e2:	65 97       	sbiw	r28, 0x15	; 21
    29e4:	b9 01       	movw	r22, r18
    29e6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    29ea:	2d a9       	ldd	r18, Y+53	; 0x35
    29ec:	3e a9       	ldd	r19, Y+54	; 0x36
    29ee:	21 96       	adiw	r28, 0x01	; 1
    29f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    29f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    29f4:	21 97       	sbiw	r28, 0x01	; 1
    29f6:	23 96       	adiw	r28, 0x03	; 3
    29f8:	0e ad       	ldd	r16, Y+62	; 0x3e
    29fa:	1f ad       	ldd	r17, Y+63	; 0x3f
    29fc:	23 97       	sbiw	r28, 0x03	; 3
    29fe:	04 0f       	add	r16, r20
    2a00:	15 1f       	adc	r17, r21
    2a02:	65 96       	adiw	r28, 0x15	; 21
    2a04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a08:	65 97       	sbiw	r28, 0x15	; 21
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    2a10:	26 96       	adiw	r28, 0x06	; 6
    2a12:	2e ad       	ldd	r18, Y+62	; 0x3e
    2a14:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a16:	26 97       	sbiw	r28, 0x06	; 6
    2a18:	60 96       	adiw	r28, 0x10	; 16
    2a1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a1e:	60 97       	sbiw	r28, 0x10	; 16
    2a20:	62 96       	adiw	r28, 0x12	; 18
    2a22:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a24:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a26:	62 97       	sbiw	r28, 0x12	; 18
    2a28:	04 0f       	add	r16, r20
    2a2a:	15 1f       	adc	r17, r21
    2a2c:	65 96       	adiw	r28, 0x15	; 21
    2a2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a30:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a32:	65 97       	sbiw	r28, 0x15	; 21
    2a34:	b9 01       	movw	r22, r18
    2a36:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    2a3a:	65 96       	adiw	r28, 0x15	; 21
    2a3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a40:	65 97       	sbiw	r28, 0x15	; 21
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
		}
	return 0;
	}

void draw_pad(LCD_engine *lcd, Pad *pad){
	LCD_drawLine(lcd,pad->x,(int)pad->y,pad->x,(int)pad->y+pad->size);
    2a48:	ee 88       	ldd	r14, Y+22	; 0x16
    2a4a:	ff 88       	ldd	r15, Y+23	; 0x17
    2a4c:	68 8d       	ldd	r22, Y+24	; 0x18
    2a4e:	79 8d       	ldd	r23, Y+25	; 0x19
    2a50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a54:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2a58:	9b 01       	movw	r18, r22
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	8b 01       	movw	r16, r22
    2a5e:	8a a1       	ldd	r24, Y+34	; 0x22
    2a60:	9b a1       	ldd	r25, Y+35	; 0x23
    2a62:	08 0f       	add	r16, r24
    2a64:	19 1f       	adc	r17, r25
    2a66:	65 96       	adiw	r28, 0x15	; 21
    2a68:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a6c:	65 97       	sbiw	r28, 0x15	; 21
    2a6e:	b7 01       	movw	r22, r14
    2a70:	a9 01       	movw	r20, r18
    2a72:	97 01       	movw	r18, r14
    2a74:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
	
	draw_pad(lcd, &player_2.pad);
	draw_pad(lcd, &player_2.pad2);
	
	//draw_pad(lcd, &pad2);
	draw_ball(lcd,(int)ball.x,(int)ball.y);
    2a78:	ed a0       	ldd	r14, Y+37	; 0x25
    2a7a:	fe a0       	ldd	r15, Y+38	; 0x26
    2a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a80:	89 a5       	ldd	r24, Y+41	; 0x29
    2a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a84:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	8b 01       	movw	r16, r22
    2a8e:	89 a9       	ldd	r24, Y+49	; 0x31
    2a90:	9a a9       	ldd	r25, Y+50	; 0x32
    2a92:	08 0f       	add	r16, r24
    2a94:	19 1f       	adc	r17, r25
    2a96:	65 96       	adiw	r28, 0x15	; 21
    2a98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a9c:	65 97       	sbiw	r28, 0x15	; 21
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	97 01       	movw	r18, r14
    2aa4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    2aa8:	ed a8       	ldd	r14, Y+53	; 0x35
    2aaa:	fe a8       	ldd	r15, Y+54	; 0x36
    2aac:	6f a9       	ldd	r22, Y+55	; 0x37
    2aae:	78 ad       	ldd	r23, Y+56	; 0x38
    2ab0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab4:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2ab8:	9b 01       	movw	r18, r22
    2aba:	ac 01       	movw	r20, r24
    2abc:	8b 01       	movw	r16, r22
    2abe:	23 96       	adiw	r28, 0x03	; 3
    2ac0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ac2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ac4:	23 97       	sbiw	r28, 0x03	; 3
    2ac6:	08 0f       	add	r16, r24
    2ac8:	19 1f       	adc	r17, r25
    2aca:	65 96       	adiw	r28, 0x15	; 21
    2acc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ace:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ad0:	65 97       	sbiw	r28, 0x15	; 21
    2ad2:	b7 01       	movw	r22, r14
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	97 01       	movw	r18, r14
    2ad8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    2adc:	26 96       	adiw	r28, 0x06	; 6
    2ade:	ee ac       	ldd	r14, Y+62	; 0x3e
    2ae0:	ff ac       	ldd	r15, Y+63	; 0x3f
    2ae2:	26 97       	sbiw	r28, 0x06	; 6
    2ae4:	2a 96       	adiw	r28, 0x0a	; 10
    2ae6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ae8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2aea:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aee:	2a 97       	sbiw	r28, 0x0a	; 10
    2af0:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2af4:	9b 01       	movw	r18, r22
    2af6:	ac 01       	movw	r20, r24
    2af8:	8b 01       	movw	r16, r22
    2afa:	62 96       	adiw	r28, 0x12	; 18
    2afc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2afe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b00:	62 97       	sbiw	r28, 0x12	; 18
    2b02:	08 0f       	add	r16, r24
    2b04:	19 1f       	adc	r17, r25
    2b06:	65 96       	adiw	r28, 0x15	; 21
    2b08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b0c:	65 97       	sbiw	r28, 0x15	; 21
    2b0e:	b7 01       	movw	r22, r14
    2b10:	a9 01       	movw	r20, r18
    2b12:	97 01       	movw	r18, r14
    2b14:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    2b18:	69 81       	ldd	r22, Y+1	; 0x01
    2b1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b24:	7b 01       	movw	r14, r22
    2b26:	8c 01       	movw	r16, r24
    2b28:	6d 81       	ldd	r22, Y+5	; 0x05
    2b2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2e:	98 85       	ldd	r25, Y+8	; 0x08
    2b30:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b34:	9b 01       	movw	r18, r22
    2b36:	ac 01       	movw	r20, r24
    2b38:	65 96       	adiw	r28, 0x15	; 21
    2b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b3e:	65 97       	sbiw	r28, 0x15	; 21
    2b40:	b7 01       	movw	r22, r14
    2b42:	a9 01       	movw	r20, r18
    2b44:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <draw_ball>
	
	
	
	ball.old_x=(int)ball.x;
    2b48:	29 80       	ldd	r2, Y+1	; 0x01
    2b4a:	3a 80       	ldd	r3, Y+2	; 0x02
    2b4c:	4b 80       	ldd	r4, Y+3	; 0x03
    2b4e:	5c 80       	ldd	r5, Y+4	; 0x04
    2b50:	c2 01       	movw	r24, r4
    2b52:	b1 01       	movw	r22, r2
    2b54:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b58:	7a 8b       	std	Y+18, r23	; 0x12
    2b5a:	69 8b       	std	Y+17, r22	; 0x11
	ball.old_y=(int)ball.y;
    2b5c:	ed 80       	ldd	r14, Y+5	; 0x05
    2b5e:	fe 80       	ldd	r15, Y+6	; 0x06
    2b60:	0f 81       	ldd	r16, Y+7	; 0x07
    2b62:	18 85       	ldd	r17, Y+8	; 0x08
    2b64:	c8 01       	movw	r24, r16
    2b66:	b7 01       	movw	r22, r14
    2b68:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b6c:	7c 8b       	std	Y+20, r23	; 0x14
    2b6e:	6b 8b       	std	Y+19, r22	; 0x13
	
	
	//Save player 1 state
	player_1.pad.old_y=(int)player_1.pad.y;
    2b70:	68 8d       	ldd	r22, Y+24	; 0x18
    2b72:	79 8d       	ldd	r23, Y+25	; 0x19
    2b74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b76:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b78:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b7c:	79 a3       	std	Y+33, r23	; 0x21
    2b7e:	68 a3       	std	Y+32, r22	; 0x20
	player_1.pad2.old_y=player_1.pad.old_y;
    2b80:	78 ab       	std	Y+48, r23	; 0x30
    2b82:	6f a7       	std	Y+47, r22	; 0x2f
	//Save player 2 state
	player_2.pad.old_y=(int)player_2.pad.y;
    2b84:	6f a9       	ldd	r22, Y+55	; 0x37
    2b86:	78 ad       	ldd	r23, Y+56	; 0x38
    2b88:	89 ad       	ldd	r24, Y+57	; 0x39
    2b8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b8c:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2b90:	21 96       	adiw	r28, 0x01	; 1
    2b92:	7f af       	std	Y+63, r23	; 0x3f
    2b94:	6e af       	std	Y+62, r22	; 0x3e
    2b96:	21 97       	sbiw	r28, 0x01	; 1
	player_2.pad2.old_y=player_2.pad.old_y;
    2b98:	60 96       	adiw	r28, 0x10	; 16
    2b9a:	7f af       	std	Y+63, r23	; 0x3f
    2b9c:	6e af       	std	Y+62, r22	; 0x3e
    2b9e:	60 97       	sbiw	r28, 0x10	; 16
	
	
	//pad2.old_y=(int)pad2.y;
	
	ball.x+=ball.dx;
    2ba0:	69 84       	ldd	r6, Y+9	; 0x09
    2ba2:	7a 84       	ldd	r7, Y+10	; 0x0a
    2ba4:	8b 84       	ldd	r8, Y+11	; 0x0b
    2ba6:	9c 84       	ldd	r9, Y+12	; 0x0c
	ball.y+=ball.dy;
    2ba8:	ad 84       	ldd	r10, Y+13	; 0x0d
    2baa:	be 84       	ldd	r11, Y+14	; 0x0e
    2bac:	cf 84       	ldd	r12, Y+15	; 0x0f
    2bae:	d8 88       	ldd	r13, Y+16	; 0x10
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	b7 01       	movw	r22, r14
    2bb4:	a6 01       	movw	r20, r12
    2bb6:	95 01       	movw	r18, r10
    2bb8:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2bbc:	7b 01       	movw	r14, r22
    2bbe:	8c 01       	movw	r16, r24
    2bc0:	6d 83       	std	Y+5, r22	; 0x05
    2bc2:	7e 83       	std	Y+6, r23	; 0x06
    2bc4:	8f 83       	std	Y+7, r24	; 0x07
    2bc6:	98 87       	std	Y+8, r25	; 0x08
	
	//Upper and lower boundarys
	if (((int)ball.y)>=61 || ((int)ball.y)<=10 ){
    2bc8:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2bcc:	6b 50       	subi	r22, 0x0B	; 11
    2bce:	70 40       	sbci	r23, 0x00	; 0
    2bd0:	62 33       	cpi	r22, 0x32	; 50
    2bd2:	71 05       	cpc	r23, r1
    2bd4:	78 f0       	brcs	.+30     	; 0x2bf4 <game_ball+0x638>
	ball.dy=-ball.dy;
    2bd6:	a6 01       	movw	r20, r12
    2bd8:	95 01       	movw	r18, r10
    2bda:	50 58       	subi	r21, 0x80	; 128
    2bdc:	2d 87       	std	Y+13, r18	; 0x0d
    2bde:	3e 87       	std	Y+14, r19	; 0x0e
    2be0:	4f 87       	std	Y+15, r20	; 0x0f
    2be2:	58 8b       	std	Y+16, r21	; 0x10
	ball.y+=ball.dy;
    2be4:	c8 01       	movw	r24, r16
    2be6:	b7 01       	movw	r22, r14
    2be8:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2bec:	6d 83       	std	Y+5, r22	; 0x05
    2bee:	7e 83       	std	Y+6, r23	; 0x06
    2bf0:	8f 83       	std	Y+7, r24	; 0x07
    2bf2:	98 87       	std	Y+8, r25	; 0x08
	player_2.pad2.old_y=player_2.pad.old_y;
	
	
	//pad2.old_y=(int)pad2.y;
	
	ball.x+=ball.dx;
    2bf4:	c2 01       	movw	r24, r4
    2bf6:	b1 01       	movw	r22, r2
    2bf8:	a4 01       	movw	r20, r8
    2bfa:	93 01       	movw	r18, r6
    2bfc:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    2c00:	69 83       	std	Y+1, r22	; 0x01
    2c02:	7a 83       	std	Y+2, r23	; 0x02
    2c04:	8b 83       	std	Y+3, r24	; 0x03
    2c06:	9c 83       	std	Y+4, r25	; 0x04
	ball.dy=-ball.dy;
	ball.y+=ball.dy;
	}
	
	
	if (handle_ball_hit_pad(&(player_1.pad),&ball)){//returns 1 on hit and 0 on no hit
    2c08:	ce 01       	movw	r24, r28
    2c0a:	46 96       	adiw	r24, 0x16	; 22
    2c0c:	be 01       	movw	r22, r28
    2c0e:	6f 5f       	subi	r22, 0xFF	; 255
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	0e 94 36 11 	call	0x226c	; 0x226c <handle_ball_hit_pad>
	}
	handle_ball_hit_pad(&(player_1.pad2),&ball);
    2c16:	ce 01       	movw	r24, r28
    2c18:	85 96       	adiw	r24, 0x25	; 37
    2c1a:	be 01       	movw	r22, r28
    2c1c:	6f 5f       	subi	r22, 0xFF	; 255
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c20:	0e 94 36 11 	call	0x226c	; 0x226c <handle_ball_hit_pad>
	
	
	handle_ball_hit_pad(&(player_2.pad),&ball);
    2c24:	ce 01       	movw	r24, r28
    2c26:	c5 96       	adiw	r24, 0x35	; 53
    2c28:	be 01       	movw	r22, r28
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	0e 94 36 11 	call	0x226c	; 0x226c <handle_ball_hit_pad>
	handle_ball_hit_pad(&(player_2.pad2),&ball);
    2c32:	ce 01       	movw	r24, r28
    2c34:	8c 5b       	subi	r24, 0xBC	; 188
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	be 01       	movw	r22, r28
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3e:	0e 94 36 11 	call	0x226c	; 0x226c <handle_ball_hit_pad>
	
	//if (handle_ball_hit_pad(&pad2,&ball)){//returns 1 on hit and 0 on no hit
	//}
	
	if (((int)ball.x)>=126){//Player 2 missed the ball
    2c42:	69 81       	ldd	r22, Y+1	; 0x01
    2c44:	7a 81       	ldd	r23, Y+2	; 0x02
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2c4e:	7b 01       	movw	r14, r22
    2c50:	8c 01       	movw	r16, r24
    2c52:	6e 37       	cpi	r22, 0x7E	; 126
    2c54:	71 05       	cpc	r23, r1
    2c56:	a4 f1       	brlt	.+104    	; 0x2cc0 <game_ball+0x704>
	lost_ball_animation(lcd,ball.x,ball.y);
    2c58:	6d 81       	ldd	r22, Y+5	; 0x05
    2c5a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c5e:	98 85       	ldd	r25, Y+8	; 0x08
    2c60:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2c64:	9b 01       	movw	r18, r22
    2c66:	ac 01       	movw	r20, r24
    2c68:	65 96       	adiw	r28, 0x15	; 21
    2c6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c6e:	65 97       	sbiw	r28, 0x15	; 21
    2c70:	b7 01       	movw	r22, r14
    2c72:	a9 01       	movw	r20, r18
    2c74:	0e 94 29 12 	call	0x2452	; 0x2452 <lost_ball_animation>
		ball.x=65;
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a2 e8       	ldi	r26, 0x82	; 130
    2c7e:	b2 e4       	ldi	r27, 0x42	; 66
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	ab 83       	std	Y+3, r26	; 0x03
    2c86:	bc 83       	std	Y+4, r27	; 0x04
		ball.y=30;
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a0 ef       	ldi	r26, 0xF0	; 240
    2c8e:	b1 e4       	ldi	r27, 0x41	; 65
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	af 83       	std	Y+7, r26	; 0x07
    2c96:	b8 87       	std	Y+8, r27	; 0x08
		ball.dx=-ball.dx;
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c9e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ca0:	b0 58       	subi	r27, 0x80	; 128
    2ca2:	89 87       	std	Y+9, r24	; 0x09
    2ca4:	9a 87       	std	Y+10, r25	; 0x0a
    2ca6:	ab 87       	std	Y+11, r26	; 0x0b
    2ca8:	bc 87       	std	Y+12, r27	; 0x0c
		ball.dy=0;
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e0       	ldi	r26, 0x00	; 0
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	8d 87       	std	Y+13, r24	; 0x0d
    2cb4:	9e 87       	std	Y+14, r25	; 0x0e
    2cb6:	af 87       	std	Y+15, r26	; 0x0f
    2cb8:	b8 8b       	std	Y+16, r27	; 0x10
		//if (lifes<0)
		//lifes=4;
		player_1.score+=1;
    2cba:	8d 89       	ldd	r24, Y+21	; 0x15
    2cbc:	8f 5f       	subi	r24, 0xFF	; 255
    2cbe:	8d 8b       	std	Y+21, r24	; 0x15
	
	}
	
	if (((int)ball.x)<=1){//Player 1 missed the ball!
    2cc0:	69 81       	ldd	r22, Y+1	; 0x01
    2cc2:	7a 81       	ldd	r23, Y+2	; 0x02
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2ccc:	7b 01       	movw	r14, r22
    2cce:	8c 01       	movw	r16, r24
    2cd0:	92 e0       	ldi	r25, 0x02	; 2
    2cd2:	e9 16       	cp	r14, r25
    2cd4:	f1 04       	cpc	r15, r1
    2cd6:	a4 f5       	brge	.+104    	; 0x2d40 <game_ball+0x784>
	//lifes--;
	lost_ball_animation(lcd,ball.x,ball.y);
    2cd8:	6d 81       	ldd	r22, Y+5	; 0x05
    2cda:	7e 81       	ldd	r23, Y+6	; 0x06
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	98 85       	ldd	r25, Y+8	; 0x08
    2ce0:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	65 96       	adiw	r28, 0x15	; 21
    2cea:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cee:	65 97       	sbiw	r28, 0x15	; 21
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	a9 01       	movw	r20, r18
    2cf4:	0e 94 29 12 	call	0x2452	; 0x2452 <lost_ball_animation>
	ball.x=65;
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a2 e8       	ldi	r26, 0x82	; 130
    2cfe:	b2 e4       	ldi	r27, 0x42	; 66
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	ab 83       	std	Y+3, r26	; 0x03
    2d06:	bc 83       	std	Y+4, r27	; 0x04
	ball.dx=-ball.dx;
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d0e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d10:	b0 58       	subi	r27, 0x80	; 128
    2d12:	89 87       	std	Y+9, r24	; 0x09
    2d14:	9a 87       	std	Y+10, r25	; 0x0a
    2d16:	ab 87       	std	Y+11, r26	; 0x0b
    2d18:	bc 87       	std	Y+12, r27	; 0x0c
	ball.dy=0;
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	8d 87       	std	Y+13, r24	; 0x0d
    2d24:	9e 87       	std	Y+14, r25	; 0x0e
    2d26:	af 87       	std	Y+15, r26	; 0x0f
    2d28:	b8 8b       	std	Y+16, r27	; 0x10
	ball.y=30;
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	a0 ef       	ldi	r26, 0xF0	; 240
    2d30:	b1 e4       	ldi	r27, 0x41	; 65
    2d32:	8d 83       	std	Y+5, r24	; 0x05
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	af 83       	std	Y+7, r26	; 0x07
    2d38:	b8 87       	std	Y+8, r27	; 0x08
	//if (lifes<0)
	//lifes=4;
	player_2.score+=1;
    2d3a:	8c a9       	ldd	r24, Y+52	; 0x34
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	8c ab       	std	Y+52, r24	; 0x34
	
	}
	
	
	
	pushRAM(lcd);
    2d40:	65 96       	adiw	r28, 0x15	; 21
    2d42:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d46:	65 97       	sbiw	r28, 0x15	; 21
    2d48:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
    2d4c:	89 e9       	ldi	r24, 0x99	; 153
    2d4e:	93 e0       	ldi	r25, 0x03	; 3
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <game_ball+0x794>
	_delay_ms(1);
	DOGENABLE;
    2d54:	2c 98       	cbi	0x05, 4	; 5
    2d56:	2b cd       	rjmp	.-1450   	; 0x27ae <game_ball+0x1f2>
	}
	return 1;

}
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	cc 5a       	subi	r28, 0xAC	; 172
    2d5e:	df 4f       	sbci	r29, 0xFF	; 255
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	bf 90       	pop	r11
    2d7c:	af 90       	pop	r10
    2d7e:	9f 90       	pop	r9
    2d80:	8f 90       	pop	r8
    2d82:	7f 90       	pop	r7
    2d84:	6f 90       	pop	r6
    2d86:	5f 90       	pop	r5
    2d88:	4f 90       	pop	r4
    2d8a:	3f 90       	pop	r3
    2d8c:	2f 90       	pop	r2
    2d8e:	08 95       	ret

00002d90 <getRawTouch>:
////////////start_reading_with_interrupt();
}



Point getRawTouch(){
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <getRawTouch+0x6>
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <getRawTouch+0x8>
    2d98:	0f 92       	push	r0
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
//set_y_reading();
//start_reading_with_interrupt();
//while (TOUCH_STATE!=5){}
Point P;

P.y=private_touch_point.y;
    2d9e:	40 91 73 0a 	lds	r20, 0x0A73
    2da2:	90 91 74 0a 	lds	r25, 0x0A74
P.x=private_touch_point.x;
    2da6:	20 91 71 0a 	lds	r18, 0x0A71
    2daa:	80 91 72 0a 	lds	r24, 0x0A72
P.y=y*TC.k_y+TC.m_y;
//x=get_touch_x();
P.x=get_touch_x()*TC.k_x+TC.m_x;
}
*/
return P;
    2dae:	60 91 75 0a 	lds	r22, 0x0A75
    2db2:	29 83       	std	Y+1, r18	; 0x01
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	4b 83       	std	Y+3, r20	; 0x03
    2db8:	9c 83       	std	Y+4, r25	; 0x04
    2dba:	38 2f       	mov	r19, r24
    2dbc:	59 2f       	mov	r21, r25
}
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <getTouch>:


Point getTouch(){
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <getTouch+0x6>
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <getTouch+0x8>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
//set_y_reading();
//start_reading_with_interrupt();
//while (TOUCH_STATE!=5){}
Point P;

P.y=private_touch_point.y*TC.k_y/100+TC.m_y;
    2de2:	20 91 6a 0a 	lds	r18, 0x0A6A
    2de6:	30 91 6b 0a 	lds	r19, 0x0A6B
    2dea:	80 91 73 0a 	lds	r24, 0x0A73
    2dee:	90 91 74 0a 	lds	r25, 0x0A74
    2df2:	ac 01       	movw	r20, r24
    2df4:	24 9f       	mul	r18, r20
    2df6:	c0 01       	movw	r24, r0
    2df8:	25 9f       	mul	r18, r21
    2dfa:	90 0d       	add	r25, r0
    2dfc:	34 9f       	mul	r19, r20
    2dfe:	90 0d       	add	r25, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	64 e6       	ldi	r22, 0x64	; 100
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    2e0a:	fb 01       	movw	r30, r22
    2e0c:	80 91 6c 0a 	lds	r24, 0x0A6C
    2e10:	e8 0f       	add	r30, r24
    2e12:	f1 1d       	adc	r31, r1
P.x=private_touch_point.x*TC.k_x/100+TC.m_x;
    2e14:	20 91 67 0a 	lds	r18, 0x0A67
    2e18:	30 91 68 0a 	lds	r19, 0x0A68
    2e1c:	80 91 71 0a 	lds	r24, 0x0A71
    2e20:	90 91 72 0a 	lds	r25, 0x0A72
    2e24:	ac 01       	movw	r20, r24
    2e26:	24 9f       	mul	r18, r20
    2e28:	c0 01       	movw	r24, r0
    2e2a:	25 9f       	mul	r18, r21
    2e2c:	90 0d       	add	r25, r0
    2e2e:	34 9f       	mul	r19, r20
    2e30:	90 0d       	add	r25, r0
    2e32:	11 24       	eor	r1, r1
    2e34:	64 e6       	ldi	r22, 0x64	; 100
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	20 91 69 0a 	lds	r18, 0x0A69
    2e42:	82 0f       	add	r24, r18
    2e44:	91 1d       	adc	r25, r1
P.y=y*TC.k_y+TC.m_y;
//x=get_touch_x();
P.x=get_touch_x()*TC.k_x+TC.m_x;
}
*/
return P;
    2e46:	60 91 75 0a 	lds	r22, 0x0A75
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	fc 83       	std	Y+4, r31	; 0x04
    2e50:	eb 83       	std	Y+3, r30	; 0x03
    2e52:	3a 81       	ldd	r19, Y+2	; 0x02
    2e54:	5c 81       	ldd	r21, Y+4	; 0x04
}
    2e56:	28 2f       	mov	r18, r24
    2e58:	4e 2f       	mov	r20, r30
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <set_calibration>:
void set_calibration(unsigned char diff_x,unsigned char m_x,unsigned char diff_y,unsigned char m_y){
    2e70:	38 2f       	mov	r19, r24
    2e72:	e6 2f       	mov	r30, r22
TC.k_x=-3000/(diff_x);
    2e74:	88 e4       	ldi	r24, 0x48	; 72
    2e76:	94 ef       	ldi	r25, 0xF4	; 244
    2e78:	63 2f       	mov	r22, r19
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    2e80:	70 93 68 0a 	sts	0x0A68, r23
    2e84:	60 93 67 0a 	sts	0x0A67, r22
//m_x=25-(k_x*x_0)/100;
TC.k_y=-2400/(diff_y);
    2e88:	80 ea       	ldi	r24, 0xA0	; 160
    2e8a:	96 ef       	ldi	r25, 0xF6	; 246
    2e8c:	64 2f       	mov	r22, r20
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    2e94:	70 93 6b 0a 	sts	0x0A6B, r23
    2e98:	60 93 6a 0a 	sts	0x0A6A, r22
//m_y=21-(k_y*y_0)/100;



TC.m_x=m_x;
    2e9c:	e0 93 69 0a 	sts	0x0A69, r30
TC.m_y=m_y;
    2ea0:	20 93 6c 0a 	sts	0x0A6C, r18


}
    2ea4:	08 95       	ret

00002ea6 <load_eeprom_touch>:


}

unsigned char eeprom_read(unsigned int adress){
while (EECR & (1<<EEPE)){} //Wait if already writing
    2ea6:	f9 99       	sbic	0x1f, 1	; 31
    2ea8:	fe cf       	rjmp	.-4      	; 0x2ea6 <load_eeprom_touch>
EEAR=adress;
    2eaa:	8b e0       	ldi	r24, 0x0B	; 11
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	92 bd       	out	0x22, r25	; 34
    2eb0:	81 bd       	out	0x21, r24	; 33
EECR|=(1<<EERE);
    2eb2:	f8 9a       	sbi	0x1f, 0	; 31
return EEDR;
    2eb4:	30 b5       	in	r19, 0x20	; 32


}

unsigned char eeprom_read(unsigned int adress){
while (EECR & (1<<EEPE)){} //Wait if already writing
    2eb6:	f9 99       	sbic	0x1f, 1	; 31
    2eb8:	fe cf       	rjmp	.-4      	; 0x2eb6 <load_eeprom_touch+0x10>
EEAR=adress;
    2eba:	8c e0       	ldi	r24, 0x0C	; 12
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	92 bd       	out	0x22, r25	; 34
    2ec0:	81 bd       	out	0x21, r24	; 33
EECR|=(1<<EERE);
    2ec2:	f8 9a       	sbi	0x1f, 0	; 31
return EEDR;
    2ec4:	60 b5       	in	r22, 0x20	; 32


}

unsigned char eeprom_read(unsigned int adress){
while (EECR & (1<<EEPE)){} //Wait if already writing
    2ec6:	f9 99       	sbic	0x1f, 1	; 31
    2ec8:	fe cf       	rjmp	.-4      	; 0x2ec6 <load_eeprom_touch+0x20>
EEAR=adress;
    2eca:	8d e0       	ldi	r24, 0x0D	; 13
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	92 bd       	out	0x22, r25	; 34
    2ed0:	81 bd       	out	0x21, r24	; 33
EECR|=(1<<EERE);
    2ed2:	f8 9a       	sbi	0x1f, 0	; 31
return EEDR;
    2ed4:	40 b5       	in	r20, 0x20	; 32


}

unsigned char eeprom_read(unsigned int adress){
while (EECR & (1<<EEPE)){} //Wait if already writing
    2ed6:	f9 99       	sbic	0x1f, 1	; 31
    2ed8:	fe cf       	rjmp	.-4      	; 0x2ed6 <load_eeprom_touch+0x30>
EEAR=adress;
    2eda:	8e e0       	ldi	r24, 0x0E	; 14
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	92 bd       	out	0x22, r25	; 34
    2ee0:	81 bd       	out	0x21, r24	; 33
EECR|=(1<<EERE);
    2ee2:	f8 9a       	sbi	0x1f, 0	; 31
return EEDR;
    2ee4:	20 b5       	in	r18, 0x20	; 32
unsigned char m_x=eeprom_read(12);
unsigned char diff_y=eeprom_read(13);
unsigned char m_y=eeprom_read(14);


set_calibration(diff_x,m_x,diff_y,m_y);
    2ee6:	83 2f       	mov	r24, r19
    2ee8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <set_calibration>


TC.m_x=(m_x_H<<4)&(m_x_L);
TC.m_y=(m_y_H<<4)&(m_y_L);
*/
}
    2eec:	08 95       	ret

00002eee <touch_init>:
  	start_reading_with_interrupt();

}

void touch_init(void){
DDRA=0x00;
    2eee:	11 b8       	out	0x01, r1	; 1
//ADMUX= 0b01100000; //single ended ADC0

ADMUX= 0b00100000; //single ended ADC0
    2ef0:	80 e2       	ldi	r24, 0x20	; 32
    2ef2:	80 93 7c 00 	sts	0x007C, r24

ADCSRA=0b10000000; //enable 
    2ef6:	ea e7       	ldi	r30, 0x7A	; 122
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 e8       	ldi	r24, 0x80	; 128
    2efc:	80 83       	st	Z, r24

   ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
    2efe:	80 81       	ld	r24, Z
    2f00:	88 60       	ori	r24, 0x08	; 8
    2f02:	80 83       	st	Z, r24
   //sei();   // Enable Global Interrupts 


}
    2f04:	08 95       	ret

00002f06 <start_reading_with_interrupt>:
void start_reading_with_interrupt(){
	ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
    2f06:	ea e7       	ldi	r30, 0x7A	; 122
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	88 60       	ori	r24, 0x08	; 8
    2f0e:	80 83       	st	Z, r24
	ADCSRA|=0b01000000; //start next
    2f10:	80 81       	ld	r24, Z
    2f12:	80 64       	ori	r24, 0x40	; 64
    2f14:	80 83       	st	Z, r24
}
    2f16:	08 95       	ret

00002f18 <set_y_reading>:

void set_y_reading(){
ADCSRA=0x00;
    2f18:	ea e7       	ldi	r30, 0x7A	; 122
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	10 82       	st	Z, r1
DDRA=0xFF; //Allt ut
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	81 b9       	out	0x01, r24	; 1
PORTA=0x00; //GND
    2f22:	12 b8       	out	0x02, r1	; 2
DDRA=0x00; //Allt in
    2f24:	11 b8       	out	0x01, r1	; 1
PORTA=0x00; //varför?
    2f26:	12 b8       	out	0x02, r1	; 2
ADMUX= 0b00100001; //single ended ADC1
    2f28:	81 e2       	ldi	r24, 0x21	; 33
    2f2a:	80 93 7c 00 	sts	0x007C, r24
ADCSRA=0b10000000; //enable 
    2f2e:	80 e8       	ldi	r24, 0x80	; 128
    2f30:	80 83       	st	Z, r24
//ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
//Sätt rätt ut och in
DDRA|=(1<<DDA0)|(1<<DDA2);
    2f32:	81 b1       	in	r24, 0x01	; 1
    2f34:	85 60       	ori	r24, 0x05	; 5
    2f36:	81 b9       	out	0x01, r24	; 1
//PORTA|=(1<<PINA0);
//PORTA&=~(1<<PINA2);
PORTA|=(1<<PINA2);
    2f38:	12 9a       	sbi	0x02, 2	; 2
PORTA&=~(1<<PINA0);
    2f3a:	10 98       	cbi	0x02, 0	; 2

}
    2f3c:	08 95       	ret

00002f3e <touch_init_advance>:
}

void touch_init_advance(void){
//DDRA=0x00;
//ADMUX= 0b01100000; //single ended ADC0
ddd=0;
    2f3e:	10 92 6f 0a 	sts	0x0A6F, r1
    2f42:	10 92 6e 0a 	sts	0x0A6E, r1
private_touch_point.y=0;
    2f46:	10 92 74 0a 	sts	0x0A74, r1
    2f4a:	10 92 73 0a 	sts	0x0A73, r1
private_touch_point.x=0;
    2f4e:	10 92 72 0a 	sts	0x0A72, r1
    2f52:	10 92 71 0a 	sts	0x0A71, r1
ADMUX= 0b00100000; //single ended ADC0
    2f56:	80 e2       	ldi	r24, 0x20	; 32
    2f58:	80 93 7c 00 	sts	0x007C, r24

ADCSRA=0b10000000; //enable 
    2f5c:	ea e7       	ldi	r30, 0x7A	; 122
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 e8       	ldi	r24, 0x80	; 128
    2f62:	80 83       	st	Z, r24


   ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
    2f64:	80 81       	ld	r24, Z
    2f66:	88 60       	ori	r24, 0x08	; 8
    2f68:	80 83       	st	Z, r24
   sei();   // Enable Global Interrupts
    2f6a:	78 94       	sei

	//read from eeprom
	load_eeprom_touch();
    2f6c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <load_eeprom_touch>



   TOUCH_STATE=TOUCH_STATE_WAITING;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	80 93 64 0a 	sts	0x0A64, r24
   set_y_reading();
    2f76:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <set_y_reading>
   //sei();   // Enable Global Interrupts 


}
void start_reading_with_interrupt(){
	ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
    2f7a:	ea e7       	ldi	r30, 0x7A	; 122
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	88 60       	ori	r24, 0x08	; 8
    2f82:	80 83       	st	Z, r24
	ADCSRA|=0b01000000; //start next
    2f84:	80 81       	ld	r24, Z
    2f86:	80 64       	ori	r24, 0x40	; 64
    2f88:	80 83       	st	Z, r24

   TOUCH_STATE=TOUCH_STATE_WAITING;
   set_y_reading();
  	start_reading_with_interrupt();

}
    2f8a:	08 95       	ret

00002f8c <set_x_reading>:
PORTA&=~(1<<PINA0);

}

void set_x_reading(){
ADCSRA=0x00;
    2f8c:	ea e7       	ldi	r30, 0x7A	; 122
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	10 82       	st	Z, r1
DDRA=0xFF; //Allt ut
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	81 b9       	out	0x01, r24	; 1
PORTA=0x00; //GND
    2f96:	12 b8       	out	0x02, r1	; 2
DDRA=0x00; //Allt in
    2f98:	11 b8       	out	0x01, r1	; 1
PORTA=0x00; //varför?
    2f9a:	12 b8       	out	0x02, r1	; 2
ADMUX= 0b00100000; //single ended ADC1
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	80 93 7c 00 	sts	0x007C, r24
ADCSRA=0b10000000; //enable 
    2fa2:	80 e8       	ldi	r24, 0x80	; 128
    2fa4:	80 83       	st	Z, r24
//ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
//Sätt rätt ut och in
DDRA|=(1<<DDA1)|(1<<DDA3);
    2fa6:	81 b1       	in	r24, 0x01	; 1
    2fa8:	8a 60       	ori	r24, 0x0A	; 10
    2faa:	81 b9       	out	0x01, r24	; 1
//PORTA|=(1<<PINA0);
//PORTA&=~(1<<PINA2);
PORTA|=(1<<PINA3);
    2fac:	13 9a       	sbi	0x02, 3	; 2
PORTA&=~(1<<PINA1);
    2fae:	11 98       	cbi	0x02, 1	; 2
}
    2fb0:	08 95       	ret

00002fb2 <__vector_24>:
unsigned char TOUCH_READING;

Point private_touch_point;

ISR(ADC_vect)
{
    2fb2:	1f 92       	push	r1
    2fb4:	0f 92       	push	r0
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	0f 92       	push	r0
    2fba:	0b b6       	in	r0, 0x3b	; 59
    2fbc:	0f 92       	push	r0
    2fbe:	11 24       	eor	r1, r1
    2fc0:	2f 93       	push	r18
    2fc2:	3f 93       	push	r19
    2fc4:	4f 93       	push	r20
    2fc6:	5f 93       	push	r21
    2fc8:	6f 93       	push	r22
    2fca:	7f 93       	push	r23
    2fcc:	8f 93       	push	r24
    2fce:	9f 93       	push	r25
    2fd0:	af 93       	push	r26
    2fd2:	bf 93       	push	r27
    2fd4:	ef 93       	push	r30
    2fd6:	ff 93       	push	r31

int value=ADCH;
    2fd8:	80 91 79 00 	lds	r24, 0x0079
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
if (TOUCH_READING){//Read y
    2fe0:	80 91 70 0a 	lds	r24, 0x0A70
    2fe4:	88 23       	and	r24, r24
    2fe6:	11 f1       	breq	.+68     	; 0x302c <__vector_24+0x7a>
if (value<=35){//Stopt pressing
    2fe8:	24 32       	cpi	r18, 0x24	; 36
    2fea:	31 05       	cpc	r19, r1
    2fec:	64 f4       	brge	.+24     	; 0x3006 <__vector_24+0x54>
private_touch_point.y=0;
    2fee:	10 92 74 0a 	sts	0x0A74, r1
    2ff2:	10 92 73 0a 	sts	0x0A73, r1
private_touch_point.x=0;
    2ff6:	10 92 72 0a 	sts	0x0A72, r1
    2ffa:	10 92 71 0a 	sts	0x0A71, r1
private_touch_point.down_count=0;
    2ffe:	10 92 75 0a 	sts	0x0A75, r1
//private_touch_point.action=ACTION_NONE;
//TOUCH_STATE=5;
//start_reading_with_interrupt();
////////////start_reading_with_interrupt();
TOUCH_STATE=TOUCH_STATE_WAITING;
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	27 c0       	rjmp	.+78     	; 0x3054 <__vector_24+0xa2>
return;
}

private_touch_point.y=value;
    3006:	30 93 74 0a 	sts	0x0A74, r19
    300a:	20 93 73 0a 	sts	0x0A73, r18
set_x_reading();
    300e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <set_x_reading>
TOUCH_READING=0;
    3012:	10 92 70 0a 	sts	0x0A70, r1
   //sei();   // Enable Global Interrupts 


}
void start_reading_with_interrupt(){
	ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
    3016:	80 91 7a 00 	lds	r24, 0x007A
    301a:	88 60       	ori	r24, 0x08	; 8
    301c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA|=0b01000000; //start next
    3020:	80 91 7a 00 	lds	r24, 0x007A
    3024:	80 64       	ori	r24, 0x40	; 64
    3026:	80 93 7a 00 	sts	0x007A, r24
    302a:	16 c0       	rjmp	.+44     	; 0x3058 <__vector_24+0xa6>
TOUCH_READING=0;
start_reading_with_interrupt();
////////////start_reading_with_interrupt();

}else {// Read x
private_touch_point.x=value;
    302c:	30 93 72 0a 	sts	0x0A72, r19
    3030:	20 93 71 0a 	sts	0x0A71, r18
private_touch_point.down_count++;
    3034:	80 91 75 0a 	lds	r24, 0x0A75
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	80 93 75 0a 	sts	0x0A75, r24
if (private_touch_point.down_count>250){
    303e:	8b 3f       	cpi	r24, 0xFB	; 251
    3040:	18 f0       	brcs	.+6      	; 0x3048 <__vector_24+0x96>
private_touch_point.down_count=100;
    3042:	84 e6       	ldi	r24, 0x64	; 100
    3044:	80 93 75 0a 	sts	0x0A75, r24
}
//private_touch_point.action=ACTION_DOWN;
TOUCH_READING=1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	80 93 70 0a 	sts	0x0A70, r24
set_y_reading();
    304e:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <set_y_reading>
TOUCH_STATE=TOUCH_STATE_PRESSED;
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	80 93 64 0a 	sts	0x0A64, r24
//TOUCH_STATE=5;
}
////////////start_reading_with_interrupt();
}
    3058:	ff 91       	pop	r31
    305a:	ef 91       	pop	r30
    305c:	bf 91       	pop	r27
    305e:	af 91       	pop	r26
    3060:	9f 91       	pop	r25
    3062:	8f 91       	pop	r24
    3064:	7f 91       	pop	r23
    3066:	6f 91       	pop	r22
    3068:	5f 91       	pop	r21
    306a:	4f 91       	pop	r20
    306c:	3f 91       	pop	r19
    306e:	2f 91       	pop	r18
    3070:	0f 90       	pop	r0
    3072:	0b be       	out	0x3b, r0	; 59
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <get_touch_x>:
//PORTA&=~(1<<PINA2);
PORTA|=(1<<PINA2);
PORTA&=~(1<<PINA0);
*/

set_x_reading();
    307e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <set_x_reading>
ADCSRA|=0b01000000; //start 
    3082:	ea e7       	ldi	r30, 0x7A	; 122
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 64       	ori	r24, 0x40	; 64
    308a:	80 83       	st	Z, r24

while ((ADCSRA&ADSC)>>ADSC != 0){}
    308c:	e0 81       	ld	r30, Z

return ADCH;
    308e:	80 91 79 00 	lds	r24, 0x0079
}
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	08 95       	ret

00003096 <start_adc_check>:


void start_adc_check(){


}
    3096:	08 95       	ret

00003098 <get_touch_y>:
DDRA|=(1<<DDA1)|(1<<DDA3);
PORTA|=(1<<PINA3);
PORTA&=~(1<<PINA1);

*/
set_y_reading();
    3098:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <set_y_reading>
ADCSRA|=0b01000000; //start 
    309c:	ea e7       	ldi	r30, 0x7A	; 122
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	80 64       	ori	r24, 0x40	; 64
    30a4:	80 83       	st	Z, r24

while ((ADCSRA&ADSC)>>ADSC != 0){}
    30a6:	e0 81       	ld	r30, Z

return ADCH;
    30a8:	80 91 79 00 	lds	r24, 0x0079
}
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	08 95       	ret

000030b0 <eeprom_read>:


}

unsigned char eeprom_read(unsigned int adress){
while (EECR & (1<<EEPE)){} //Wait if already writing
    30b0:	f9 99       	sbic	0x1f, 1	; 31
    30b2:	fe cf       	rjmp	.-4      	; 0x30b0 <eeprom_read>
EEAR=adress;
    30b4:	92 bd       	out	0x22, r25	; 34
    30b6:	81 bd       	out	0x21, r24	; 33
EECR|=(1<<EERE);
    30b8:	f8 9a       	sbi	0x1f, 0	; 31
return EEDR;
    30ba:	80 b5       	in	r24, 0x20	; 32
}
    30bc:	08 95       	ret

000030be <eeprom_write>:

void eeprom_write(unsigned int adress,unsigned char data){
while (EECR & (1<<EEPE)){} //Wait if already writing
    30be:	f9 99       	sbic	0x1f, 1	; 31
    30c0:	fe cf       	rjmp	.-4      	; 0x30be <eeprom_write>
EEAR=adress;
    30c2:	92 bd       	out	0x22, r25	; 34
    30c4:	81 bd       	out	0x21, r24	; 33
EEDR=data;
    30c6:	60 bd       	out	0x20, r22	; 32
EECR|=(1<<EEMPE);
    30c8:	fa 9a       	sbi	0x1f, 2	; 31
EECR|=(1<<EEPE);
    30ca:	f9 9a       	sbi	0x1f, 1	; 31

}
    30cc:	08 95       	ret

000030ce <calibrate_touch>:




//Calibrate
void calibrate_touch(LCD_engine *lcd){
    30ce:	2f 92       	push	r2
    30d0:	3f 92       	push	r3
    30d2:	4f 92       	push	r4
    30d4:	5f 92       	push	r5
    30d6:	6f 92       	push	r6
    30d8:	7f 92       	push	r7
    30da:	8f 92       	push	r8
    30dc:	9f 92       	push	r9
    30de:	af 92       	push	r10
    30e0:	bf 92       	push	r11
    30e2:	cf 92       	push	r12
    30e4:	df 92       	push	r13
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	60 97       	sbiw	r28, 0x10	; 16
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	3c 01       	movw	r6, r24
//touch_init();
//get_touch_x();
LCD_CLR();
    3104:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
setDubbelbuffer(lcd,1);
    3108:	c3 01       	movw	r24, r6
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
LCD_RAM_CLR(lcd);
    3110:	c3 01       	movw	r24, r6
    3112:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
//LCD_RAM_CLR();
DOGENABLE;
    3116:	2c 98       	cbi	0x05, 4	; 5
//int D_x=0;
//int D_y=0;
char count=0;
char down=0;
//draw_cross(lcd,50,30);
LCD_setPage(2);
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(22);rprintfStr("x");
    311e:	86 e1       	ldi	r24, 0x16	; 22
    3120:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    3124:	88 e7       	ldi	r24, 0x78	; 120
    3126:	98 e0       	ldi	r25, 0x08	; 8
    3128:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
ADCSRA|=0b01000000; //start 
    312c:	80 91 7a 00 	lds	r24, 0x007A
    3130:	80 64       	ori	r24, 0x40	; 64
    3132:	80 93 7a 00 	sts	0x007A, r24
    3136:	ee 24       	eor	r14, r14
    3138:	ff 24       	eor	r15, r15
    313a:	1e 86       	std	Y+14, r1	; 0x0e
    313c:	1d 86       	std	Y+13, r1	; 0x0d
    313e:	1c 86       	std	Y+12, r1	; 0x0c
    3140:	1b 86       	std	Y+11, r1	; 0x0b
    3142:	1a 86       	std	Y+10, r1	; 0x0a
    3144:	19 86       	std	Y+9, r1	; 0x09
    3146:	18 86       	std	Y+8, r1	; 0x08
    3148:	cc 24       	eor	r12, r12
    314a:	dd 24       	eor	r13, r13
    314c:	1f 82       	std	Y+7, r1	; 0x07
    314e:	1e 82       	std	Y+6, r1	; 0x06
    3150:	1d 82       	std	Y+5, r1	; 0x05
    3152:	1c 82       	std	Y+4, r1	; 0x04
    3154:	1b 82       	std	Y+3, r1	; 0x03
    3156:	1a 82       	std	Y+2, r1	; 0x02
    3158:	19 82       	std	Y+1, r1	; 0x01
while (1){

if (START_isPressedAndRel()){
    315a:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    315e:	88 23       	and	r24, r24
    3160:	09 f0       	breq	.+2      	; 0x3164 <calibrate_touch+0x96>
    3162:	6f c1       	rjmp	.+734    	; 0x3442 <calibrate_touch+0x374>
//set_y_reading();
//start_reading_with_interrupt();
//while (TOUCH_STATE!=5){}
Point P;

P.y=private_touch_point.y;
    3164:	40 90 73 0a 	lds	r4, 0x0A73
    3168:	50 90 74 0a 	lds	r5, 0x0A74
P.x=private_touch_point.x;
    316c:	20 90 71 0a 	lds	r2, 0x0A71
    3170:	30 90 72 0a 	lds	r3, 0x0A72
P.down_count=private_touch_point.down_count;
    3174:	10 91 75 0a 	lds	r17, 0x0A75
LCD_setColumn(0);rprintfStr("k_y");rprintfInt(k_y*10);rprintfStr("m_y");rprintfInt(m_y*10);
LCD_setPage(7);
LCD_setColumn(0);
rprintfStr(" k_x");rprintfInt(k_x*10);rprintfStr("m_x");rprintfInt(m_x*10);
*/
LCD_setPage(0);LCD_setColumn(0);rprintfInt(p.down_count);
    3178:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    3182:	81 2f       	mov	r24, r17
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
LCD_setColumn(90);rprintfStr("c:");rprintfInt(count);rprintfStr("  ");
    318a:	8a e5       	ldi	r24, 0x5A	; 90
    318c:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    3190:	8a e7       	ldi	r24, 0x7A	; 122
    3192:	98 e0       	ldi	r25, 0x08	; 8
    3194:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
    31a0:	8d e7       	ldi	r24, 0x7D	; 125
    31a2:	98 e0       	ldi	r25, 0x08	; 8
    31a4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
if (p.down_count>0){//PRESSED
    31a8:	11 23       	and	r17, r17
    31aa:	09 f4       	brne	.+2      	; 0x31ae <calibrate_touch+0xe0>
    31ac:	f8 c0       	rjmp	.+496    	; 0x339e <calibrate_touch+0x2d0>
if (down==5){
    31ae:	29 81       	ldd	r18, Y+1	; 0x01
    31b0:	25 30       	cpi	r18, 0x05	; 5
    31b2:	31 f0       	breq	.+12     	; 0x31c0 <calibrate_touch+0xf2>
    31b4:	57 01       	movw	r10, r14
    31b6:	8e 84       	ldd	r8, Y+14	; 0x0e
    31b8:	d8 8a       	std	Y+16, r13	; 0x10
    31ba:	cf 86       	std	Y+15, r12	; 0x0f
    31bc:	9f 80       	ldd	r9, Y+7	; 0x07
    31be:	84 c0       	rjmp	.+264    	; 0x32c8 <calibrate_touch+0x1fa>


	if (count==0){
    31c0:	3a 81       	ldd	r19, Y+2	; 0x02
    31c2:	33 23       	and	r19, r19
    31c4:	f1 f4       	brne	.+60     	; 0x3202 <calibrate_touch+0x134>
x_0=p.x;
y_0=p.y;
LCD_setPage(2);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(22);rprintfStr(" ");
    31cc:	86 e1       	ldi	r24, 0x16	; 22
    31ce:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    31d2:	80 e8       	ldi	r24, 0x80	; 128
    31d4:	98 e0       	ldi	r25, 0x08	; 8
    31d6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
LCD_setPage(5);
    31da:	85 e0       	ldi	r24, 0x05	; 5
    31dc:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(52);rprintfStr("x");
    31e0:	84 e3       	ldi	r24, 0x34	; 52
    31e2:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    31e6:	88 e7       	ldi	r24, 0x78	; 120
    31e8:	98 e0       	ldi	r25, 0x08	; 8
    31ea:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    31ee:	57 01       	movw	r10, r14
    31f0:	8e 84       	ldd	r8, Y+14	; 0x0e
    31f2:	d8 8a       	std	Y+16, r13	; 0x10
    31f4:	cf 86       	std	Y+15, r12	; 0x0f
    31f6:	9f 80       	ldd	r9, Y+7	; 0x07
    31f8:	3d 86       	std	Y+13, r3	; 0x0d
    31fa:	2c 86       	std	Y+12, r2	; 0x0c
    31fc:	5c 82       	std	Y+4, r5	; 0x04
    31fe:	4b 82       	std	Y+3, r4	; 0x03
    3200:	60 c0       	rjmp	.+192    	; 0x32c2 <calibrate_touch+0x1f4>


}
if (count==1){
    3202:	4a 81       	ldd	r20, Y+2	; 0x02
    3204:	41 30       	cpi	r20, 0x01	; 1
    3206:	31 f0       	breq	.+12     	; 0x3214 <calibrate_touch+0x146>
    3208:	57 01       	movw	r10, r14
    320a:	8e 84       	ldd	r8, Y+14	; 0x0e
    320c:	d8 8a       	std	Y+16, r13	; 0x10
    320e:	cf 86       	std	Y+15, r12	; 0x0f
    3210:	9f 80       	ldd	r9, Y+7	; 0x07
    3212:	57 c0       	rjmp	.+174    	; 0x32c2 <calibrate_touch+0x1f4>
//k_x=-30/(double)(x_0-p.x);

diff_x=x_0-p.x;
    3214:	5c 85       	ldd	r21, Y+12	; 0x0c
    3216:	52 19       	sub	r21, r2
    3218:	5e 83       	std	Y+6, r21	; 0x06
diff_y=y_0-p.y;
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	84 19       	sub	r24, r4
    321e:	8d 83       	std	Y+5, r24	; 0x05

//k_x=-3000/(x_0-p.x);
k_x=-3000/(diff_x);
    3220:	88 e4       	ldi	r24, 0x48	; 72
    3222:	94 ef       	ldi	r25, 0xF4	; 244
    3224:	65 2f       	mov	r22, r21
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    322c:	5b 01       	movw	r10, r22
m_x=25-(k_x*x_0)/100;
    322e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3230:	bd 85       	ldd	r27, Y+13	; 0x0d
    3232:	6a 9f       	mul	r22, r26
    3234:	c0 01       	movw	r24, r0
    3236:	6b 9f       	mul	r22, r27
    3238:	90 0d       	add	r25, r0
    323a:	7a 9f       	mul	r23, r26
    323c:	90 0d       	add	r25, r0
    323e:	11 24       	eor	r1, r1
    3240:	6c e9       	ldi	r22, 0x9C	; 156
    3242:	7f ef       	ldi	r23, 0xFF	; 255
    3244:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3248:	86 2e       	mov	r8, r22
    324a:	b9 e1       	ldi	r27, 0x19	; 25
    324c:	8b 0e       	add	r8, r27

//k_y=-2400/(y_0-p.y);
k_y=-2400/(diff_y);
    324e:	80 ea       	ldi	r24, 0xA0	; 160
    3250:	96 ef       	ldi	r25, 0xF6	; 246
    3252:	6d 81       	ldd	r22, Y+5	; 0x05
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    325a:	78 8b       	std	Y+16, r23	; 0x10
    325c:	6f 87       	std	Y+15, r22	; 0x0f
m_y=21-(k_y*y_0)/100;
    325e:	2b 81       	ldd	r18, Y+3	; 0x03
    3260:	3c 81       	ldd	r19, Y+4	; 0x04
    3262:	62 9f       	mul	r22, r18
    3264:	c0 01       	movw	r24, r0
    3266:	63 9f       	mul	r22, r19
    3268:	90 0d       	add	r25, r0
    326a:	72 9f       	mul	r23, r18
    326c:	90 0d       	add	r25, r0
    326e:	11 24       	eor	r1, r1
    3270:	6c e9       	ldi	r22, 0x9C	; 156
    3272:	7f ef       	ldi	r23, 0xFF	; 255
    3274:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3278:	96 2e       	mov	r9, r22
    327a:	35 e1       	ldi	r19, 0x15	; 21
    327c:	93 0e       	add	r9, r19
//int D_x=x_0-p.x;
//int D_y=y_0-p.y;

eeprom_write(11,diff_x);//
    327e:	8b e0       	ldi	r24, 0x0B	; 11
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	6e 81       	ldd	r22, Y+6	; 0x06
    3284:	0e 94 5f 18 	call	0x30be	; 0x30be <eeprom_write>
eeprom_write(12,m_x);//
    3288:	8c e0       	ldi	r24, 0x0C	; 12
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	68 2d       	mov	r22, r8
    328e:	0e 94 5f 18 	call	0x30be	; 0x30be <eeprom_write>
eeprom_write(13,diff_y);//
    3292:	8d e0       	ldi	r24, 0x0D	; 13
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	6d 81       	ldd	r22, Y+5	; 0x05
    3298:	0e 94 5f 18 	call	0x30be	; 0x30be <eeprom_write>
eeprom_write(14,m_y);//
    329c:	8e e0       	ldi	r24, 0x0E	; 14
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	69 2d       	mov	r22, r9
    32a2:	0e 94 5f 18 	call	0x30be	; 0x30be <eeprom_write>
//eeprom_write(17,(unsigned int)((m_y)>>4));//(m_x), first 4 bits
//eeprom_write(18,(unsigned int)((m_y)&0x0F));//(m_x), last 4 bits



TC.k_y=k_y;
    32a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    32a8:	58 89       	ldd	r21, Y+16	; 0x10
    32aa:	50 93 6b 0a 	sts	0x0A6B, r21
    32ae:	40 93 6a 0a 	sts	0x0A6A, r20
TC.k_x=k_x;
    32b2:	b0 92 68 0a 	sts	0x0A68, r11
    32b6:	a0 92 67 0a 	sts	0x0A67, r10
TC.m_x=m_x;
    32ba:	80 92 69 0a 	sts	0x0A69, r8
TC.m_y=m_y;
    32be:	90 92 6c 0a 	sts	0x0A6C, r9
}
	
	


count++;
    32c2:	5a 81       	ldd	r21, Y+2	; 0x02
    32c4:	5f 5f       	subi	r21, 0xFF	; 255
    32c6:	5a 83       	std	Y+2, r21	; 0x02


}

down++;
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	8f 5f       	subi	r24, 0xFF	; 255
    32cc:	89 83       	std	Y+1, r24	; 0x01
if (down>5 && k_x!=0){
    32ce:	86 30       	cpi	r24, 0x06	; 6
    32d0:	08 f4       	brcc	.+2      	; 0x32d4 <calibrate_touch+0x206>
    32d2:	54 c0       	rjmp	.+168    	; 0x337c <calibrate_touch+0x2ae>
    32d4:	a1 14       	cp	r10, r1
    32d6:	b1 04       	cpc	r11, r1
    32d8:	09 f4       	brne	.+2      	; 0x32dc <calibrate_touch+0x20e>
    32da:	50 c0       	rjmp	.+160    	; 0x337c <calibrate_touch+0x2ae>
if (START_isPressedAndRel()){
		break;
		}
p=getRawTouch();
//y=get_touch_y();
Y=(p.y*k_y)/100+m_y;
    32dc:	c4 9c       	mul	r12, r4
    32de:	c0 01       	movw	r24, r0
    32e0:	c5 9c       	mul	r12, r5
    32e2:	90 0d       	add	r25, r0
    32e4:	d4 9c       	mul	r13, r4
    32e6:	90 0d       	add	r25, r0
    32e8:	11 24       	eor	r1, r1
    32ea:	64 e6       	ldi	r22, 0x64	; 100
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    32f2:	6b 01       	movw	r12, r22
    32f4:	9f 81       	ldd	r25, Y+7	; 0x07
    32f6:	c9 0e       	add	r12, r25
    32f8:	d1 1c       	adc	r13, r1
//x=get_touch_x();
//X=p.x*k_x+m_x;
X=(p.x*k_x)/100+m_x;
    32fa:	e2 9c       	mul	r14, r2
    32fc:	c0 01       	movw	r24, r0
    32fe:	e3 9c       	mul	r14, r3
    3300:	90 0d       	add	r25, r0
    3302:	f2 9c       	mul	r15, r2
    3304:	90 0d       	add	r25, r0
    3306:	11 24       	eor	r1, r1
    3308:	64 e6       	ldi	r22, 0x64	; 100
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3310:	7b 01       	movw	r14, r22
    3312:	ae 85       	ldd	r26, Y+14	; 0x0e
    3314:	ea 0e       	add	r14, r26
    3316:	f1 1c       	adc	r15, r1

}

down++;
if (down>5 && k_x!=0){
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    3318:	c3 01       	movw	r24, r6
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
LCD_drawLine(lcd,0,old_Y,127,old_Y);
    3320:	c3 01       	movw	r24, r6
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	48 85       	ldd	r20, Y+8	; 0x08
    3328:	59 85       	ldd	r21, Y+9	; 0x09
    332a:	2f e7       	ldi	r18, 0x7F	; 127
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	8a 01       	movw	r16, r20
    3330:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,old_X,0,old_X,63);
    3334:	c3 01       	movw	r24, r6
    3336:	6a 85       	ldd	r22, Y+10	; 0x0a
    3338:	7b 85       	ldd	r23, Y+11	; 0x0b
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	9b 01       	movw	r18, r22
    3340:	0f e3       	ldi	r16, 0x3F	; 63
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    3348:	c3 01       	movw	r24, r6
    334a:	61 e0       	ldi	r22, 0x01	; 1
    334c:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
LCD_drawLine(lcd,0,Y,127,Y);
    3350:	c3 01       	movw	r24, r6
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	a6 01       	movw	r20, r12
    3358:	2f e7       	ldi	r18, 0x7F	; 127
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	86 01       	movw	r16, r12
    335e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,X,0,X,63);
    3362:	c3 01       	movw	r24, r6
    3364:	b7 01       	movw	r22, r14
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	97 01       	movw	r18, r14
    336c:	0f e3       	ldi	r16, 0x3F	; 63
    336e:	10 e0       	ldi	r17, 0x00	; 0
    3370:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    3374:	fb 86       	std	Y+11, r15	; 0x0b
    3376:	ea 86       	std	Y+10, r14	; 0x0a
    3378:	d9 86       	std	Y+9, r13	; 0x09
    337a:	c8 86       	std	Y+8, r12	; 0x08
old_Y=Y;
old_X=X;
}

if (down>10)
    337c:	b9 81       	ldd	r27, Y+1	; 0x01
    337e:	bb 30       	cpi	r27, 0x0B	; 11
    3380:	40 f0       	brcs	.+16     	; 0x3392 <calibrate_touch+0x2c4>
    3382:	75 01       	movw	r14, r10
    3384:	8e 86       	std	Y+14, r8	; 0x0e
    3386:	cf 84       	ldd	r12, Y+15	; 0x0f
    3388:	d8 88       	ldd	r13, Y+16	; 0x10
    338a:	9f 82       	std	Y+7, r9	; 0x07
    338c:	ea e0       	ldi	r30, 0x0A	; 10
    338e:	e9 83       	std	Y+1, r30	; 0x01
    3390:	22 c0       	rjmp	.+68     	; 0x33d6 <calibrate_touch+0x308>
    3392:	75 01       	movw	r14, r10
    3394:	8e 86       	std	Y+14, r8	; 0x0e
    3396:	cf 84       	ldd	r12, Y+15	; 0x0f
    3398:	d8 88       	ldd	r13, Y+16	; 0x10
    339a:	9f 82       	std	Y+7, r9	; 0x07
    339c:	1c c0       	rjmp	.+56     	; 0x33d6 <calibrate_touch+0x308>
	down=10;
}else {

if (k_x!=0){
    339e:	e1 14       	cp	r14, r1
    33a0:	f1 04       	cpc	r15, r1
    33a2:	c1 f0       	breq	.+48     	; 0x33d4 <calibrate_touch+0x306>
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    33a4:	c3 01       	movw	r24, r6
    33a6:	60 e0       	ldi	r22, 0x00	; 0
    33a8:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
LCD_drawLine(lcd,0,old_Y,127,old_Y);
    33ac:	c3 01       	movw	r24, r6
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	48 85       	ldd	r20, Y+8	; 0x08
    33b4:	59 85       	ldd	r21, Y+9	; 0x09
    33b6:	2f e7       	ldi	r18, 0x7F	; 127
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	8a 01       	movw	r16, r20
    33bc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,old_X,0,old_X,63);
    33c0:	c3 01       	movw	r24, r6
    33c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    33c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	9b 01       	movw	r18, r22
    33cc:	0f e3       	ldi	r16, 0x3F	; 63
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    33d4:	19 82       	std	Y+1, r1	; 0x01
	}
down=0;
}

if (A_isPressed()){
    33d6:	0e 94 cc 10 	call	0x2198	; 0x2198 <A_isPressed>
    33da:	88 23       	and	r24, r24
    33dc:	71 f1       	breq	.+92     	; 0x343a <calibrate_touch+0x36c>
LCD_setPage(2);
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);rprintfStr("diff_x:");rprintfInt(diff_x);
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    33ea:	82 e8       	ldi	r24, 0x82	; 130
    33ec:	98 e0       	ldi	r25, 0x08	; 8
    33ee:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    33f2:	8e 81       	ldd	r24, Y+6	; 0x06
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
rprintfStr(" m_x:");rprintfInt(TC.m_x);
    33fa:	8a e8       	ldi	r24, 0x8A	; 138
    33fc:	98 e0       	ldi	r25, 0x08	; 8
    33fe:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    3402:	80 91 69 0a 	lds	r24, 0x0A69
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
LCD_setPage(3);
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);rprintfStr("diff_y:");rprintfInt(diff_y);
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
    3418:	80 e9       	ldi	r24, 0x90	; 144
    341a:	98 e0       	ldi	r25, 0x08	; 8
    341c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
rprintfStr(" m_y:");rprintfInt(TC.m_y);
    3428:	88 e9       	ldi	r24, 0x98	; 152
    342a:	98 e0       	ldi	r25, 0x08	; 8
    342c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    3430:	80 91 6c 0a 	lds	r24, 0x0A6C
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>

}
pushRAM(lcd);
    343a:	c3 01       	movw	r24, r6
    343c:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
    3440:	8c ce       	rjmp	.-744    	; 0x315a <calibrate_touch+0x8c>
//	}
}



}
    3442:	60 96       	adiw	r28, 0x10	; 16
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	7f 90       	pop	r7
    3468:	6f 90       	pop	r6
    346a:	5f 90       	pop	r5
    346c:	4f 90       	pop	r4
    346e:	3f 90       	pop	r3
    3470:	2f 90       	pop	r2
    3472:	08 95       	ret

00003474 <length>:
#include "buttons.h"

int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
    3474:	fc 01       	movw	r30, r24
int l=0;
if (!str) return -1;
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	19 f4       	brne	.+6      	; 0x3480 <length+0xc>
    347a:	2f ef       	ldi	r18, 0xFF	; 255
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	09 c0       	rjmp	.+18     	; 0x3492 <length+0x1e>
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	03 c0       	rjmp	.+6      	; 0x348c <length+0x18>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3486:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3488:	2f 5f       	subi	r18, 0xFF	; 255
    348a:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    348c:	80 81       	ld	r24, Z
    348e:	88 23       	and	r24, r24
    3490:	d1 f7       	brne	.-12     	; 0x3486 <length+0x12>
			*str++;
		l++;
	}
	return l;
}
    3492:	c9 01       	movw	r24, r18
    3494:	08 95       	ret

00003496 <addMenyButtons>:

void addMenyButtons(ButtonsMeny *BM, MenyButton **newMenyButton){



}
    3496:	08 95       	ret

00003498 <addMenyButton>:

void addMenyButton(ButtonsMeny *BM, MenyButton *newMenyButton){
    3498:	dc 01       	movw	r26, r24
    349a:	fb 01       	movw	r30, r22
//MenyButton
if (BM->RootButton==0){
    349c:	8d 91       	ld	r24, X+
    349e:	9c 91       	ld	r25, X
    34a0:	11 97       	sbiw	r26, 0x01	; 1
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	19 f4       	brne	.+6      	; 0x34ac <addMenyButton+0x14>
//if (BM->number_of_buttons==0){
newMenyButton->next=0;
    34a6:	16 86       	std	Z+14, r1	; 0x0e
    34a8:	15 86       	std	Z+13, r1	; 0x0d
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <addMenyButton+0x18>
BM->RootButton=newMenyButton;
}else {
newMenyButton->next=BM->RootButton;
    34ac:	96 87       	std	Z+14, r25	; 0x0e
    34ae:	85 87       	std	Z+13, r24	; 0x0d
BM->RootButton=newMenyButton;
    34b0:	ed 93       	st	X+, r30
    34b2:	fc 93       	st	X, r31
    34b4:	08 95       	ret

000034b6 <insideButton>:
//printfInt(lcd,length(button->text),button->x+2,button->y+20);

}


char insideButton(Button *button,int x,int y){
    34b6:	fc 01       	movw	r30, r24

return (button->x<x && button->x+button->w>x && button->y<y && button->y+button->h>y );
    34b8:	20 81       	ld	r18, Z
    34ba:	31 81       	ldd	r19, Z+1	; 0x01
    34bc:	26 17       	cp	r18, r22
    34be:	37 07       	cpc	r19, r23
    34c0:	cc f4       	brge	.+50     	; 0x34f4 <insideButton+0x3e>
    34c2:	84 81       	ldd	r24, Z+4	; 0x04
    34c4:	95 81       	ldd	r25, Z+5	; 0x05
    34c6:	28 0f       	add	r18, r24
    34c8:	39 1f       	adc	r19, r25
    34ca:	62 17       	cp	r22, r18
    34cc:	73 07       	cpc	r23, r19
    34ce:	94 f4       	brge	.+36     	; 0x34f4 <insideButton+0x3e>
    34d0:	22 81       	ldd	r18, Z+2	; 0x02
    34d2:	33 81       	ldd	r19, Z+3	; 0x03
    34d4:	24 17       	cp	r18, r20
    34d6:	35 07       	cpc	r19, r21
    34d8:	6c f4       	brge	.+26     	; 0x34f4 <insideButton+0x3e>
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	86 81       	ldd	r24, Z+6	; 0x06
    34de:	97 81       	ldd	r25, Z+7	; 0x07
    34e0:	28 0f       	add	r18, r24
    34e2:	39 1f       	adc	r19, r25
    34e4:	42 17       	cp	r20, r18
    34e6:	53 07       	cpc	r21, r19
    34e8:	0c f0       	brlt	.+2      	; 0x34ec <insideButton+0x36>
    34ea:	61 e0       	ldi	r22, 0x01	; 1
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	68 27       	eor	r22, r24
    34f0:	86 2f       	mov	r24, r22
    34f2:	08 95       	ret
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
}
    34f8:	08 95       	ret

000034fa <insideMenyButton>:

char insideMenyButton(MenyButton *button,int x,int y){
    34fa:	fc 01       	movw	r30, r24

return (button->x<x && button->x+button->w>x && button->y<y && button->y+button->h>y );
    34fc:	20 81       	ld	r18, Z
    34fe:	31 81       	ldd	r19, Z+1	; 0x01
    3500:	26 17       	cp	r18, r22
    3502:	37 07       	cpc	r19, r23
    3504:	cc f4       	brge	.+50     	; 0x3538 <insideMenyButton+0x3e>
    3506:	84 81       	ldd	r24, Z+4	; 0x04
    3508:	95 81       	ldd	r25, Z+5	; 0x05
    350a:	28 0f       	add	r18, r24
    350c:	39 1f       	adc	r19, r25
    350e:	62 17       	cp	r22, r18
    3510:	73 07       	cpc	r23, r19
    3512:	94 f4       	brge	.+36     	; 0x3538 <insideMenyButton+0x3e>
    3514:	22 81       	ldd	r18, Z+2	; 0x02
    3516:	33 81       	ldd	r19, Z+3	; 0x03
    3518:	24 17       	cp	r18, r20
    351a:	35 07       	cpc	r19, r21
    351c:	6c f4       	brge	.+26     	; 0x3538 <insideMenyButton+0x3e>
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	86 81       	ldd	r24, Z+6	; 0x06
    3522:	97 81       	ldd	r25, Z+7	; 0x07
    3524:	28 0f       	add	r18, r24
    3526:	39 1f       	adc	r19, r25
    3528:	42 17       	cp	r20, r18
    352a:	53 07       	cpc	r21, r19
    352c:	0c f0       	brlt	.+2      	; 0x3530 <insideMenyButton+0x36>
    352e:	61 e0       	ldi	r22, 0x01	; 1
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	68 27       	eor	r22, r24
    3534:	86 2f       	mov	r24, r22
    3536:	08 95       	ret
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
}
    353c:	08 95       	ret

0000353e <makeButton>:




//Meny
MenyButton makeButton(char *text,int id){
    353e:	fc 01       	movw	r30, r24
MB.h=0;
MB.id=id;
MB.down=0;
MB.next=0;
MB.text_pos=0;
return MB;
    3540:	14 86       	std	Z+12, r1	; 0x0c
    3542:	16 86       	std	Z+14, r1	; 0x0e
    3544:	15 86       	std	Z+13, r1	; 0x0d
    3546:	12 86       	std	Z+10, r1	; 0x0a
    3548:	43 87       	std	Z+11, r20	; 0x0b
    354a:	17 82       	std	Z+7, r1	; 0x07
    354c:	16 82       	std	Z+6, r1	; 0x06
    354e:	15 82       	std	Z+5, r1	; 0x05
    3550:	14 82       	std	Z+4, r1	; 0x04
    3552:	13 82       	std	Z+3, r1	; 0x03
    3554:	12 82       	std	Z+2, r1	; 0x02
    3556:	11 82       	std	Z+1, r1	; 0x01
    3558:	10 82       	st	Z, r1
    355a:	71 87       	std	Z+9, r23	; 0x09
    355c:	60 87       	std	Z+8, r22	; 0x08
}
    355e:	08 95       	ret

00003560 <creatButton>:

MenyButton creatButton(char *text,int id,int x,int y,int w, int h){
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	fc 01       	movw	r30, r24
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3572:	61 15       	cp	r22, r1
    3574:	71 05       	cpc	r23, r1
    3576:	19 f4       	brne	.+6      	; 0x357e <creatButton+0x1e>
    3578:	af ef       	ldi	r26, 0xFF	; 255
    357a:	bf ef       	ldi	r27, 0xFF	; 255
    357c:	09 c0       	rjmp	.+18     	; 0x3590 <creatButton+0x30>
    357e:	eb 01       	movw	r28, r22
    3580:	a0 e0       	ldi	r26, 0x00	; 0
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	02 c0       	rjmp	.+4      	; 0x358a <creatButton+0x2a>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3586:	21 96       	adiw	r28, 0x01	; 1
		l++;
    3588:	11 96       	adiw	r26, 0x01	; 1

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    358a:	88 81       	ld	r24, Y
    358c:	88 23       	and	r24, r24
    358e:	d9 f7       	brne	.-10     	; 0x3586 <creatButton+0x26>
MB.h=h;
MB.id=id;
MB.down=0;
MB.next=0;
MB.text_pos=length(MB.text)*6/2;
return MB;
    3590:	cd 01       	movw	r24, r26
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	8a 0f       	add	r24, r26
    3598:	9b 1f       	adc	r25, r27
    359a:	84 87       	std	Z+12, r24	; 0x0c
    359c:	16 86       	std	Z+14, r1	; 0x0e
    359e:	15 86       	std	Z+13, r1	; 0x0d
    35a0:	12 86       	std	Z+10, r1	; 0x0a
    35a2:	43 87       	std	Z+11, r20	; 0x0b
    35a4:	d7 82       	std	Z+7, r13	; 0x07
    35a6:	c6 82       	std	Z+6, r12	; 0x06
    35a8:	f5 82       	std	Z+5, r15	; 0x05
    35aa:	e4 82       	std	Z+4, r14	; 0x04
    35ac:	13 83       	std	Z+3, r17	; 0x03
    35ae:	02 83       	std	Z+2, r16	; 0x02
    35b0:	31 83       	std	Z+1, r19	; 0x01
    35b2:	20 83       	st	Z, r18
    35b4:	71 87       	std	Z+9, r23	; 0x09
    35b6:	60 87       	std	Z+8, r22	; 0x08
}
    35b8:	cf 01       	movw	r24, r30
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	08 95       	ret

000035cc <drawButton>:
//printfInt(lcd,length(button->text),button->x+2,button->y+20);

}


void drawButton(LCD_engine *lcd,Button *button){
    35cc:	8f 92       	push	r8
    35ce:	9f 92       	push	r9
    35d0:	af 92       	push	r10
    35d2:	bf 92       	push	r11
    35d4:	cf 92       	push	r12
    35d6:	df 92       	push	r13
    35d8:	ef 92       	push	r14
    35da:	ff 92       	push	r15
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	6c 01       	movw	r12, r24
    35e6:	eb 01       	movw	r28, r22

if (button->down){
    35e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ea:	88 23       	and	r24, r24
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <drawButton+0x24>
    35ee:	9e c0       	rjmp	.+316    	; 0x372c <drawButton+0x160>
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    35f0:	c6 01       	movw	r24, r12
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
    35f8:	68 81       	ld	r22, Y
    35fa:	79 81       	ldd	r23, Y+1	; 0x01
    35fc:	4a 81       	ldd	r20, Y+2	; 0x02
    35fe:	5b 81       	ldd	r21, Y+3	; 0x03
    3600:	2c 81       	ldd	r18, Y+4	; 0x04
    3602:	3d 81       	ldd	r19, Y+5	; 0x05
    3604:	21 50       	subi	r18, 0x01	; 1
    3606:	30 40       	sbci	r19, 0x00	; 0
    3608:	0e 81       	ldd	r16, Y+6	; 0x06
    360a:	1f 81       	ldd	r17, Y+7	; 0x07
    360c:	01 50       	subi	r16, 0x01	; 1
    360e:	10 40       	sbci	r17, 0x00	; 0
    3610:	c6 01       	movw	r24, r12
    3612:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
//LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4,length(button->text)*6,8);
    3616:	88 80       	ld	r8, Y
    3618:	99 80       	ldd	r9, Y+1	; 0x01
    361a:	4c 81       	ldd	r20, Y+4	; 0x04
    361c:	5d 81       	ldd	r21, Y+5	; 0x05
    361e:	a8 85       	ldd	r26, Y+8	; 0x08
    3620:	b9 85       	ldd	r27, Y+9	; 0x09
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3622:	10 97       	sbiw	r26, 0x00	; 0
    3624:	19 f4       	brne	.+6      	; 0x362c <drawButton+0x60>
    3626:	2f ef       	ldi	r18, 0xFF	; 255
    3628:	3f ef       	ldi	r19, 0xFF	; 255
    362a:	0a c0       	rjmp	.+20     	; 0x3640 <drawButton+0x74>
    362c:	fd 01       	movw	r30, r26
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	03 c0       	rjmp	.+6      	; 0x363a <drawButton+0x6e>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3634:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3636:	2f 5f       	subi	r18, 0xFF	; 255
    3638:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    363a:	80 81       	ld	r24, Z
    363c:	88 23       	and	r24, r24
    363e:	d1 f7       	brne	.-12     	; 0x3634 <drawButton+0x68>

if (button->down){
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
//LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4,length(button->text)*6,8);
    3640:	ea 80       	ldd	r14, Y+2	; 0x02
    3642:	fb 80       	ldd	r15, Y+3	; 0x03
    3644:	ae 80       	ldd	r10, Y+6	; 0x06
    3646:	bf 80       	ldd	r11, Y+7	; 0x07
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3648:	10 97       	sbiw	r26, 0x00	; 0
    364a:	19 f4       	brne	.+6      	; 0x3652 <drawButton+0x86>
    364c:	0f ef       	ldi	r16, 0xFF	; 255
    364e:	1f ef       	ldi	r17, 0xFF	; 255
    3650:	09 c0       	rjmp	.+18     	; 0x3664 <drawButton+0x98>
    3652:	00 e0       	ldi	r16, 0x00	; 0
    3654:	10 e0       	ldi	r17, 0x00	; 0
    3656:	03 c0       	rjmp	.+6      	; 0x365e <drawButton+0x92>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3658:	11 96       	adiw	r26, 0x01	; 1
		l++;
    365a:	0f 5f       	subi	r16, 0xFF	; 255
    365c:	1f 4f       	sbci	r17, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    365e:	8c 91       	ld	r24, X
    3660:	88 23       	and	r24, r24
    3662:	d1 f7       	brne	.-12     	; 0x3658 <drawButton+0x8c>

if (button->down){
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
//LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4,length(button->text)*6,8);
    3664:	ca 01       	movw	r24, r20
    3666:	62 e0       	ldi	r22, 0x02	; 2
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    366e:	fb 01       	movw	r30, r22
    3670:	e8 0d       	add	r30, r8
    3672:	f9 1d       	adc	r31, r9
    3674:	c9 01       	movw	r24, r18
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	82 0f       	add	r24, r18
    367c:	93 1f       	adc	r25, r19
    367e:	e8 1b       	sub	r30, r24
    3680:	f9 0b       	sbc	r31, r25
    3682:	8c ef       	ldi	r24, 0xFC	; 252
    3684:	9f ef       	ldi	r25, 0xFF	; 255
    3686:	e8 0e       	add	r14, r24
    3688:	f9 1e       	adc	r15, r25
    368a:	c5 01       	movw	r24, r10
    368c:	62 e0       	ldi	r22, 0x02	; 2
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3694:	e6 0e       	add	r14, r22
    3696:	f7 1e       	adc	r15, r23
    3698:	98 01       	movw	r18, r16
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	20 0f       	add	r18, r16
    36a0:	31 1f       	adc	r19, r17
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	c6 01       	movw	r24, r12
    36a8:	bf 01       	movw	r22, r30
    36aa:	a7 01       	movw	r20, r14
    36ac:	08 e0       	ldi	r16, 0x08	; 8
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    36b0:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>

pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    36b4:	c6 01       	movw	r24, r12
    36b6:	61 e0       	ldi	r22, 0x01	; 1
    36b8:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
    36bc:	68 81       	ld	r22, Y
    36be:	79 81       	ldd	r23, Y+1	; 0x01
    36c0:	6f 5f       	subi	r22, 0xFF	; 255
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255
    36c4:	4a 81       	ldd	r20, Y+2	; 0x02
    36c6:	5b 81       	ldd	r21, Y+3	; 0x03
    36c8:	4f 5f       	subi	r20, 0xFF	; 255
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	2c 81       	ldd	r18, Y+4	; 0x04
    36ce:	3d 81       	ldd	r19, Y+5	; 0x05
    36d0:	21 50       	subi	r18, 0x01	; 1
    36d2:	30 40       	sbci	r19, 0x00	; 0
    36d4:	0e 81       	ldd	r16, Y+6	; 0x06
    36d6:	1f 81       	ldd	r17, Y+7	; 0x07
    36d8:	01 50       	subi	r16, 0x01	; 1
    36da:	10 40       	sbci	r17, 0x00	; 0
    36dc:	c6 01       	movw	r24, r12
    36de:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4+1);
    36e2:	48 81       	ld	r20, Y
    36e4:	6c 81       	ldd	r22, Y+4	; 0x04
    36e6:	7d 81       	ldd	r23, Y+5	; 0x05
    36e8:	08 85       	ldd	r16, Y+8	; 0x08
    36ea:	19 85       	ldd	r17, Y+9	; 0x09
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    36ec:	01 15       	cp	r16, r1
    36ee:	11 05       	cpc	r17, r1
    36f0:	19 f4       	brne	.+6      	; 0x36f8 <drawButton+0x12c>
    36f2:	2f ef       	ldi	r18, 0xFF	; 255
    36f4:	3f ef       	ldi	r19, 0xFF	; 255
    36f6:	0a c0       	rjmp	.+20     	; 0x370c <drawButton+0x140>
    36f8:	f8 01       	movw	r30, r16
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	03 c0       	rjmp	.+6      	; 0x3706 <drawButton+0x13a>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3700:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3702:	2f 5f       	subi	r18, 0xFF	; 255
    3704:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    3706:	80 81       	ld	r24, Z
    3708:	88 23       	and	r24, r24
    370a:	d1 f7       	brne	.-12     	; 0x3700 <drawButton+0x134>
//LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4,length(button->text)*6,8);

pixelSetOrClearOrInvert(lcd,SET_PIXELS);
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4+1);
    370c:	4f 5f       	subi	r20, 0xFF	; 255
    370e:	cb 01       	movw	r24, r22
    3710:	62 e0       	ldi	r22, 0x02	; 2
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3718:	46 0f       	add	r20, r22
    371a:	c9 01       	movw	r24, r18
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	48 1b       	sub	r20, r24
    3726:	2a 81       	ldd	r18, Y+2	; 0x02
    3728:	23 50       	subi	r18, 0x03	; 3
    372a:	c1 c0       	rjmp	.+386    	; 0x38ae <drawButton+0x2e2>
}else {
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    372c:	c6 01       	movw	r24, r12
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
    3734:	68 81       	ld	r22, Y
    3736:	79 81       	ldd	r23, Y+1	; 0x01
    3738:	6f 5f       	subi	r22, 0xFF	; 255
    373a:	7f 4f       	sbci	r23, 0xFF	; 255
    373c:	4a 81       	ldd	r20, Y+2	; 0x02
    373e:	5b 81       	ldd	r21, Y+3	; 0x03
    3740:	4f 5f       	subi	r20, 0xFF	; 255
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	2c 81       	ldd	r18, Y+4	; 0x04
    3746:	3d 81       	ldd	r19, Y+5	; 0x05
    3748:	21 50       	subi	r18, 0x01	; 1
    374a:	30 40       	sbci	r19, 0x00	; 0
    374c:	0e 81       	ldd	r16, Y+6	; 0x06
    374e:	1f 81       	ldd	r17, Y+7	; 0x07
    3750:	01 50       	subi	r16, 0x01	; 1
    3752:	10 40       	sbci	r17, 0x00	; 0
    3754:	c6 01       	movw	r24, r12
    3756:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4,length(button->text)*6,8);
    375a:	08 81       	ld	r16, Y
    375c:	19 81       	ldd	r17, Y+1	; 0x01
    375e:	4c 81       	ldd	r20, Y+4	; 0x04
    3760:	5d 81       	ldd	r21, Y+5	; 0x05
    3762:	a8 85       	ldd	r26, Y+8	; 0x08
    3764:	b9 85       	ldd	r27, Y+9	; 0x09
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3766:	10 97       	sbiw	r26, 0x00	; 0
    3768:	19 f4       	brne	.+6      	; 0x3770 <drawButton+0x1a4>
    376a:	2f ef       	ldi	r18, 0xFF	; 255
    376c:	3f ef       	ldi	r19, 0xFF	; 255
    376e:	0a c0       	rjmp	.+20     	; 0x3784 <drawButton+0x1b8>
    3770:	fd 01       	movw	r30, r26
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	03 c0       	rjmp	.+6      	; 0x377e <drawButton+0x1b2>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3778:	31 96       	adiw	r30, 0x01	; 1
		l++;
    377a:	2f 5f       	subi	r18, 0xFF	; 255
    377c:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    377e:	80 81       	ld	r24, Z
    3780:	88 23       	and	r24, r24
    3782:	d1 f7       	brne	.-12     	; 0x3778 <drawButton+0x1ac>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4+1);
}else {
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4,length(button->text)*6,8);
    3784:	ea 80       	ldd	r14, Y+2	; 0x02
    3786:	fb 80       	ldd	r15, Y+3	; 0x03
    3788:	ae 80       	ldd	r10, Y+6	; 0x06
    378a:	bf 80       	ldd	r11, Y+7	; 0x07
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    378c:	10 97       	sbiw	r26, 0x00	; 0
    378e:	19 f4       	brne	.+6      	; 0x3796 <drawButton+0x1ca>
    3790:	ef ef       	ldi	r30, 0xFF	; 255
    3792:	ff ef       	ldi	r31, 0xFF	; 255
    3794:	08 c0       	rjmp	.+16     	; 0x37a6 <drawButton+0x1da>
    3796:	e0 e0       	ldi	r30, 0x00	; 0
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <drawButton+0x1d4>
	// check the string until a null-terminator
	while (*str){
			*str++;
    379c:	11 96       	adiw	r26, 0x01	; 1
		l++;
    379e:	31 96       	adiw	r30, 0x01	; 1

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    37a0:	8c 91       	ld	r24, X
    37a2:	88 23       	and	r24, r24
    37a4:	d9 f7       	brne	.-10     	; 0x379c <drawButton+0x1d0>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4+1);
}else {
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
fillRect(lcd,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4,length(button->text)*6,8);
    37a6:	0f 5f       	subi	r16, 0xFF	; 255
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
    37aa:	ca 01       	movw	r24, r20
    37ac:	62 e0       	ldi	r22, 0x02	; 2
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    37b4:	06 0f       	add	r16, r22
    37b6:	17 1f       	adc	r17, r23
    37b8:	c9 01       	movw	r24, r18
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19
    37c2:	08 1b       	sub	r16, r24
    37c4:	19 0b       	sbc	r17, r25
    37c6:	8c ef       	ldi	r24, 0xFC	; 252
    37c8:	9f ef       	ldi	r25, 0xFF	; 255
    37ca:	e8 0e       	add	r14, r24
    37cc:	f9 1e       	adc	r15, r25
    37ce:	c5 01       	movw	r24, r10
    37d0:	62 e0       	ldi	r22, 0x02	; 2
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    37d8:	e6 0e       	add	r14, r22
    37da:	f7 1e       	adc	r15, r23
    37dc:	9f 01       	movw	r18, r30
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	2e 0f       	add	r18, r30
    37e4:	3f 1f       	adc	r19, r31
    37e6:	22 0f       	add	r18, r18
    37e8:	33 1f       	adc	r19, r19
    37ea:	c6 01       	movw	r24, r12
    37ec:	b8 01       	movw	r22, r16
    37ee:	a7 01       	movw	r20, r14
    37f0:	08 e0       	ldi	r16, 0x08	; 8
    37f2:	10 e0       	ldi	r17, 0x00	; 0
    37f4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>

pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    37f8:	c6 01       	movw	r24, r12
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
    3800:	68 81       	ld	r22, Y
    3802:	79 81       	ldd	r23, Y+1	; 0x01
    3804:	4a 81       	ldd	r20, Y+2	; 0x02
    3806:	5b 81       	ldd	r21, Y+3	; 0x03
    3808:	2c 81       	ldd	r18, Y+4	; 0x04
    380a:	3d 81       	ldd	r19, Y+5	; 0x05
    380c:	21 50       	subi	r18, 0x01	; 1
    380e:	30 40       	sbci	r19, 0x00	; 0
    3810:	0e 81       	ldd	r16, Y+6	; 0x06
    3812:	1f 81       	ldd	r17, Y+7	; 0x07
    3814:	01 50       	subi	r16, 0x01	; 1
    3816:	10 40       	sbci	r17, 0x00	; 0
    3818:	c6 01       	movw	r24, r12
    381a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
    381e:	68 81       	ld	r22, Y
    3820:	79 81       	ldd	r23, Y+1	; 0x01
    3822:	0e 81       	ldd	r16, Y+6	; 0x06
    3824:	1f 81       	ldd	r17, Y+7	; 0x07
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	08 0f       	add	r16, r24
    382c:	19 1f       	adc	r17, r25
    382e:	2c 81       	ldd	r18, Y+4	; 0x04
    3830:	3d 81       	ldd	r19, Y+5	; 0x05
    3832:	26 0f       	add	r18, r22
    3834:	37 1f       	adc	r19, r23
    3836:	c6 01       	movw	r24, r12
    3838:	6f 5f       	subi	r22, 0xFF	; 255
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	a8 01       	movw	r20, r16
    383e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,button->x+button->w,button->y+1,button->x+button->w,button->y+button->h);
    3842:	4a 81       	ldd	r20, Y+2	; 0x02
    3844:	5b 81       	ldd	r21, Y+3	; 0x03
    3846:	2c 81       	ldd	r18, Y+4	; 0x04
    3848:	3d 81       	ldd	r19, Y+5	; 0x05
    384a:	88 81       	ld	r24, Y
    384c:	99 81       	ldd	r25, Y+1	; 0x01
    384e:	28 0f       	add	r18, r24
    3850:	39 1f       	adc	r19, r25
    3852:	0e 81       	ldd	r16, Y+6	; 0x06
    3854:	1f 81       	ldd	r17, Y+7	; 0x07
    3856:	04 0f       	add	r16, r20
    3858:	15 1f       	adc	r17, r21
    385a:	c6 01       	movw	r24, r12
    385c:	b9 01       	movw	r22, r18
    385e:	4f 5f       	subi	r20, 0xFF	; 255
    3860:	5f 4f       	sbci	r21, 0xFF	; 255
    3862:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4);
    3866:	f8 80       	ld	r15, Y
    3868:	4c 81       	ldd	r20, Y+4	; 0x04
    386a:	5d 81       	ldd	r21, Y+5	; 0x05
    386c:	08 85       	ldd	r16, Y+8	; 0x08
    386e:	19 85       	ldd	r17, Y+9	; 0x09
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3870:	01 15       	cp	r16, r1
    3872:	11 05       	cpc	r17, r1
    3874:	19 f4       	brne	.+6      	; 0x387c <drawButton+0x2b0>
    3876:	2f ef       	ldi	r18, 0xFF	; 255
    3878:	3f ef       	ldi	r19, 0xFF	; 255
    387a:	0a c0       	rjmp	.+20     	; 0x3890 <drawButton+0x2c4>
    387c:	f8 01       	movw	r30, r16
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	03 c0       	rjmp	.+6      	; 0x388a <drawButton+0x2be>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3884:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3886:	2f 5f       	subi	r18, 0xFF	; 255
    3888:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    388a:	80 81       	ld	r24, Z
    388c:	88 23       	and	r24, r24
    388e:	d1 f7       	brne	.-12     	; 0x3884 <drawButton+0x2b8>

pixelSetOrClearOrInvert(lcd,SET_PIXELS);
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
LCD_drawLine(lcd,button->x+button->w,button->y+1,button->x+button->w,button->y+button->h);
printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4);
    3890:	ca 01       	movw	r24, r20
    3892:	62 e0       	ldi	r22, 0x02	; 2
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    389a:	46 2f       	mov	r20, r22
    389c:	4f 0d       	add	r20, r15
    389e:	c9 01       	movw	r24, r18
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	82 0f       	add	r24, r18
    38a6:	93 1f       	adc	r25, r19
    38a8:	48 1b       	sub	r20, r24
    38aa:	2a 81       	ldd	r18, Y+2	; 0x02
    38ac:	24 50       	subi	r18, 0x04	; 4
    38ae:	8e 81       	ldd	r24, Y+6	; 0x06
    38b0:	9f 81       	ldd	r25, Y+7	; 0x07
    38b2:	62 e0       	ldi	r22, 0x02	; 2
    38b4:	70 e0       	ldi	r23, 0x00	; 0
    38b6:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    38ba:	26 0f       	add	r18, r22
    38bc:	c6 01       	movw	r24, r12
    38be:	b8 01       	movw	r22, r16
    38c0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <printfStr>



//printfInt(lcd,length(button->text),button->x+2,button->y+20);

}
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	ff 90       	pop	r15
    38ce:	ef 90       	pop	r14
    38d0:	df 90       	pop	r13
    38d2:	cf 90       	pop	r12
    38d4:	bf 90       	pop	r11
    38d6:	af 90       	pop	r10
    38d8:	9f 90       	pop	r9
    38da:	8f 90       	pop	r8
    38dc:	08 95       	ret

000038de <drawMenyButton>:
BM->number_of_buttons++;
}
*/


void drawMenyButton(LCD_engine *lcd,MenyButton *button){
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	7c 01       	movw	r14, r24
    38ec:	eb 01       	movw	r28, r22

if (button->down){
    38ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f0:	88 23       	and	r24, r24
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <drawMenyButton+0x18>
    38f4:	5d c0       	rjmp	.+186    	; 0x39b0 <drawMenyButton+0xd2>
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    38f6:	c7 01       	movw	r24, r14
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
    38fe:	68 81       	ld	r22, Y
    3900:	79 81       	ldd	r23, Y+1	; 0x01
    3902:	4a 81       	ldd	r20, Y+2	; 0x02
    3904:	5b 81       	ldd	r21, Y+3	; 0x03
    3906:	2c 81       	ldd	r18, Y+4	; 0x04
    3908:	3d 81       	ldd	r19, Y+5	; 0x05
    390a:	21 50       	subi	r18, 0x01	; 1
    390c:	30 40       	sbci	r19, 0x00	; 0
    390e:	0e 81       	ldd	r16, Y+6	; 0x06
    3910:	1f 81       	ldd	r17, Y+7	; 0x07
    3912:	01 50       	subi	r16, 0x01	; 1
    3914:	10 40       	sbci	r17, 0x00	; 0
    3916:	c7 01       	movw	r24, r14
    3918:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
//LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
//fillRect(lcd,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4,length(button->text)*6,8);
fillRect(lcd,button->x+button->w/2-button->text_pos,button->y+button->h/2-4,button->text_pos*2,8);
    391c:	2c 85       	ldd	r18, Y+12	; 0x0c
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	8c 81       	ldd	r24, Y+4	; 0x04
    3922:	9d 81       	ldd	r25, Y+5	; 0x05
    3924:	62 e0       	ldi	r22, 0x02	; 2
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    392c:	8b 01       	movw	r16, r22
    392e:	88 81       	ld	r24, Y
    3930:	99 81       	ldd	r25, Y+1	; 0x01
    3932:	08 0f       	add	r16, r24
    3934:	19 1f       	adc	r17, r25
    3936:	02 1b       	sub	r16, r18
    3938:	13 0b       	sbc	r17, r19
    393a:	ea 81       	ldd	r30, Y+2	; 0x02
    393c:	fb 81       	ldd	r31, Y+3	; 0x03
    393e:	34 97       	sbiw	r30, 0x04	; 4
    3940:	8e 81       	ldd	r24, Y+6	; 0x06
    3942:	9f 81       	ldd	r25, Y+7	; 0x07
    3944:	62 e0       	ldi	r22, 0x02	; 2
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    394c:	e6 0f       	add	r30, r22
    394e:	f7 1f       	adc	r31, r23
    3950:	22 0f       	add	r18, r18
    3952:	33 1f       	adc	r19, r19
    3954:	c7 01       	movw	r24, r14
    3956:	b8 01       	movw	r22, r16
    3958:	af 01       	movw	r20, r30
    395a:	08 e0       	ldi	r16, 0x08	; 8
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>


pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    3962:	c7 01       	movw	r24, r14
    3964:	61 e0       	ldi	r22, 0x01	; 1
    3966:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
    396a:	68 81       	ld	r22, Y
    396c:	79 81       	ldd	r23, Y+1	; 0x01
    396e:	6f 5f       	subi	r22, 0xFF	; 255
    3970:	7f 4f       	sbci	r23, 0xFF	; 255
    3972:	4a 81       	ldd	r20, Y+2	; 0x02
    3974:	5b 81       	ldd	r21, Y+3	; 0x03
    3976:	4f 5f       	subi	r20, 0xFF	; 255
    3978:	5f 4f       	sbci	r21, 0xFF	; 255
    397a:	2c 81       	ldd	r18, Y+4	; 0x04
    397c:	3d 81       	ldd	r19, Y+5	; 0x05
    397e:	21 50       	subi	r18, 0x01	; 1
    3980:	30 40       	sbci	r19, 0x00	; 0
    3982:	0e 81       	ldd	r16, Y+6	; 0x06
    3984:	1f 81       	ldd	r17, Y+7	; 0x07
    3986:	01 50       	subi	r16, 0x01	; 1
    3988:	10 40       	sbci	r17, 0x00	; 0
    398a:	c7 01       	movw	r24, r14
    398c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
//printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4+1);
printfStr(lcd,button->text,button->x+button->w/2-button->text_pos+1,button->y+button->h/2-4+1);
    3990:	e8 85       	ldd	r30, Y+8	; 0x08
    3992:	f9 85       	ldd	r31, Y+9	; 0x09
    3994:	48 81       	ld	r20, Y
    3996:	8c 85       	ldd	r24, Y+12	; 0x0c
    3998:	48 1b       	sub	r20, r24
    399a:	4f 5f       	subi	r20, 0xFF	; 255
    399c:	8c 81       	ldd	r24, Y+4	; 0x04
    399e:	9d 81       	ldd	r25, Y+5	; 0x05
    39a0:	62 e0       	ldi	r22, 0x02	; 2
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    39a8:	46 0f       	add	r20, r22
    39aa:	2a 81       	ldd	r18, Y+2	; 0x02
    39ac:	23 50       	subi	r18, 0x03	; 3
    39ae:	80 c0       	rjmp	.+256    	; 0x3ab0 <drawMenyButton+0x1d2>
}else {
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    39b0:	c7 01       	movw	r24, r14
    39b2:	60 e0       	ldi	r22, 0x00	; 0
    39b4:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x+1,button->y+1,button->w-1,button->h-1);
    39b8:	68 81       	ld	r22, Y
    39ba:	79 81       	ldd	r23, Y+1	; 0x01
    39bc:	6f 5f       	subi	r22, 0xFF	; 255
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	4a 81       	ldd	r20, Y+2	; 0x02
    39c2:	5b 81       	ldd	r21, Y+3	; 0x03
    39c4:	4f 5f       	subi	r20, 0xFF	; 255
    39c6:	5f 4f       	sbci	r21, 0xFF	; 255
    39c8:	2c 81       	ldd	r18, Y+4	; 0x04
    39ca:	3d 81       	ldd	r19, Y+5	; 0x05
    39cc:	21 50       	subi	r18, 0x01	; 1
    39ce:	30 40       	sbci	r19, 0x00	; 0
    39d0:	0e 81       	ldd	r16, Y+6	; 0x06
    39d2:	1f 81       	ldd	r17, Y+7	; 0x07
    39d4:	01 50       	subi	r16, 0x01	; 1
    39d6:	10 40       	sbci	r17, 0x00	; 0
    39d8:	c7 01       	movw	r24, r14
    39da:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
//fillRect(lcd,button->x+button->w/2-length(button->text)*6/2+1,button->y+button->h/2-4,length(button->text)*6,8);
fillRect(lcd,button->x+button->w/2-button->text_pos+1,button->y+button->h/2-4,button->text_pos*2,8);
    39de:	2c 85       	ldd	r18, Y+12	; 0x0c
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	e8 81       	ld	r30, Y
    39e4:	f9 81       	ldd	r31, Y+1	; 0x01
    39e6:	31 96       	adiw	r30, 0x01	; 1
    39e8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ea:	9d 81       	ldd	r25, Y+5	; 0x05
    39ec:	62 e0       	ldi	r22, 0x02	; 2
    39ee:	70 e0       	ldi	r23, 0x00	; 0
    39f0:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    39f4:	e6 0f       	add	r30, r22
    39f6:	f7 1f       	adc	r31, r23
    39f8:	e2 1b       	sub	r30, r18
    39fa:	f3 0b       	sbc	r31, r19
    39fc:	0a 81       	ldd	r16, Y+2	; 0x02
    39fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3a00:	04 50       	subi	r16, 0x04	; 4
    3a02:	10 40       	sbci	r17, 0x00	; 0
    3a04:	8e 81       	ldd	r24, Y+6	; 0x06
    3a06:	9f 81       	ldd	r25, Y+7	; 0x07
    3a08:	62 e0       	ldi	r22, 0x02	; 2
    3a0a:	70 e0       	ldi	r23, 0x00	; 0
    3a0c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3a10:	06 0f       	add	r16, r22
    3a12:	17 1f       	adc	r17, r23
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	c7 01       	movw	r24, r14
    3a1a:	bf 01       	movw	r22, r30
    3a1c:	a8 01       	movw	r20, r16
    3a1e:	08 e0       	ldi	r16, 0x08	; 8
    3a20:	10 e0       	ldi	r17, 0x00	; 0
    3a22:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>

pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    3a26:	c7 01       	movw	r24, r14
    3a28:	61 e0       	ldi	r22, 0x01	; 1
    3a2a:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,button->x,button->y,button->w-1,button->h-1);
    3a2e:	68 81       	ld	r22, Y
    3a30:	79 81       	ldd	r23, Y+1	; 0x01
    3a32:	4a 81       	ldd	r20, Y+2	; 0x02
    3a34:	5b 81       	ldd	r21, Y+3	; 0x03
    3a36:	2c 81       	ldd	r18, Y+4	; 0x04
    3a38:	3d 81       	ldd	r19, Y+5	; 0x05
    3a3a:	21 50       	subi	r18, 0x01	; 1
    3a3c:	30 40       	sbci	r19, 0x00	; 0
    3a3e:	0e 81       	ldd	r16, Y+6	; 0x06
    3a40:	1f 81       	ldd	r17, Y+7	; 0x07
    3a42:	01 50       	subi	r16, 0x01	; 1
    3a44:	10 40       	sbci	r17, 0x00	; 0
    3a46:	c7 01       	movw	r24, r14
    3a48:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
LCD_drawLine(lcd,button->x+1,button->y+button->h,button->x+button->w,button->y+button->h);
    3a4c:	68 81       	ld	r22, Y
    3a4e:	79 81       	ldd	r23, Y+1	; 0x01
    3a50:	0e 81       	ldd	r16, Y+6	; 0x06
    3a52:	1f 81       	ldd	r17, Y+7	; 0x07
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	9b 81       	ldd	r25, Y+3	; 0x03
    3a58:	08 0f       	add	r16, r24
    3a5a:	19 1f       	adc	r17, r25
    3a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a60:	26 0f       	add	r18, r22
    3a62:	37 1f       	adc	r19, r23
    3a64:	c7 01       	movw	r24, r14
    3a66:	6f 5f       	subi	r22, 0xFF	; 255
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6a:	a8 01       	movw	r20, r16
    3a6c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,button->x+button->w,button->y+1,button->x+button->w,button->y+button->h);
    3a70:	4a 81       	ldd	r20, Y+2	; 0x02
    3a72:	5b 81       	ldd	r21, Y+3	; 0x03
    3a74:	2c 81       	ldd	r18, Y+4	; 0x04
    3a76:	3d 81       	ldd	r19, Y+5	; 0x05
    3a78:	88 81       	ld	r24, Y
    3a7a:	99 81       	ldd	r25, Y+1	; 0x01
    3a7c:	28 0f       	add	r18, r24
    3a7e:	39 1f       	adc	r19, r25
    3a80:	0e 81       	ldd	r16, Y+6	; 0x06
    3a82:	1f 81       	ldd	r17, Y+7	; 0x07
    3a84:	04 0f       	add	r16, r20
    3a86:	15 1f       	adc	r17, r21
    3a88:	c7 01       	movw	r24, r14
    3a8a:	b9 01       	movw	r22, r18
    3a8c:	4f 5f       	subi	r20, 0xFF	; 255
    3a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a90:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
//printfStr(lcd,button->text,button->x+button->w/2-length(button->text)*6/2,button->y+button->h/2-4);
printfStr(lcd,button->text,button->x+button->w/2-button->text_pos,button->y+button->h/2-4);
    3a94:	e8 85       	ldd	r30, Y+8	; 0x08
    3a96:	f9 85       	ldd	r31, Y+9	; 0x09
    3a98:	48 81       	ld	r20, Y
    3a9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a9c:	48 1b       	sub	r20, r24
    3a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	70 e0       	ldi	r23, 0x00	; 0
    3aa6:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3aaa:	46 0f       	add	r20, r22
    3aac:	2a 81       	ldd	r18, Y+2	; 0x02
    3aae:	24 50       	subi	r18, 0x04	; 4
    3ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab4:	62 e0       	ldi	r22, 0x02	; 2
    3ab6:	70 e0       	ldi	r23, 0x00	; 0
    3ab8:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3abc:	26 0f       	add	r18, r22
    3abe:	c7 01       	movw	r24, r14
    3ac0:	bf 01       	movw	r22, r30
    3ac2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <printfStr>



//printfInt(lcd,length(button->text),button->x+2,button->y+20);

}
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	ff 90       	pop	r15
    3ad0:	ef 90       	pop	r14
    3ad2:	08 95       	ret

00003ad4 <Buttons_meny_private>:

return Buttons_meny_private(lcd,BM);
}


int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM){
    3ad4:	2f 92       	push	r2
    3ad6:	3f 92       	push	r3
    3ad8:	4f 92       	push	r4
    3ada:	5f 92       	push	r5
    3adc:	6f 92       	push	r6
    3ade:	7f 92       	push	r7
    3ae0:	8f 92       	push	r8
    3ae2:	9f 92       	push	r9
    3ae4:	af 92       	push	r10
    3ae6:	bf 92       	push	r11
    3ae8:	cf 92       	push	r12
    3aea:	df 92       	push	r13
    3aec:	ef 92       	push	r14
    3aee:	ff 92       	push	r15
    3af0:	0f 93       	push	r16
    3af2:	1f 93       	push	r17
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	69 97       	sbiw	r28, 0x19	; 25
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	3c 01       	movw	r6, r24
    3b0a:	4b 01       	movw	r8, r22
	//LCD_CLR();
	LCD_RAM_CLR(lcd);
    3b0c:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	//resetConnection();
	//setDubbelbuffer(lcd,1);
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    3b10:	c3 01       	movw	r24, r6
    3b12:	61 e0       	ldi	r22, 0x01	; 1
    3b14:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
	Point p;
	Point old_points[3];

	char useTouch=1;
	int activeButton=0;
	MenyButton *button=BM->RootButton;
    3b18:	d4 01       	movw	r26, r8
    3b1a:	ed 91       	ld	r30, X+
    3b1c:	fc 91       	ld	r31, X
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
	char number_of_buttons=0;
	do{
	button->down=0;
    3b20:	12 86       	std	Z+10, r1	; 0x0a
	number_of_buttons++;
    3b22:	1f 5f       	subi	r17, 0xFF	; 255
}while ((button=button->next));
    3b24:	05 84       	ldd	r0, Z+13	; 0x0d
    3b26:	f6 85       	ldd	r31, Z+14	; 0x0e
    3b28:	e0 2d       	mov	r30, r0
    3b2a:	30 97       	sbiw	r30, 0x00	; 0
    3b2c:	c9 f7       	brne	.-14     	; 0x3b20 <Buttons_meny_private+0x4c>



for (int i=0;i<3;i++){
		old_points[i].x=0;
    3b2e:	1f 82       	std	Y+7, r1	; 0x07
    3b30:	1e 82       	std	Y+6, r1	; 0x06
		old_points[i].y=0;
    3b32:	19 86       	std	Y+9, r1	; 0x09
    3b34:	18 86       	std	Y+8, r1	; 0x08
		old_points[i].down_count=0;
    3b36:	1a 86       	std	Y+10, r1	; 0x0a
}while ((button=button->next));



for (int i=0;i<3;i++){
		old_points[i].x=0;
    3b38:	1c 86       	std	Y+12, r1	; 0x0c
    3b3a:	1b 86       	std	Y+11, r1	; 0x0b
		old_points[i].y=0;
    3b3c:	1e 86       	std	Y+14, r1	; 0x0e
    3b3e:	1d 86       	std	Y+13, r1	; 0x0d
}while ((button=button->next));



for (int i=0;i<3;i++){
		old_points[i].x=0;
    3b40:	19 8a       	std	Y+17, r1	; 0x11
    3b42:	18 8a       	std	Y+16, r1	; 0x10
		old_points[i].y=0;
    3b44:	1b 8a       	std	Y+19, r1	; 0x13
    3b46:	1a 8a       	std	Y+18, r1	; 0x12
		old_points[i].down_count=0;
	}

	printfStr(lcd,BM->title,64-length(BM->title)*6/2,1);
    3b48:	f4 01       	movw	r30, r8
    3b4a:	62 81       	ldd	r22, Z+2	; 0x02
    3b4c:	73 81       	ldd	r23, Z+3	; 0x03
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3b4e:	61 15       	cp	r22, r1
    3b50:	71 05       	cpc	r23, r1
    3b52:	19 f4       	brne	.+6      	; 0x3b5a <Buttons_meny_private+0x86>
    3b54:	2f ef       	ldi	r18, 0xFF	; 255
    3b56:	3f ef       	ldi	r19, 0xFF	; 255
    3b58:	0a c0       	rjmp	.+20     	; 0x3b6e <Buttons_meny_private+0x9a>
    3b5a:	fb 01       	movw	r30, r22
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	03 c0       	rjmp	.+6      	; 0x3b68 <Buttons_meny_private+0x94>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3b62:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3b64:	2f 5f       	subi	r18, 0xFF	; 255
    3b66:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    3b68:	80 81       	ld	r24, Z
    3b6a:	88 23       	and	r24, r24
    3b6c:	d1 f7       	brne	.-12     	; 0x3b62 <Buttons_meny_private+0x8e>
		old_points[i].x=0;
		old_points[i].y=0;
		old_points[i].down_count=0;
	}

	printfStr(lcd,BM->title,64-length(BM->title)*6/2,1);
    3b6e:	a9 01       	movw	r20, r18
    3b70:	44 0f       	add	r20, r20
    3b72:	55 1f       	adc	r21, r21
    3b74:	42 0f       	add	r20, r18
    3b76:	53 1f       	adc	r21, r19
    3b78:	50 95       	com	r21
    3b7a:	41 95       	neg	r20
    3b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b7e:	40 5c       	subi	r20, 0xC0	; 192
    3b80:	c3 01       	movw	r24, r6
    3b82:	21 e0       	ldi	r18, 0x01	; 1
    3b84:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <printfStr>
	redrawRAM(lcd);
    3b88:	c3 01       	movw	r24, r6
    3b8a:	0e 94 12 09 	call	0x1224	; 0x1224 <redrawRAM>
    3b8e:	dd 24       	eor	r13, r13
    3b90:	d3 94       	inc	r13
    3b92:	ee 24       	eor	r14, r14
    3b94:	ff 24       	eor	r15, r15

if (UP_isPressedAndRel() || LEFT_isPressedAndRel()){
activeButton--;
if (activeButton<0){

activeButton=number_of_buttons-1;
    3b96:	41 2e       	mov	r4, r17
    3b98:	55 24       	eor	r5, r5
    3b9a:	12 01       	movw	r2, r4
    3b9c:	08 94       	sec
    3b9e:	21 08       	sbc	r2, r1
    3ba0:	31 08       	sbc	r3, r1
	printfStr(lcd,BM->title,64-length(BM->title)*6/2,1);
	redrawRAM(lcd);

while (1){

if  (START_isPressedAndRel()){
    3ba2:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    3ba6:	88 23       	and	r24, r24
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <Buttons_meny_private+0xd8>
    3baa:	e9 c0       	rjmp	.+466    	; 0x3d7e <Buttons_meny_private+0x2aa>
return -1;
}

if (TOUCH_STATE==TOUCH_STATE_PRESSED){
    3bac:	80 91 64 0a 	lds	r24, 0x0A64
    3bb0:	82 30       	cpi	r24, 0x02	; 2
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <Buttons_meny_private+0xe2>
    3bb4:	55 c0       	rjmp	.+170    	; 0x3c60 <Buttons_meny_private+0x18c>
useTouch=1;
p=getTouch();
    3bb6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <getTouch>
    3bba:	2d 8b       	std	Y+21, r18	; 0x15
    3bbc:	3e 8b       	std	Y+22, r19	; 0x16
    3bbe:	4f 8b       	std	Y+23, r20	; 0x17
    3bc0:	58 8f       	std	Y+24, r21	; 0x18
    3bc2:	69 8f       	std	Y+25, r22	; 0x19
    3bc4:	de 01       	movw	r26, r28
    3bc6:	11 96       	adiw	r26, 0x01	; 1
    3bc8:	fe 01       	movw	r30, r28
    3bca:	75 96       	adiw	r30, 0x15	; 21
    3bcc:	85 e0       	ldi	r24, 0x05	; 5
    3bce:	01 90       	ld	r0, Z+
    3bd0:	0d 92       	st	X+, r0
    3bd2:	81 50       	subi	r24, 0x01	; 1
    3bd4:	e1 f7       	brne	.-8      	; 0x3bce <Buttons_meny_private+0xfa>
    3bd6:	2d 81       	ldd	r18, Y+5	; 0x05
if (p.down_count>2){
    3bd8:	23 30       	cpi	r18, 0x03	; 3
    3bda:	c0 f1       	brcs	.+112    	; 0x3c4c <Buttons_meny_private+0x178>
if (p.down_count!=old_points[0].down_count){
    3bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bde:	28 17       	cp	r18, r24
    3be0:	c9 f0       	breq	.+50     	; 0x3c14 <Buttons_meny_private+0x140>
//save old
for (int i=2;i>0;i--){
old_points[i].x=old_points[i-1].x;
    3be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3be6:	99 8b       	std	Y+17, r25	; 0x11
    3be8:	88 8b       	std	Y+16, r24	; 0x10
old_points[i].y=old_points[i-1].y;
    3bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bee:	9b 8b       	std	Y+19, r25	; 0x13
    3bf0:	8a 8b       	std	Y+18, r24	; 0x12
p=getTouch();
if (p.down_count>2){
if (p.down_count!=old_points[0].down_count){
//save old
for (int i=2;i>0;i--){
old_points[i].x=old_points[i-1].x;
    3bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    3bf6:	9c 87       	std	Y+12, r25	; 0x0c
    3bf8:	8b 87       	std	Y+11, r24	; 0x0b
old_points[i].y=old_points[i-1].y;
    3bfa:	88 85       	ldd	r24, Y+8	; 0x08
    3bfc:	99 85       	ldd	r25, Y+9	; 0x09
    3bfe:	9e 87       	std	Y+14, r25	; 0x0e
    3c00:	8d 87       	std	Y+13, r24	; 0x0d
}
old_points[0].x=p.x;
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	9a 81       	ldd	r25, Y+2	; 0x02
    3c06:	9f 83       	std	Y+7, r25	; 0x07
    3c08:	8e 83       	std	Y+6, r24	; 0x06
old_points[0].y=p.y;
    3c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0e:	99 87       	std	Y+9, r25	; 0x09
    3c10:	88 87       	std	Y+8, r24	; 0x08
old_points[0].down_count=p.down_count;
    3c12:	2a 87       	std	Y+10, r18	; 0x0a
}

//LCD_setPage(0);
//LCD_setColumn(0);
//rprintfStr("tuching");
MenyButton *button=BM->RootButton;
    3c14:	d4 01       	movw	r26, r8
    3c16:	0d 91       	ld	r16, X+
    3c18:	1c 91       	ld	r17, X
do{
if (insideMenyButton(button,old_points[1].x,old_points[1].y)){
    3c1a:	ab 84       	ldd	r10, Y+11	; 0x0b
    3c1c:	bc 84       	ldd	r11, Y+12	; 0x0c
    3c1e:	cd 84       	ldd	r12, Y+13	; 0x0d
    3c20:	de 84       	ldd	r13, Y+14	; 0x0e
    3c22:	c8 01       	movw	r24, r16
    3c24:	b5 01       	movw	r22, r10
    3c26:	a6 01       	movw	r20, r12
    3c28:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <insideMenyButton>
    3c2c:	88 23       	and	r24, r24
    3c2e:	21 f0       	breq	.+8      	; 0x3c38 <Buttons_meny_private+0x164>
button->down=1;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	f8 01       	movw	r30, r16
    3c34:	82 87       	std	Z+10, r24	; 0x0a
    3c36:	03 c0       	rjmp	.+6      	; 0x3c3e <Buttons_meny_private+0x16a>
}else{
button->down=0;
    3c38:	d8 01       	movw	r26, r16
    3c3a:	1a 96       	adiw	r26, 0x0a	; 10
    3c3c:	1c 92       	st	X, r1

}
}while ((button=button->next));
    3c3e:	f8 01       	movw	r30, r16
    3c40:	05 85       	ldd	r16, Z+13	; 0x0d
    3c42:	16 85       	ldd	r17, Z+14	; 0x0e
    3c44:	01 15       	cp	r16, r1
    3c46:	11 05       	cpc	r17, r1
    3c48:	61 f7       	brne	.-40     	; 0x3c22 <Buttons_meny_private+0x14e>
    3c4a:	32 c0       	rjmp	.+100    	; 0x3cb0 <Buttons_meny_private+0x1dc>

}else {
MenyButton *button=BM->RootButton;
    3c4c:	d4 01       	movw	r26, r8
    3c4e:	ed 91       	ld	r30, X+
    3c50:	fc 91       	ld	r31, X
	do{

button->down=0;
    3c52:	12 86       	std	Z+10, r1	; 0x0a

}while ((button=button->next));
    3c54:	05 84       	ldd	r0, Z+13	; 0x0d
    3c56:	f6 85       	ldd	r31, Z+14	; 0x0e
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	30 97       	sbiw	r30, 0x00	; 0
    3c5c:	d1 f7       	brne	.-12     	; 0x3c52 <Buttons_meny_private+0x17e>
    3c5e:	28 c0       	rjmp	.+80     	; 0x3cb0 <Buttons_meny_private+0x1dc>

	
	
	}

}else if (useTouch){
    3c60:	dd 20       	and	r13, r13
    3c62:	59 f1       	breq	.+86     	; 0x3cba <Buttons_meny_private+0x1e6>

//}

//LCD_drawPixel(lcd,old_points[2].x,old_points[2].y);

MenyButton *button=BM->RootButton;
    3c64:	f4 01       	movw	r30, r8
    3c66:	00 81       	ld	r16, Z
    3c68:	11 81       	ldd	r17, Z+1	; 0x01
do{
	if (insideMenyButton(button,old_points[2].x,old_points[2].y)){
    3c6a:	a8 88       	ldd	r10, Y+16	; 0x10
    3c6c:	b9 88       	ldd	r11, Y+17	; 0x11
    3c6e:	ca 88       	ldd	r12, Y+18	; 0x12
    3c70:	db 88       	ldd	r13, Y+19	; 0x13
    3c72:	c8 01       	movw	r24, r16
    3c74:	b5 01       	movw	r22, r10
    3c76:	a6 01       	movw	r20, r12
    3c78:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <insideMenyButton>
    3c7c:	88 23       	and	r24, r24
    3c7e:	21 f0       	breq	.+8      	; 0x3c88 <Buttons_meny_private+0x1b4>
		return button->id;
    3c80:	d8 01       	movw	r26, r16
    3c82:	1b 96       	adiw	r26, 0x0b	; 11
    3c84:	8c 91       	ld	r24, X
    3c86:	48 c0       	rjmp	.+144    	; 0x3d18 <Buttons_meny_private+0x244>

		}else {
			button->down=0;
    3c88:	f8 01       	movw	r30, r16
    3c8a:	12 86       	std	Z+10, r1	; 0x0a
		}
	//button->down=0;
}while ((button=button->next));
    3c8c:	05 85       	ldd	r16, Z+13	; 0x0d
    3c8e:	16 85       	ldd	r17, Z+14	; 0x0e
    3c90:	01 15       	cp	r16, r1
    3c92:	11 05       	cpc	r17, r1
    3c94:	71 f7       	brne	.-36     	; 0x3c72 <Buttons_meny_private+0x19e>

for (int i=0;i<3;i++){
		old_points[i].x=0;
    3c96:	1f 82       	std	Y+7, r1	; 0x07
    3c98:	1e 82       	std	Y+6, r1	; 0x06
		old_points[i].y=0;
    3c9a:	19 86       	std	Y+9, r1	; 0x09
    3c9c:	18 86       	std	Y+8, r1	; 0x08
		old_points[i].down_count=0;
    3c9e:	1a 86       	std	Y+10, r1	; 0x0a
		}
	//button->down=0;
}while ((button=button->next));

for (int i=0;i<3;i++){
		old_points[i].x=0;
    3ca0:	1c 86       	std	Y+12, r1	; 0x0c
    3ca2:	1b 86       	std	Y+11, r1	; 0x0b
		old_points[i].y=0;
    3ca4:	1e 86       	std	Y+14, r1	; 0x0e
    3ca6:	1d 86       	std	Y+13, r1	; 0x0d
		}
	//button->down=0;
}while ((button=button->next));

for (int i=0;i<3;i++){
		old_points[i].x=0;
    3ca8:	19 8a       	std	Y+17, r1	; 0x11
    3caa:	18 8a       	std	Y+16, r1	; 0x10
		old_points[i].y=0;
    3cac:	1b 8a       	std	Y+19, r1	; 0x13
    3cae:	1a 8a       	std	Y+18, r1	; 0x12
		old_points[i].down_count=0;
	}

}

if (useTouch && any_isPressed()){
    3cb0:	0e 94 20 11 	call	0x2240	; 0x2240 <any_isPressed>
    3cb4:	88 23       	and	r24, r24
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <Buttons_meny_private+0x1e6>
    3cb8:	4d c0       	rjmp	.+154    	; 0x3d54 <Buttons_meny_private+0x280>
}


if (!useTouch){//Using buttons too navigate

if (UP_isPressedAndRel() || LEFT_isPressedAndRel()){
    3cba:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <UP_isPressedAndRel>
    3cbe:	88 23       	and	r24, r24
    3cc0:	21 f4       	brne	.+8      	; 0x3cca <Buttons_meny_private+0x1f6>
    3cc2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LEFT_isPressedAndRel>
    3cc6:	88 23       	and	r24, r24
    3cc8:	39 f0       	breq	.+14     	; 0x3cd8 <Buttons_meny_private+0x204>
activeButton--;
    3cca:	08 94       	sec
    3ccc:	e1 08       	sbc	r14, r1
    3cce:	f1 08       	sbc	r15, r1
if (activeButton<0){
    3cd0:	f7 fe       	sbrs	r15, 7
    3cd2:	17 c0       	rjmp	.+46     	; 0x3d02 <Buttons_meny_private+0x22e>

activeButton=number_of_buttons-1;
    3cd4:	71 01       	movw	r14, r2
    3cd6:	15 c0       	rjmp	.+42     	; 0x3d02 <Buttons_meny_private+0x22e>

}
}else if (DOWN_isPressedAndRel() || RIGHT_isPressedAndRel()){
    3cd8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <DOWN_isPressedAndRel>
    3cdc:	88 23       	and	r24, r24
    3cde:	21 f4       	brne	.+8      	; 0x3ce8 <Buttons_meny_private+0x214>
    3ce0:	0e 94 00 11 	call	0x2200	; 0x2200 <RIGHT_isPressedAndRel>
    3ce4:	88 23       	and	r24, r24
    3ce6:	39 f0       	breq	.+14     	; 0x3cf6 <Buttons_meny_private+0x222>
activeButton++;
    3ce8:	08 94       	sec
    3cea:	e1 1c       	adc	r14, r1
    3cec:	f1 1c       	adc	r15, r1
if (activeButton>=number_of_buttons){
    3cee:	e4 14       	cp	r14, r4
    3cf0:	f5 04       	cpc	r15, r5
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <Buttons_meny_private+0x22a>
    3cf4:	06 c0       	rjmp	.+12     	; 0x3d02 <Buttons_meny_private+0x22e>

activeButton=0;

}
}else if (B_isPressedAndRel()){
    3cf6:	0e 94 10 11 	call	0x2220	; 0x2220 <B_isPressedAndRel>
    3cfa:	88 23       	and	r24, r24
    3cfc:	11 f0       	breq	.+4      	; 0x3d02 <Buttons_meny_private+0x22e>
    3cfe:	ee 24       	eor	r14, r14
    3d00:	ff 24       	eor	r15, r15
activeButton=0;
}

if (A_isPressedAndRel()){
    3d02:	0e 94 08 11 	call	0x2210	; 0x2210 <A_isPressedAndRel>
    3d06:	88 23       	and	r24, r24
    3d08:	79 f0       	breq	.+30     	; 0x3d28 <Buttons_meny_private+0x254>
MenyButton *button=BM->RootButton;
    3d0a:	d4 01       	movw	r26, r8
    3d0c:	ed 91       	ld	r30, X+
    3d0e:	fc 91       	ld	r31, X
do{
	
		if (button->down){
    3d10:	82 85       	ldd	r24, Z+10	; 0x0a
    3d12:	88 23       	and	r24, r24
    3d14:	21 f0       	breq	.+8      	; 0x3d1e <Buttons_meny_private+0x24a>
			return button->id;
    3d16:	83 85       	ldd	r24, Z+11	; 0x0b
    3d18:	28 2f       	mov	r18, r24
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	32 c0       	rjmp	.+100    	; 0x3d82 <Buttons_meny_private+0x2ae>
		}
	
}while ((button=button->next));
    3d1e:	05 84       	ldd	r0, Z+13	; 0x0d
    3d20:	f6 85       	ldd	r31, Z+14	; 0x0e
    3d22:	e0 2d       	mov	r30, r0
    3d24:	30 97       	sbiw	r30, 0x00	; 0
    3d26:	a1 f7       	brne	.-24     	; 0x3d10 <Buttons_meny_private+0x23c>

}


MenyButton *button=BM->RootButton;
    3d28:	d4 01       	movw	r26, r8
    3d2a:	ed 91       	ld	r30, X+
    3d2c:	fc 91       	ld	r31, X
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
char i=0;
do{
	if (activeButton==i){
    3d30:	82 2f       	mov	r24, r18
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	e8 16       	cp	r14, r24
    3d36:	f9 06       	cpc	r15, r25
    3d38:	19 f4       	brne	.+6      	; 0x3d40 <Buttons_meny_private+0x26c>
		button->down=1;
    3d3a:	b1 e0       	ldi	r27, 0x01	; 1
    3d3c:	b2 87       	std	Z+10, r27	; 0x0a
    3d3e:	01 c0       	rjmp	.+2      	; 0x3d42 <Buttons_meny_private+0x26e>
	}else{
		button->down=0;
    3d40:	12 86       	std	Z+10, r1	; 0x0a
	}
	i++;
}while ((button=button->next));
    3d42:	05 84       	ldd	r0, Z+13	; 0x0d
    3d44:	f6 85       	ldd	r31, Z+14	; 0x0e
    3d46:	e0 2d       	mov	r30, r0
    3d48:	30 97       	sbiw	r30, 0x00	; 0
    3d4a:	11 f4       	brne	.+4      	; 0x3d50 <Buttons_meny_private+0x27c>
    3d4c:	dd 24       	eor	r13, r13
    3d4e:	04 c0       	rjmp	.+8      	; 0x3d58 <Buttons_meny_private+0x284>
	if (activeButton==i){
		button->down=1;
	}else{
		button->down=0;
	}
	i++;
    3d50:	2f 5f       	subi	r18, 0xFF	; 255
    3d52:	ee cf       	rjmp	.-36     	; 0x3d30 <Buttons_meny_private+0x25c>
    3d54:	dd 24       	eor	r13, r13
    3d56:	d3 94       	inc	r13
	
	
	
	}

MenyButton *button=BM->RootButton;
    3d58:	f4 01       	movw	r30, r8
    3d5a:	00 81       	ld	r16, Z
    3d5c:	11 81       	ldd	r17, Z+1	; 0x01
do{
	drawMenyButton(lcd,button);
    3d5e:	c3 01       	movw	r24, r6
    3d60:	b8 01       	movw	r22, r16
    3d62:	0e 94 6f 1c 	call	0x38de	; 0x38de <drawMenyButton>
}while ((button=button->next));
    3d66:	d8 01       	movw	r26, r16
    3d68:	1d 96       	adiw	r26, 0x0d	; 13
    3d6a:	0d 91       	ld	r16, X+
    3d6c:	1c 91       	ld	r17, X
    3d6e:	1e 97       	sbiw	r26, 0x0e	; 14
    3d70:	01 15       	cp	r16, r1
    3d72:	11 05       	cpc	r17, r1
    3d74:	a1 f7       	brne	.-24     	; 0x3d5e <Buttons_meny_private+0x28a>

//LCD_drawPixel(lcd,old_points[2].x,old_points[2].y);
pushRAM(lcd);
    3d76:	c3 01       	movw	r24, r6
    3d78:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
    3d7c:	12 cf       	rjmp	.-476    	; 0x3ba2 <Buttons_meny_private+0xce>
}
    3d7e:	2f ef       	ldi	r18, 0xFF	; 255
    3d80:	3f ef       	ldi	r19, 0xFF	; 255


}
    3d82:	c9 01       	movw	r24, r18
    3d84:	69 96       	adiw	r28, 0x19	; 25
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	cf 91       	pop	r28
    3d92:	df 91       	pop	r29
    3d94:	1f 91       	pop	r17
    3d96:	0f 91       	pop	r16
    3d98:	ff 90       	pop	r15
    3d9a:	ef 90       	pop	r14
    3d9c:	df 90       	pop	r13
    3d9e:	cf 90       	pop	r12
    3da0:	bf 90       	pop	r11
    3da2:	af 90       	pop	r10
    3da4:	9f 90       	pop	r9
    3da6:	8f 90       	pop	r8
    3da8:	7f 90       	pop	r7
    3daa:	6f 90       	pop	r6
    3dac:	5f 90       	pop	r5
    3dae:	4f 90       	pop	r4
    3db0:	3f 90       	pop	r3
    3db2:	2f 90       	pop	r2
    3db4:	08 95       	ret

00003db6 <Buttons_meny>:
MB.text_pos=length(MB.text)*6/2;
return MB;
}


int Buttons_meny(LCD_engine *lcd,ButtonsMeny *BM,int rows){
    3db6:	2f 92       	push	r2
    3db8:	3f 92       	push	r3
    3dba:	4f 92       	push	r4
    3dbc:	5f 92       	push	r5
    3dbe:	6f 92       	push	r6
    3dc0:	7f 92       	push	r7
    3dc2:	8f 92       	push	r8
    3dc4:	9f 92       	push	r9
    3dc6:	af 92       	push	r10
    3dc8:	bf 92       	push	r11
    3dca:	cf 92       	push	r12
    3dcc:	df 92       	push	r13
    3dce:	ef 92       	push	r14
    3dd0:	ff 92       	push	r15
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	00 d0       	rcall	.+0      	; 0x3ddc <Buttons_meny+0x26>
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <Buttons_meny+0x28>
    3dde:	0f 92       	push	r0
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	9a 83       	std	Y+2, r25	; 0x02
    3de6:	89 83       	std	Y+1, r24	; 0x01
    3de8:	2b 01       	movw	r4, r22
    3dea:	5a 01       	movw	r10, r20
}while ((button=button->next));



return Buttons_meny_private(lcd,BM);
}
    3dec:	2d b7       	in	r18, 0x3d	; 61
    3dee:	3e b7       	in	r19, 0x3e	; 62
    3df0:	3c 83       	std	Y+4, r19	; 0x04
    3df2:	2b 83       	std	Y+3, r18	; 0x03
}


int Buttons_meny(LCD_engine *lcd,ButtonsMeny *BM,int rows){

MenyButton *button=BM->RootButton;
    3df4:	db 01       	movw	r26, r22
    3df6:	cd 90       	ld	r12, X+
    3df8:	dc 90       	ld	r13, X
    3dfa:	96 01       	movw	r18, r12
    3dfc:	00 e0       	ldi	r16, 0x00	; 0
    3dfe:	10 e0       	ldi	r17, 0x00	; 0
    3e00:	ee 24       	eor	r14, r14
    3e02:	ff 24       	eor	r15, r15
int maxW=0;
	int number_of_buttons=0;
	do{
	if (length(button->text)>maxW){
    3e04:	f9 01       	movw	r30, r18
    3e06:	a0 85       	ldd	r26, Z+8	; 0x08
    3e08:	b1 85       	ldd	r27, Z+9	; 0x09
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3e0a:	10 97       	sbiw	r26, 0x00	; 0
    3e0c:	b1 f0       	breq	.+44     	; 0x3e3a <Buttons_meny+0x84>
    3e0e:	fd 01       	movw	r30, r26
    3e10:	60 e0       	ldi	r22, 0x00	; 0
    3e12:	70 e0       	ldi	r23, 0x00	; 0
    3e14:	03 c0       	rjmp	.+6      	; 0x3e1c <Buttons_meny+0x66>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3e16:	31 96       	adiw	r30, 0x01	; 1
		l++;
    3e18:	6f 5f       	subi	r22, 0xFF	; 255
    3e1a:	7f 4f       	sbci	r23, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    3e1c:	80 81       	ld	r24, Z
    3e1e:	88 23       	and	r24, r24
    3e20:	d1 f7       	brne	.-12     	; 0x3e16 <Buttons_meny+0x60>

MenyButton *button=BM->RootButton;
int maxW=0;
	int number_of_buttons=0;
	do{
	if (length(button->text)>maxW){
    3e22:	06 17       	cp	r16, r22
    3e24:	17 07       	cpc	r17, r23
    3e26:	4c f4       	brge	.+18     	; 0x3e3a <Buttons_meny+0x84>
    3e28:	00 e0       	ldi	r16, 0x00	; 0
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	03 c0       	rjmp	.+6      	; 0x3e34 <Buttons_meny+0x7e>
int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
			*str++;
    3e2e:	11 96       	adiw	r26, 0x01	; 1
		l++;
    3e30:	0f 5f       	subi	r16, 0xFF	; 255
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    3e34:	8c 91       	ld	r24, X
    3e36:	88 23       	and	r24, r24
    3e38:	d1 f7       	brne	.-12     	; 0x3e2e <Buttons_meny+0x78>
	do{
	if (length(button->text)>maxW){
		maxW=length(button->text);
	}

	number_of_buttons++;
    3e3a:	08 94       	sec
    3e3c:	e1 1c       	adc	r14, r1
    3e3e:	f1 1c       	adc	r15, r1
}while ((button=button->next));
    3e40:	d9 01       	movw	r26, r18
    3e42:	1d 96       	adiw	r26, 0x0d	; 13
    3e44:	2d 91       	ld	r18, X+
    3e46:	3c 91       	ld	r19, X
    3e48:	1e 97       	sbiw	r26, 0x0e	; 14
    3e4a:	21 15       	cp	r18, r1
    3e4c:	31 05       	cpc	r19, r1
    3e4e:	d1 f6       	brne	.-76     	; 0x3e04 <Buttons_meny+0x4e>
maxW=maxW*6+8;
//if (maxW*number_of_buttons>120){//two rows


//}else {
if (rows>number_of_buttons)
    3e50:	ea 14       	cp	r14, r10
    3e52:	fb 04       	cpc	r15, r11
    3e54:	0c f4       	brge	.+2      	; 0x3e58 <Buttons_meny+0xa2>
    3e56:	57 01       	movw	r10, r14
	rows=number_of_buttons;

int rowB[rows];
    3e58:	c5 01       	movw	r24, r10
    3e5a:	88 0f       	add	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	ed b7       	in	r30, 0x3d	; 61
    3e60:	fe b7       	in	r31, 0x3e	; 62
    3e62:	e8 1b       	sub	r30, r24
    3e64:	f9 0b       	sbc	r31, r25
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	fe bf       	out	0x3e, r31	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	ed bf       	out	0x3d, r30	; 61
    3e70:	6d b6       	in	r6, 0x3d	; 61
    3e72:	7e b6       	in	r7, 0x3e	; 62
    3e74:	08 94       	sec
    3e76:	61 1c       	adc	r6, r1
    3e78:	71 1c       	adc	r7, r1
rowB[0]=(number_of_buttons/rows);
    3e7a:	c7 01       	movw	r24, r14
    3e7c:	b5 01       	movw	r22, r10
    3e7e:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3e82:	46 2f       	mov	r20, r22
    3e84:	97 2e       	mov	r9, r23
    3e86:	61 83       	std	Z+1, r22	; 0x01
    3e88:	d3 01       	movw	r26, r6
    3e8a:	11 96       	adiw	r26, 0x01	; 1
    3e8c:	7c 93       	st	X, r23
    3e8e:	83 01       	movw	r16, r6
    3e90:	97 01       	movw	r18, r14
    3e92:	e1 e0       	ldi	r30, 0x01	; 1
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	13 c0       	rjmp	.+38     	; 0x3ebe <Buttons_meny+0x108>
int bLeft=number_of_buttons;
for (int i=1;i<rows;i++){
rowB[i]=((bLeft-rowB[i-1])/(rows-i));
    3e98:	d8 01       	movw	r26, r16
    3e9a:	8d 91       	ld	r24, X+
    3e9c:	9c 91       	ld	r25, X
    3e9e:	28 1b       	sub	r18, r24
    3ea0:	39 0b       	sbc	r19, r25
    3ea2:	b5 01       	movw	r22, r10
    3ea4:	6e 1b       	sub	r22, r30
    3ea6:	7f 0b       	sbc	r23, r31
    3ea8:	c9 01       	movw	r24, r18
    3eaa:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3eae:	d8 01       	movw	r26, r16
    3eb0:	13 96       	adiw	r26, 0x03	; 3
    3eb2:	7c 93       	st	X, r23
    3eb4:	6e 93       	st	-X, r22
    3eb6:	12 97       	sbiw	r26, 0x02	; 2
	rows=number_of_buttons;

int rowB[rows];
rowB[0]=(number_of_buttons/rows);
int bLeft=number_of_buttons;
for (int i=1;i<rows;i++){
    3eb8:	31 96       	adiw	r30, 0x01	; 1
    3eba:	0e 5f       	subi	r16, 0xFE	; 254
    3ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ebe:	ea 15       	cp	r30, r10
    3ec0:	fb 05       	cpc	r31, r11
    3ec2:	54 f3       	brlt	.-44     	; 0x3e98 <Buttons_meny+0xe2>
rowB[i]=((bLeft-rowB[i-1])/(rows-i));
bLeft-=rowB[i-1];
}

maxW=120/(number_of_buttons/rows);
    3ec4:	88 e7       	ldi	r24, 0x78	; 120
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	64 2f       	mov	r22, r20
    3eca:	79 2d       	mov	r23, r9
    3ecc:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3ed0:	fb 01       	movw	r30, r22
//}


int i=0;
int r=0;
int buttons_on_row=rowB[0];
    3ed2:	d3 01       	movw	r26, r6
    3ed4:	8d 90       	ld	r8, X+
    3ed6:	9c 90       	ld	r9, X
do{
button->w=maxW-1;
button->h=50/rows;
    3ed8:	82 e3       	ldi	r24, 0x32	; 50
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	b5 01       	movw	r22, r10
    3ede:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3ee2:	6d 83       	std	Y+5, r22	; 0x05
    3ee4:	47 2f       	mov	r20, r23
    3ee6:	00 e0       	ldi	r16, 0x00	; 0
    3ee8:	10 e0       	ldi	r17, 0x00	; 0
    3eea:	ee 24       	eor	r14, r14
    3eec:	ff 24       	eor	r15, r15
button->x=i*(maxW+1)+(120-maxW*buttons_on_row)/2+3;
button->y=9+r*54/rows;
    3eee:	66 e3       	ldi	r22, 0x36	; 54
    3ef0:	26 2e       	mov	r2, r22
    3ef2:	31 2c       	mov	r3, r1

int i=0;
int r=0;
int buttons_on_row=rowB[0];
do{
button->w=maxW-1;
    3ef4:	31 97       	sbiw	r30, 0x01	; 1
    3ef6:	d6 01       	movw	r26, r12
    3ef8:	15 96       	adiw	r26, 0x05	; 5
    3efa:	fc 93       	st	X, r31
    3efc:	ee 93       	st	-X, r30
    3efe:	14 97       	sbiw	r26, 0x04	; 4
button->h=50/rows;
    3f00:	2d 81       	ldd	r18, Y+5	; 0x05
    3f02:	16 96       	adiw	r26, 0x06	; 6
    3f04:	2c 93       	st	X, r18
    3f06:	16 97       	sbiw	r26, 0x06	; 6
    3f08:	17 96       	adiw	r26, 0x07	; 7
    3f0a:	4c 93       	st	X, r20
button->x=i*(maxW+1)+(120-maxW*buttons_on_row)/2+3;
    3f0c:	32 96       	adiw	r30, 0x02	; 2
    3f0e:	e0 9f       	mul	r30, r16
    3f10:	90 01       	movw	r18, r0
    3f12:	e1 9f       	mul	r30, r17
    3f14:	30 0d       	add	r19, r0
    3f16:	f0 9f       	mul	r31, r16
    3f18:	30 0d       	add	r19, r0
    3f1a:	11 24       	eor	r1, r1
    3f1c:	31 97       	sbiw	r30, 0x01	; 1
    3f1e:	2d 5f       	subi	r18, 0xFD	; 253
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	8e 9e       	mul	r8, r30
    3f24:	c0 01       	movw	r24, r0
    3f26:	8f 9e       	mul	r8, r31
    3f28:	90 0d       	add	r25, r0
    3f2a:	9e 9e       	mul	r9, r30
    3f2c:	90 0d       	add	r25, r0
    3f2e:	11 24       	eor	r1, r1
    3f30:	68 e7       	ldi	r22, 0x78	; 120
    3f32:	70 e0       	ldi	r23, 0x00	; 0
    3f34:	68 1b       	sub	r22, r24
    3f36:	79 0b       	sbc	r23, r25
    3f38:	cb 01       	movw	r24, r22
    3f3a:	62 e0       	ldi	r22, 0x02	; 2
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3f42:	26 0f       	add	r18, r22
    3f44:	37 1f       	adc	r19, r23
    3f46:	d6 01       	movw	r26, r12
    3f48:	2d 93       	st	X+, r18
    3f4a:	3c 93       	st	X, r19
button->y=9+r*54/rows;
    3f4c:	e2 9c       	mul	r14, r2
    3f4e:	c0 01       	movw	r24, r0
    3f50:	e3 9c       	mul	r14, r3
    3f52:	90 0d       	add	r25, r0
    3f54:	f2 9c       	mul	r15, r2
    3f56:	90 0d       	add	r25, r0
    3f58:	11 24       	eor	r1, r1
    3f5a:	b5 01       	movw	r22, r10
    3f5c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3f60:	67 5f       	subi	r22, 0xF7	; 247
    3f62:	7f 4f       	sbci	r23, 0xFF	; 255
    3f64:	d6 01       	movw	r26, r12
    3f66:	13 96       	adiw	r26, 0x03	; 3
    3f68:	7c 93       	st	X, r23
    3f6a:	6e 93       	st	-X, r22
    3f6c:	12 97       	sbiw	r26, 0x02	; 2
button->down=0;
    3f6e:	1a 96       	adiw	r26, 0x0a	; 10
    3f70:	1c 92       	st	X, r1
    3f72:	1a 97       	sbiw	r26, 0x0a	; 10
button->text_pos=length(button->text)*6/2;
    3f74:	18 96       	adiw	r26, 0x08	; 8
    3f76:	6d 91       	ld	r22, X+
    3f78:	7c 91       	ld	r23, X
    3f7a:	19 97       	sbiw	r26, 0x09	; 9
int Buttons_meny_private(LCD_engine *lcd,ButtonsMeny *BM);


int length(char str[]){
int l=0;
if (!str) return -1;
    3f7c:	61 15       	cp	r22, r1
    3f7e:	71 05       	cpc	r23, r1
    3f80:	19 f4       	brne	.+6      	; 0x3f88 <Buttons_meny+0x1d2>
    3f82:	2f ef       	ldi	r18, 0xFF	; 255
    3f84:	3f ef       	ldi	r19, 0xFF	; 255
    3f86:	0b c0       	rjmp	.+22     	; 0x3f9e <Buttons_meny+0x1e8>
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	04 c0       	rjmp	.+8      	; 0x3f96 <Buttons_meny+0x1e0>
	// check the string until a null-terminator
	while (*str){
			*str++;
    3f8e:	6f 5f       	subi	r22, 0xFF	; 255
    3f90:	7f 4f       	sbci	r23, 0xFF	; 255
		l++;
    3f92:	2f 5f       	subi	r18, 0xFF	; 255
    3f94:	3f 4f       	sbci	r19, 0xFF	; 255

int length(char str[]){
int l=0;
if (!str) return -1;
	// check the string until a null-terminator
	while (*str){
    3f96:	db 01       	movw	r26, r22
    3f98:	8c 91       	ld	r24, X
    3f9a:	88 23       	and	r24, r24
    3f9c:	c1 f7       	brne	.-16     	; 0x3f8e <Buttons_meny+0x1d8>
button->w=maxW-1;
button->h=50/rows;
button->x=i*(maxW+1)+(120-maxW*buttons_on_row)/2+3;
button->y=9+r*54/rows;
button->down=0;
button->text_pos=length(button->text)*6/2;
    3f9e:	c9 01       	movw	r24, r18
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	82 0f       	add	r24, r18
    3fa6:	93 1f       	adc	r25, r19
    3fa8:	d6 01       	movw	r26, r12
    3faa:	1c 96       	adiw	r26, 0x0c	; 12
    3fac:	8c 93       	st	X, r24
i++;
    3fae:	0f 5f       	subi	r16, 0xFF	; 255
    3fb0:	1f 4f       	sbci	r17, 0xFF	; 255

if (i>=(buttons_on_row)){
    3fb2:	08 15       	cp	r16, r8
    3fb4:	19 05       	cpc	r17, r9
    3fb6:	94 f0       	brlt	.+36     	; 0x3fdc <Buttons_meny+0x226>
r++;
    3fb8:	08 94       	sec
    3fba:	e1 1c       	adc	r14, r1
    3fbc:	f1 1c       	adc	r15, r1
buttons_on_row=rowB[r];
    3fbe:	f7 01       	movw	r30, r14
    3fc0:	ee 0f       	add	r30, r30
    3fc2:	ff 1f       	adc	r31, r31
    3fc4:	e6 0d       	add	r30, r6
    3fc6:	f7 1d       	adc	r31, r7
    3fc8:	80 80       	ld	r8, Z
    3fca:	91 80       	ldd	r9, Z+1	; 0x01
maxW=120/((buttons_on_row));
    3fcc:	88 e7       	ldi	r24, 0x78	; 120
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	b4 01       	movw	r22, r8
    3fd2:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    3fd6:	fb 01       	movw	r30, r22
    3fd8:	00 e0       	ldi	r16, 0x00	; 0
    3fda:	10 e0       	ldi	r17, 0x00	; 0
i=0;
}
}while ((button=button->next));
    3fdc:	d6 01       	movw	r26, r12
    3fde:	1d 96       	adiw	r26, 0x0d	; 13
    3fe0:	cd 90       	ld	r12, X+
    3fe2:	dc 90       	ld	r13, X
    3fe4:	1e 97       	sbiw	r26, 0x0e	; 14
    3fe6:	c1 14       	cp	r12, r1
    3fe8:	d1 04       	cpc	r13, r1
    3fea:	09 f0       	breq	.+2      	; 0x3fee <Buttons_meny+0x238>
    3fec:	83 cf       	rjmp	.-250    	; 0x3ef4 <Buttons_meny+0x13e>



return Buttons_meny_private(lcd,BM);
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	b2 01       	movw	r22, r4
    3ff4:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <Buttons_meny_private>
}
    3ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    3ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	fe bf       	out	0x3e, r31	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	ed bf       	out	0x3d, r30	; 61
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	1f 91       	pop	r17
    4016:	0f 91       	pop	r16
    4018:	ff 90       	pop	r15
    401a:	ef 90       	pop	r14
    401c:	df 90       	pop	r13
    401e:	cf 90       	pop	r12
    4020:	bf 90       	pop	r11
    4022:	af 90       	pop	r10
    4024:	9f 90       	pop	r9
    4026:	8f 90       	pop	r8
    4028:	7f 90       	pop	r7
    402a:	6f 90       	pop	r6
    402c:	5f 90       	pop	r5
    402e:	4f 90       	pop	r4
    4030:	3f 90       	pop	r3
    4032:	2f 90       	pop	r2
    4034:	08 95       	ret

00004036 <gui_meny_demo>:

}



int gui_meny_demo(LCD_engine *lcd){
    4036:	4f 92       	push	r4
    4038:	5f 92       	push	r5
    403a:	6f 92       	push	r6
    403c:	7f 92       	push	r7
    403e:	8f 92       	push	r8
    4040:	9f 92       	push	r9
    4042:	af 92       	push	r10
    4044:	bf 92       	push	r11
    4046:	cf 92       	push	r12
    4048:	df 92       	push	r13
    404a:	ef 92       	push	r14
    404c:	ff 92       	push	r15
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	c5 5a       	subi	r28, 0xA5	; 165
    405c:	d0 40       	sbci	r29, 0x00	; 0
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	6c 01       	movw	r12, r24
LCD_CLR();
    406a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
    406e:	c6 01       	movw	r24, r12
    4070:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
    4074:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
    4078:	c6 01       	movw	r24, r12
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    4080:	c6 01       	movw	r24, r12
    4082:	61 e0       	ldi	r22, 0x01	; 1
    4084:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
    4088:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
LCD_setPage(0);
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
LCD_setColumn(0);
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
rprintfStr("meny");
    4098:	8e e9       	ldi	r24, 0x9E	; 158
    409a:	98 e0       	ldi	r25, 0x08	; 8
    409c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>

ButtonsMeny BMA;
BMA.title="hello";
    40a0:	83 ea       	ldi	r24, 0xA3	; 163
    40a2:	98 e0       	ldi	r25, 0x08	; 8
    40a4:	9c 83       	std	Y+4, r25	; 0x04
    40a6:	8b 83       	std	Y+3, r24	; 0x03
BMA.RootButton=0;
MenyButton b[9];
b[0]=makeButton("1",1);
    40a8:	8e 01       	movw	r16, r28
    40aa:	09 56       	subi	r16, 0x69	; 105
    40ac:	1f 4f       	sbci	r17, 0xFF	; 255
    40ae:	c8 01       	movw	r24, r16
    40b0:	69 ea       	ldi	r22, 0xA9	; 169
    40b2:	78 e0       	ldi	r23, 0x08	; 8
    40b4:	41 e0       	ldi	r20, 0x01	; 1
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    40bc:	de 01       	movw	r26, r28
    40be:	50 96       	adiw	r26, 0x10	; 16
    40c0:	f8 01       	movw	r30, r16
    40c2:	8f e0       	ldi	r24, 0x0F	; 15
    40c4:	01 90       	ld	r0, Z+
    40c6:	0d 92       	st	X+, r0
    40c8:	81 50       	subi	r24, 0x01	; 1
    40ca:	e1 f7       	brne	.-8      	; 0x40c4 <gui_meny_demo+0x8e>
b[1]=makeButton("2",2);
    40cc:	8e 01       	movw	r16, r28
    40ce:	09 56       	subi	r16, 0x69	; 105
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	c8 01       	movw	r24, r16
    40d4:	6b ea       	ldi	r22, 0xAB	; 171
    40d6:	78 e0       	ldi	r23, 0x08	; 8
    40d8:	42 e0       	ldi	r20, 0x02	; 2
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    40e0:	de 01       	movw	r26, r28
    40e2:	5f 96       	adiw	r26, 0x1f	; 31
    40e4:	f8 01       	movw	r30, r16
    40e6:	8f e0       	ldi	r24, 0x0F	; 15
    40e8:	01 90       	ld	r0, Z+
    40ea:	0d 92       	st	X+, r0
    40ec:	81 50       	subi	r24, 0x01	; 1
    40ee:	e1 f7       	brne	.-8      	; 0x40e8 <gui_meny_demo+0xb2>
b[2]=makeButton("3",3);
    40f0:	8e 01       	movw	r16, r28
    40f2:	09 56       	subi	r16, 0x69	; 105
    40f4:	1f 4f       	sbci	r17, 0xFF	; 255
    40f6:	c8 01       	movw	r24, r16
    40f8:	6d ea       	ldi	r22, 0xAD	; 173
    40fa:	78 e0       	ldi	r23, 0x08	; 8
    40fc:	43 e0       	ldi	r20, 0x03	; 3
    40fe:	50 e0       	ldi	r21, 0x00	; 0
    4100:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    4104:	de 01       	movw	r26, r28
    4106:	9e 96       	adiw	r26, 0x2e	; 46
    4108:	f8 01       	movw	r30, r16
    410a:	8f e0       	ldi	r24, 0x0F	; 15
    410c:	01 90       	ld	r0, Z+
    410e:	0d 92       	st	X+, r0
    4110:	81 50       	subi	r24, 0x01	; 1
    4112:	e1 f7       	brne	.-8      	; 0x410c <__stack+0xd>
b[3]=makeButton("4",4);
    4114:	8e 01       	movw	r16, r28
    4116:	09 56       	subi	r16, 0x69	; 105
    4118:	1f 4f       	sbci	r17, 0xFF	; 255
    411a:	c8 01       	movw	r24, r16
    411c:	6f ea       	ldi	r22, 0xAF	; 175
    411e:	78 e0       	ldi	r23, 0x08	; 8
    4120:	44 e0       	ldi	r20, 0x04	; 4
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    4128:	de 01       	movw	r26, r28
    412a:	dd 96       	adiw	r26, 0x3d	; 61
    412c:	f8 01       	movw	r30, r16
    412e:	8f e0       	ldi	r24, 0x0F	; 15
    4130:	01 90       	ld	r0, Z+
    4132:	0d 92       	st	X+, r0
    4134:	81 50       	subi	r24, 0x01	; 1
    4136:	e1 f7       	brne	.-8      	; 0x4130 <__stack+0x31>
b[4]=makeButton("5",5);
    4138:	8e 01       	movw	r16, r28
    413a:	09 56       	subi	r16, 0x69	; 105
    413c:	1f 4f       	sbci	r17, 0xFF	; 255
    413e:	c8 01       	movw	r24, r16
    4140:	61 eb       	ldi	r22, 0xB1	; 177
    4142:	78 e0       	ldi	r23, 0x08	; 8
    4144:	45 e0       	ldi	r20, 0x05	; 5
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    414c:	de 01       	movw	r26, r28
    414e:	a4 5b       	subi	r26, 0xB4	; 180
    4150:	bf 4f       	sbci	r27, 0xFF	; 255
    4152:	f8 01       	movw	r30, r16
    4154:	8f e0       	ldi	r24, 0x0F	; 15
    4156:	01 90       	ld	r0, Z+
    4158:	0d 92       	st	X+, r0
    415a:	81 50       	subi	r24, 0x01	; 1
    415c:	e1 f7       	brne	.-8      	; 0x4156 <__stack+0x57>
b[5]=makeButton("6",6);
    415e:	8e 01       	movw	r16, r28
    4160:	09 56       	subi	r16, 0x69	; 105
    4162:	1f 4f       	sbci	r17, 0xFF	; 255
    4164:	c8 01       	movw	r24, r16
    4166:	63 eb       	ldi	r22, 0xB3	; 179
    4168:	78 e0       	ldi	r23, 0x08	; 8
    416a:	46 e0       	ldi	r20, 0x06	; 6
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    4172:	de 01       	movw	r26, r28
    4174:	a5 5a       	subi	r26, 0xA5	; 165
    4176:	bf 4f       	sbci	r27, 0xFF	; 255
    4178:	f8 01       	movw	r30, r16
    417a:	8f e0       	ldi	r24, 0x0F	; 15
    417c:	01 90       	ld	r0, Z+
    417e:	0d 92       	st	X+, r0
    4180:	81 50       	subi	r24, 0x01	; 1
    4182:	e1 f7       	brne	.-8      	; 0x417c <__stack+0x7d>
b[6]=makeButton("7",7);
    4184:	8e 01       	movw	r16, r28
    4186:	09 56       	subi	r16, 0x69	; 105
    4188:	1f 4f       	sbci	r17, 0xFF	; 255
    418a:	c8 01       	movw	r24, r16
    418c:	65 eb       	ldi	r22, 0xB5	; 181
    418e:	78 e0       	ldi	r23, 0x08	; 8
    4190:	47 e0       	ldi	r20, 0x07	; 7
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    4198:	de 01       	movw	r26, r28
    419a:	a6 59       	subi	r26, 0x96	; 150
    419c:	bf 4f       	sbci	r27, 0xFF	; 255
    419e:	f8 01       	movw	r30, r16
    41a0:	8f e0       	ldi	r24, 0x0F	; 15
    41a2:	01 90       	ld	r0, Z+
    41a4:	0d 92       	st	X+, r0
    41a6:	81 50       	subi	r24, 0x01	; 1
    41a8:	e1 f7       	brne	.-8      	; 0x41a2 <__stack+0xa3>
b[7]=makeButton("8",8);
    41aa:	8e 01       	movw	r16, r28
    41ac:	09 56       	subi	r16, 0x69	; 105
    41ae:	1f 4f       	sbci	r17, 0xFF	; 255
    41b0:	c8 01       	movw	r24, r16
    41b2:	67 eb       	ldi	r22, 0xB7	; 183
    41b4:	78 e0       	ldi	r23, 0x08	; 8
    41b6:	48 e0       	ldi	r20, 0x08	; 8
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    41be:	de 01       	movw	r26, r28
    41c0:	a7 58       	subi	r26, 0x87	; 135
    41c2:	bf 4f       	sbci	r27, 0xFF	; 255
    41c4:	f8 01       	movw	r30, r16
    41c6:	8f e0       	ldi	r24, 0x0F	; 15
    41c8:	01 90       	ld	r0, Z+
    41ca:	0d 92       	st	X+, r0
    41cc:	81 50       	subi	r24, 0x01	; 1
    41ce:	e1 f7       	brne	.-8      	; 0x41c8 <__stack+0xc9>
b[8]=makeButton("9",9);
    41d0:	8e 01       	movw	r16, r28
    41d2:	09 56       	subi	r16, 0x69	; 105
    41d4:	1f 4f       	sbci	r17, 0xFF	; 255
    41d6:	c8 01       	movw	r24, r16
    41d8:	69 eb       	ldi	r22, 0xB9	; 185
    41da:	78 e0       	ldi	r23, 0x08	; 8
    41dc:	49 e0       	ldi	r20, 0x09	; 9
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	0e 94 9f 1a 	call	0x353e	; 0x353e <makeButton>
    41e4:	de 01       	movw	r26, r28
    41e6:	a8 57       	subi	r26, 0x78	; 120
    41e8:	bf 4f       	sbci	r27, 0xFF	; 255
    41ea:	f8 01       	movw	r30, r16
    41ec:	8f e0       	ldi	r24, 0x0F	; 15
    41ee:	01 90       	ld	r0, Z+
    41f0:	0d 92       	st	X+, r0
    41f2:	81 50       	subi	r24, 0x01	; 1
    41f4:	e1 f7       	brne	.-8      	; 0x41ee <__stack+0xef>

void addMenyButton(ButtonsMeny *BM, MenyButton *newMenyButton){
//MenyButton
if (BM->RootButton==0){
//if (BM->number_of_buttons==0){
newMenyButton->next=0;
    41f6:	1e 8e       	std	Y+30, r1	; 0x1e
    41f8:	1d 8e       	std	Y+29, r1	; 0x1d
BM->RootButton=newMenyButton;
    41fa:	ce 01       	movw	r24, r28
    41fc:	40 96       	adiw	r24, 0x10	; 16
}else {
newMenyButton->next=BM->RootButton;
    41fe:	9d a7       	std	Y+45, r25	; 0x2d
    4200:	8c a7       	std	Y+44, r24	; 0x2c
BM->RootButton=newMenyButton;
    4202:	ce 01       	movw	r24, r28
    4204:	4f 96       	adiw	r24, 0x1f	; 31
    4206:	9a 83       	std	Y+2, r25	; 0x02
    4208:	89 83       	std	Y+1, r24	; 0x01
    420a:	8e 01       	movw	r16, r28
    420c:	02 5d       	subi	r16, 0xD2	; 210
    420e:	1f 4f       	sbci	r17, 0xFF	; 255
    4210:	b2 e0       	ldi	r27, 0x02	; 2
    4212:	eb 2e       	mov	r14, r27
    4214:	f1 2c       	mov	r15, r1
int valde=0;
int add=2;

while (1){

valde = Buttons_meny(lcd,&BMA,4);
    4216:	2e 01       	movw	r4, r28
    4218:	08 94       	sec
    421a:	41 1c       	adc	r4, r1
    421c:	51 1c       	adc	r5, r1
if (valde==9){
return 0;
}
char str[10]; 
BMA.title=itoa(valde, str, 10);
    421e:	a6 e0       	ldi	r26, 0x06	; 6
    4220:	6a 2e       	mov	r6, r26
    4222:	71 2c       	mov	r7, r1
    4224:	6c 0e       	add	r6, r28
    4226:	7d 1e       	adc	r7, r29
if (add<9){
if (add==8){
b[add].text="exit";
    4228:	f0 e9       	ldi	r31, 0x90	; 144
    422a:	8f 2e       	mov	r8, r31
    422c:	91 2c       	mov	r9, r1
    422e:	8c 0e       	add	r8, r28
    4230:	9d 1e       	adc	r9, r29
    4232:	eb eb       	ldi	r30, 0xBB	; 187
    4234:	ae 2e       	mov	r10, r30
    4236:	e8 e0       	ldi	r30, 0x08	; 8
    4238:	be 2e       	mov	r11, r30
int valde=0;
int add=2;

while (1){

valde = Buttons_meny(lcd,&BMA,4);
    423a:	c6 01       	movw	r24, r12
    423c:	b2 01       	movw	r22, r4
    423e:	44 e0       	ldi	r20, 0x04	; 4
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <Buttons_meny>
if (valde==9){
    4246:	89 30       	cpi	r24, 0x09	; 9
    4248:	91 05       	cpc	r25, r1
    424a:	d1 f4       	brne	.+52     	; 0x4280 <__stack+0x181>
add++;
}

}
return 0;
}
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	cb 55       	subi	r28, 0x5B	; 91
    4252:	df 4f       	sbci	r29, 0xFF	; 255
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	f8 94       	cli
    4258:	de bf       	out	0x3e, r29	; 62
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	1f 91       	pop	r17
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	df 90       	pop	r13
    426c:	cf 90       	pop	r12
    426e:	bf 90       	pop	r11
    4270:	af 90       	pop	r10
    4272:	9f 90       	pop	r9
    4274:	8f 90       	pop	r8
    4276:	7f 90       	pop	r7
    4278:	6f 90       	pop	r6
    427a:	5f 90       	pop	r5
    427c:	4f 90       	pop	r4
    427e:	08 95       	ret
valde = Buttons_meny(lcd,&BMA,4);
if (valde==9){
return 0;
}
char str[10]; 
BMA.title=itoa(valde, str, 10);
    4280:	b3 01       	movw	r22, r6
    4282:	4a e0       	ldi	r20, 0x0A	; 10
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <itoa>
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
if (add<9){
    428e:	89 e0       	ldi	r24, 0x09	; 9
    4290:	e8 16       	cp	r14, r24
    4292:	f1 04       	cpc	r15, r1
    4294:	94 f6       	brge	.-92     	; 0x423a <__stack+0x13b>
if (add==8){
    4296:	e8 e0       	ldi	r30, 0x08	; 8
    4298:	ee 16       	cp	r14, r30
    429a:	f1 04       	cpc	r15, r1
    429c:	19 f4       	brne	.+6      	; 0x42a4 <__stack+0x1a5>
b[add].text="exit";
    429e:	f4 01       	movw	r30, r8
    42a0:	b1 82       	std	Z+1, r11	; 0x01
    42a2:	a0 82       	st	Z, r10

}

void addMenyButton(ButtonsMeny *BM, MenyButton *newMenyButton){
//MenyButton
if (BM->RootButton==0){
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	9a 81       	ldd	r25, Y+2	; 0x02
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	21 f4       	brne	.+8      	; 0x42b4 <__stack+0x1b5>
//if (BM->number_of_buttons==0){
newMenyButton->next=0;
    42ac:	f8 01       	movw	r30, r16
    42ae:	16 86       	std	Z+14, r1	; 0x0e
    42b0:	15 86       	std	Z+13, r1	; 0x0d
    42b2:	03 c0       	rjmp	.+6      	; 0x42ba <__stack+0x1bb>
BM->RootButton=newMenyButton;
}else {
newMenyButton->next=BM->RootButton;
    42b4:	f8 01       	movw	r30, r16
    42b6:	96 87       	std	Z+14, r25	; 0x0e
    42b8:	85 87       	std	Z+13, r24	; 0x0d
BM->RootButton=newMenyButton;
    42ba:	09 83       	std	Y+1, r16	; 0x01
    42bc:	1a 83       	std	Y+2, r17	; 0x02
if (add==8){
b[add].text="exit";
}

addMenyButton(&BMA, &b[add]);
add++;
    42be:	08 94       	sec
    42c0:	e1 1c       	adc	r14, r1
    42c2:	f1 1c       	adc	r15, r1
    42c4:	01 5f       	subi	r16, 0xF1	; 241
    42c6:	1f 4f       	sbci	r17, 0xFF	; 255
    42c8:	b8 cf       	rjmp	.-144    	; 0x423a <__stack+0x13b>

000042ca <isOnTarget>:


void draw_missile_fire(LCD_engine *lcd, Missile *m);
int start_game(LCD_engine *lcd,int startlevel);

char isOnTarget(Missile *m){
    42ca:	fc 01       	movw	r30, r24
return (((m->x/100 - m->target_x)*(m->x/100 - m->target_x) + (m->y/100 - m->target_y)*(m->y/100 - m->target_y))<8);
    42cc:	85 81       	ldd	r24, Z+5	; 0x05
    42ce:	96 81       	ldd	r25, Z+6	; 0x06
    42d0:	64 e6       	ldi	r22, 0x64	; 100
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    42d8:	9b 01       	movw	r18, r22
    42da:	85 85       	ldd	r24, Z+13	; 0x0d
    42dc:	28 1b       	sub	r18, r24
    42de:	31 09       	sbc	r19, r1
    42e0:	87 81       	ldd	r24, Z+7	; 0x07
    42e2:	90 85       	ldd	r25, Z+8	; 0x08
    42e4:	64 e6       	ldi	r22, 0x64	; 100
    42e6:	70 e0       	ldi	r23, 0x00	; 0
    42e8:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    42ec:	86 85       	ldd	r24, Z+14	; 0x0e
    42ee:	68 1b       	sub	r22, r24
    42f0:	71 09       	sbc	r23, r1
    42f2:	40 e0       	ldi	r20, 0x00	; 0
    42f4:	66 9f       	mul	r22, r22
    42f6:	c0 01       	movw	r24, r0
    42f8:	67 9f       	mul	r22, r23
    42fa:	90 0d       	add	r25, r0
    42fc:	76 9f       	mul	r23, r22
    42fe:	90 0d       	add	r25, r0
    4300:	11 24       	eor	r1, r1
    4302:	b9 01       	movw	r22, r18
    4304:	66 9f       	mul	r22, r22
    4306:	90 01       	movw	r18, r0
    4308:	67 9f       	mul	r22, r23
    430a:	30 0d       	add	r19, r0
    430c:	76 9f       	mul	r23, r22
    430e:	30 0d       	add	r19, r0
    4310:	11 24       	eor	r1, r1
    4312:	82 0f       	add	r24, r18
    4314:	93 1f       	adc	r25, r19
    4316:	08 97       	sbiw	r24, 0x08	; 8
    4318:	0c f4       	brge	.+2      	; 0x431c <isOnTarget+0x52>
    431a:	41 e0       	ldi	r20, 0x01	; 1
}
    431c:	84 2f       	mov	r24, r20
    431e:	08 95       	ret

00004320 <uppdateMissile>:

char uppdateMissile(Missile *m){//returns 1 on finish
    4320:	cf 93       	push	r28
    4322:	df 93       	push	r29
    4324:	ec 01       	movw	r28, r24
		//moving
		m->o_x=m->x/100;
    4326:	ed 81       	ldd	r30, Y+5	; 0x05
    4328:	fe 81       	ldd	r31, Y+6	; 0x06
    432a:	cf 01       	movw	r24, r30
    432c:	64 e6       	ldi	r22, 0x64	; 100
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4334:	6b 83       	std	Y+3, r22	; 0x03
		m->o_y=m->y/100;
    4336:	2f 81       	ldd	r18, Y+7	; 0x07
    4338:	38 85       	ldd	r19, Y+8	; 0x08
    433a:	c9 01       	movw	r24, r18
    433c:	64 e6       	ldi	r22, 0x64	; 100
    433e:	70 e0       	ldi	r23, 0x00	; 0
    4340:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4344:	6c 83       	std	Y+4, r22	; 0x04
		m->y+=m->dy;
    4346:	8b 85       	ldd	r24, Y+11	; 0x0b
    4348:	9c 85       	ldd	r25, Y+12	; 0x0c
    434a:	28 0f       	add	r18, r24
    434c:	39 1f       	adc	r19, r25
    434e:	38 87       	std	Y+8, r19	; 0x08
    4350:	2f 83       	std	Y+7, r18	; 0x07
		m->x+=m->dx;
    4352:	89 85       	ldd	r24, Y+9	; 0x09
    4354:	9a 85       	ldd	r25, Y+10	; 0x0a
    4356:	e8 0f       	add	r30, r24
    4358:	f9 1f       	adc	r31, r25
    435a:	fe 83       	std	Y+6, r31	; 0x06
    435c:	ed 83       	std	Y+5, r30	; 0x05
		
		//check for target
		if (m->fire.life<=0){
    435e:	89 89       	ldd	r24, Y+17	; 0x11
    4360:	88 23       	and	r24, r24
    4362:	71 f4       	brne	.+28     	; 0x4380 <uppdateMissile+0x60>
		if (isOnTarget(m)){
    4364:	ce 01       	movw	r24, r28
    4366:	0e 94 65 21 	call	0x42ca	; 0x42ca <isOnTarget>
    436a:	88 23       	and	r24, r24
    436c:	11 f1       	breq	.+68     	; 0x43b2 <uppdateMissile+0x92>
			//init fire
			m->fire.size=1;
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	8a 8b       	std	Y+18, r24	; 0x12
			m->fire.life=40;
    4372:	88 e2       	ldi	r24, 0x28	; 40
    4374:	89 8b       	std	Y+17, r24	; 0x11
			//Stop moving
			m->dy=0;
    4376:	1c 86       	std	Y+12, r1	; 0x0c
    4378:	1b 86       	std	Y+11, r1	; 0x0b
			m->dx=0;
    437a:	1a 86       	std	Y+10, r1	; 0x0a
    437c:	19 86       	std	Y+9, r1	; 0x09
    437e:	19 c0       	rjmp	.+50     	; 0x43b2 <uppdateMissile+0x92>
			
		}
		}else {//Allready blown
			if (m->fire.size<36){
    4380:	8a 89       	ldd	r24, Y+18	; 0x12
    4382:	84 32       	cpi	r24, 0x24	; 36
    4384:	10 f4       	brcc	.+4      	; 0x438a <uppdateMissile+0x6a>
				m->fire.size+=2;
    4386:	8e 5f       	subi	r24, 0xFE	; 254
    4388:	8a 8b       	std	Y+18, r24	; 0x12
			}		
			m->fire.life--;
    438a:	89 89       	ldd	r24, Y+17	; 0x11
    438c:	81 50       	subi	r24, 0x01	; 1
    438e:	89 8b       	std	Y+17, r24	; 0x11
			//Blown out...
			if (m->fire.life<=0){
    4390:	88 23       	and	r24, r24
    4392:	79 f4       	brne	.+30     	; 0x43b2 <uppdateMissile+0x92>
				m->x=m->s_x*100;
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	24 e6       	ldi	r18, 0x64	; 100
    4398:	82 9f       	mul	r24, r18
    439a:	c0 01       	movw	r24, r0
    439c:	11 24       	eor	r1, r1
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	8d 83       	std	Y+5, r24	; 0x05
				m->y=m->s_y*100;
    43a2:	8a 81       	ldd	r24, Y+2	; 0x02
    43a4:	82 9f       	mul	r24, r18
    43a6:	c0 01       	movw	r24, r0
    43a8:	11 24       	eor	r1, r1
    43aa:	98 87       	std	Y+8, r25	; 0x08
    43ac:	8f 83       	std	Y+7, r24	; 0x07
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	01 c0       	rjmp	.+2      	; 0x43b4 <uppdateMissile+0x94>
				//m->target_x=0;
				//m->target_y=0;
			//pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
			//fillRect(lcd,fire.x-(fire.size/10)-1,fire.y-(fire.size/10)-1,(fire.size/5)+2,(fire.size/5)+2);
			//pixelSetOrClearOrInvert(lcd,SET_PIXELS);
				return 1;
    43b2:	80 e0       	ldi	r24, 0x00	; 0
			}
		
		
		}
	return 0;
}
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret

000043ba <isOnFire>:
char isOnFire(Missile *m){
    43ba:	fc 01       	movw	r30, r24
    43bc:	81 89       	ldd	r24, Z+17	; 0x11
    43be:	81 11       	cpse	r24, r1
    43c0:	81 e0       	ldi	r24, 0x01	; 1
return m->fire.life>0;
}
    43c2:	08 95       	ret

000043c4 <abs>:
int abs(int arg){
if (arg<0)
return arg*-1;
return arg;
}
    43c4:	9c 01       	movw	r18, r24
    43c6:	97 ff       	sbrs	r25, 7
    43c8:	03 c0       	rjmp	.+6      	; 0x43d0 <abs+0xc>
    43ca:	30 95       	com	r19
    43cc:	21 95       	neg	r18
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	c9 01       	movw	r24, r18
    43d2:	08 95       	ret

000043d4 <delete_Missile>:
	m->fire.life=0;
	m->fire.size=0;
	m->active=1;
}
void delete_Missile(Missile *m){
	m->active=0;
    43d4:	fc 01       	movw	r30, r24
    43d6:	17 86       	std	Z+15, r1	; 0x0f
}
    43d8:	08 95       	ret

000043da <time_diff>:
		break;
		}
	
		}
}
unsigned int time_diff(unsigned int from,unsigned int to){
    43da:	68 1b       	sub	r22, r24
    43dc:	79 0b       	sbc	r23, r25

return to - from +65536;
}

return to-from;
}
    43de:	cb 01       	movw	r24, r22
    43e0:	08 95       	ret

000043e2 <handle_fire_and_bases>:


int handle_fire_and_bases(Base *Bases,unsigned char x,unsigned char y){//returns bases left
    43e2:	78 2f       	mov	r23, r24
    43e4:	e9 2f       	mov	r30, r25
int base_hit=-1;

if (y<30)
    43e6:	4e 31       	cpi	r20, 0x1E	; 30
    43e8:	60 f1       	brcs	.+88     	; 0x4442 <handle_fire_and_bases+0x60>

for (int i=0;i<MAXBASES;i++){
	if (!Bases[i].alive)
		continue;
	
	if ( ((x-Bases[i].pos)*(x-Bases[i].pos)+(y-60)*(y-60))<150 ) {//KILLED THIS BASE
    43ea:	84 2f       	mov	r24, r20
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	cc 97       	sbiw	r24, 0x3c	; 60
    43f0:	88 9f       	mul	r24, r24
    43f2:	a0 01       	movw	r20, r0
    43f4:	89 9f       	mul	r24, r25
    43f6:	50 0d       	add	r21, r0
    43f8:	98 9f       	mul	r25, r24
    43fa:	50 0d       	add	r21, r0
    43fc:	11 24       	eor	r1, r1
    43fe:	27 2f       	mov	r18, r23
    4400:	3e 2f       	mov	r19, r30
    4402:	c9 01       	movw	r24, r18
    4404:	fc 01       	movw	r30, r24
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	70 e0       	ldi	r23, 0x00	; 0

if (y<30)
	return base_hit;

for (int i=0;i<MAXBASES;i++){
	if (!Bases[i].alive)
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	88 23       	and	r24, r24
    4410:	91 f0       	breq	.+36     	; 0x4436 <handle_fire_and_bases+0x54>
		continue;
	
	if ( ((x-Bases[i].pos)*(x-Bases[i].pos)+(y-60)*(y-60))<150 ) {//KILLED THIS BASE
    4412:	81 81       	ldd	r24, Z+1	; 0x01
    4414:	db 01       	movw	r26, r22
    4416:	a8 1b       	sub	r26, r24
    4418:	b1 09       	sbc	r27, r1
    441a:	aa 9f       	mul	r26, r26
    441c:	c0 01       	movw	r24, r0
    441e:	ab 9f       	mul	r26, r27
    4420:	90 0d       	add	r25, r0
    4422:	ba 9f       	mul	r27, r26
    4424:	90 0d       	add	r25, r0
    4426:	11 24       	eor	r1, r1
    4428:	84 0f       	add	r24, r20
    442a:	95 1f       	adc	r25, r21
    442c:	86 39       	cpi	r24, 0x96	; 150
    442e:	91 05       	cpc	r25, r1
    4430:	14 f4       	brge	.+4      	; 0x4436 <handle_fire_and_bases+0x54>
	//if ( abs(x-Bases[i].pos)<Bases[i].size) {//KILLED THIS BASE

		Bases[i].alive=0;
    4432:	12 82       	std	Z+2, r1	; 0x02
    4434:	08 c0       	rjmp	.+16     	; 0x4446 <handle_fire_and_bases+0x64>
int base_hit=-1;

if (y<30)
	return base_hit;

for (int i=0;i<MAXBASES;i++){
    4436:	2f 5f       	subi	r18, 0xFF	; 255
    4438:	3f 4f       	sbci	r19, 0xFF	; 255
    443a:	34 96       	adiw	r30, 0x04	; 4
    443c:	24 30       	cpi	r18, 0x04	; 4
    443e:	31 05       	cpc	r19, r1
    4440:	29 f7       	brne	.-54     	; 0x440c <handle_fire_and_bases+0x2a>
    4442:	2f ef       	ldi	r18, 0xFF	; 255
    4444:	3f ef       	ldi	r19, 0xFF	; 255
		base_hit=i;
		break; //We only let it kill one base
	}	
}
return base_hit;
}
    4446:	c9 01       	movw	r24, r18
    4448:	08 95       	ret

0000444a <closestBase>:

int closestBase(Base *Bases,unsigned char x,unsigned char max_active_missiles){
    444a:	0f 93       	push	r16
    444c:	1f 93       	push	r17
    444e:	04 2f       	mov	r16, r20
    4450:	fc 01       	movw	r30, r24
    4452:	4f ef       	ldi	r20, 0xFF	; 255
    4454:	5f ef       	ldi	r21, 0xFF	; 255
    4456:	1f ef       	ldi	r17, 0xFF	; 255
    4458:	a0 e0       	ldi	r26, 0x00	; 0
    445a:	b0 e0       	ldi	r27, 0x00	; 0
unsigned char closest=255;
for (int i=0;i<MAXBASES;i++){
		if (!Bases[i].alive || Bases[i].active_missiles>=max_active_missiles)
			continue;

		if (abs(Bases[i].pos-x)<closest){
    445c:	70 e0       	ldi	r23, 0x00	; 0

int closestBase(Base *Bases,unsigned char x,unsigned char max_active_missiles){
int closest_index=-1;
unsigned char closest=255;
for (int i=0;i<MAXBASES;i++){
		if (!Bases[i].alive || Bases[i].active_missiles>=max_active_missiles)
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	88 23       	and	r24, r24
    4462:	a1 f0       	breq	.+40     	; 0x448c <closestBase+0x42>
    4464:	83 81       	ldd	r24, Z+3	; 0x03
    4466:	80 17       	cp	r24, r16
    4468:	88 f4       	brcc	.+34     	; 0x448c <closestBase+0x42>
			continue;

		if (abs(Bases[i].pos-x)<closest){
    446a:	81 81       	ldd	r24, Z+1	; 0x01
    446c:	28 2f       	mov	r18, r24
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	26 1b       	sub	r18, r22
    4472:	37 0b       	sbc	r19, r23
    4474:	37 ff       	sbrs	r19, 7
    4476:	03 c0       	rjmp	.+6      	; 0x447e <closestBase+0x34>
    4478:	30 95       	com	r19
    447a:	21 95       	neg	r18
    447c:	3f 4f       	sbci	r19, 0xFF	; 255
    447e:	81 2f       	mov	r24, r17
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	28 17       	cp	r18, r24
    4484:	39 07       	cpc	r19, r25
    4486:	14 f4       	brge	.+4      	; 0x448c <closestBase+0x42>
			closest=abs(Bases[i].pos-x);
    4488:	12 2f       	mov	r17, r18
    448a:	ad 01       	movw	r20, r26
}

int closestBase(Base *Bases,unsigned char x,unsigned char max_active_missiles){
int closest_index=-1;
unsigned char closest=255;
for (int i=0;i<MAXBASES;i++){
    448c:	11 96       	adiw	r26, 0x01	; 1
    448e:	34 96       	adiw	r30, 0x04	; 4
    4490:	a4 30       	cpi	r26, 0x04	; 4
    4492:	b1 05       	cpc	r27, r1
    4494:	21 f7       	brne	.-56     	; 0x445e <closestBase+0x14>
		}


	}
return closest_index;
}
    4496:	ca 01       	movw	r24, r20
    4498:	1f 91       	pop	r17
    449a:	0f 91       	pop	r16
    449c:	08 95       	ret

0000449e <getLevel>:

//Levels
void getLevel(Level *level,int number){
    449e:	fc 01       	movw	r30, r24
		
//unsigned char d1[] = {100, 150, 12,100, 150, 12,0};
//unsigned char d2[] = {10, 15, 12,0};

		if (number==1){
    44a0:	61 30       	cpi	r22, 0x01	; 1
    44a2:	71 05       	cpc	r23, r1
    44a4:	61 f4       	brne	.+24     	; 0x44be <getLevel+0x20>
		
		//level->delay = ;
		level->delay[0]=11;
    44a6:	9b e0       	ldi	r25, 0x0B	; 11
    44a8:	90 83       	st	Z, r25
		level->delay[1]=101;
    44aa:	85 e6       	ldi	r24, 0x65	; 101
    44ac:	81 83       	std	Z+1, r24	; 0x01
		level->delay[2]=61;
    44ae:	8d e3       	ldi	r24, 0x3D	; 61
    44b0:	82 83       	std	Z+2, r24	; 0x02
		level->delay[3]=21;
    44b2:	85 e1       	ldi	r24, 0x15	; 21
    44b4:	83 83       	std	Z+3, r24	; 0x03
		level->delay[4]=11;
    44b6:	94 83       	std	Z+4, r25	; 0x04
		level->delay[5]=0;
    44b8:	15 82       	std	Z+5, r1	; 0x05
		level->waves = 0;
    44ba:	17 86       	std	Z+15, r1	; 0x0f
    44bc:	50 c0       	rjmp	.+160    	; 0x455e <getLevel+0xc0>
		level->index = 0;
		level->max_active_missiles=2;
		level->wave=0;
 		} else if (number==2){
    44be:	62 30       	cpi	r22, 0x02	; 2
    44c0:	71 05       	cpc	r23, r1
    44c2:	59 f4       	brne	.+22     	; 0x44da <getLevel+0x3c>

		level->delay[0]=10;
    44c4:	9a e0       	ldi	r25, 0x0A	; 10
    44c6:	90 83       	st	Z, r25
		level->delay[1]=10;
    44c8:	91 83       	std	Z+1, r25	; 0x01
		level->delay[2]=70;
    44ca:	86 e4       	ldi	r24, 0x46	; 70
    44cc:	82 83       	std	Z+2, r24	; 0x02
		level->delay[3]=90;
    44ce:	8a e5       	ldi	r24, 0x5A	; 90
    44d0:	83 83       	std	Z+3, r24	; 0x03
		level->delay[4]=10;
    44d2:	94 83       	std	Z+4, r25	; 0x04
		level->delay[5]=0;
    44d4:	15 82       	std	Z+5, r1	; 0x05
		level->waves = 1;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	0e c0       	rjmp	.+28     	; 0x44f6 <getLevel+0x58>
		level->index = 0;
		level->max_active_missiles=1;
		level->wave=0;
 		}else if (number==3){
    44da:	63 30       	cpi	r22, 0x03	; 3
    44dc:	71 05       	cpc	r23, r1
    44de:	71 f4       	brne	.+28     	; 0x44fc <getLevel+0x5e>

		level->delay[0]=10;
    44e0:	9a e0       	ldi	r25, 0x0A	; 10
    44e2:	90 83       	st	Z, r25
		level->delay[1]=1;
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	81 83       	std	Z+1, r24	; 0x01
		level->delay[2]=10;
    44e8:	92 83       	std	Z+2, r25	; 0x02
		level->delay[3]=30;
    44ea:	8e e1       	ldi	r24, 0x1E	; 30
    44ec:	83 83       	std	Z+3, r24	; 0x03
		level->delay[4]=70;
    44ee:	86 e4       	ldi	r24, 0x46	; 70
    44f0:	84 83       	std	Z+4, r24	; 0x04
		level->delay[5]=0;
    44f2:	15 82       	std	Z+5, r1	; 0x05
		level->waves = 2;
    44f4:	82 e0       	ldi	r24, 0x02	; 2
    44f6:	87 87       	std	Z+15, r24	; 0x0f
		level->index = 0;
    44f8:	11 8a       	std	Z+17, r1	; 0x11
    44fa:	33 c0       	rjmp	.+102    	; 0x4562 <getLevel+0xc4>
		level->max_active_missiles=2;
		level->wave=0;
 		}else if (number==4){
    44fc:	64 30       	cpi	r22, 0x04	; 4
    44fe:	71 05       	cpc	r23, r1
    4500:	69 f4       	brne	.+26     	; 0x451c <getLevel+0x7e>

		level->delay[0]=10;
    4502:	8a e0       	ldi	r24, 0x0A	; 10
    4504:	80 83       	st	Z, r24
		level->delay[1]=1;
    4506:	21 e0       	ldi	r18, 0x01	; 1
    4508:	21 83       	std	Z+1, r18	; 0x01
		level->delay[2]=10;
    450a:	82 83       	std	Z+2, r24	; 0x02
		level->delay[3]=30;
    450c:	9e e1       	ldi	r25, 0x1E	; 30
    450e:	93 83       	std	Z+3, r25	; 0x03
		level->delay[4]=70;
    4510:	86 e4       	ldi	r24, 0x46	; 70
    4512:	84 83       	std	Z+4, r24	; 0x04
		level->delay[5]=30;
    4514:	95 83       	std	Z+5, r25	; 0x05
		level->delay[6]=70;
    4516:	86 83       	std	Z+6, r24	; 0x06
		level->delay[7]=0;
    4518:	17 82       	std	Z+7, r1	; 0x07
    451a:	20 c0       	rjmp	.+64     	; 0x455c <getLevel+0xbe>
		level->waves = 1;
		level->index = 0;
		level->max_active_missiles=2;
		level->wave=0;
 		}    else if (number==5){
    451c:	65 30       	cpi	r22, 0x05	; 5
    451e:	71 05       	cpc	r23, r1
    4520:	51 f4       	brne	.+20     	; 0x4536 <getLevel+0x98>

		level->delay[0]=10;
    4522:	8a e0       	ldi	r24, 0x0A	; 10
    4524:	80 83       	st	Z, r24
		level->delay[1]=1;
    4526:	21 e0       	ldi	r18, 0x01	; 1
    4528:	21 83       	std	Z+1, r18	; 0x01
		level->delay[2]=1;
    452a:	22 83       	std	Z+2, r18	; 0x02
		level->delay[3]=3;
    452c:	93 e0       	ldi	r25, 0x03	; 3
    452e:	93 83       	std	Z+3, r25	; 0x03
		level->delay[4]=70;
    4530:	86 e4       	ldi	r24, 0x46	; 70
    4532:	84 83       	std	Z+4, r24	; 0x04
    4534:	0e c0       	rjmp	.+28     	; 0x4552 <getLevel+0xb4>
		level->delay[9]=0;
		level->waves = 1;
		level->index = 0;
		level->max_active_missiles=2;
		level->wave=0;
 		}  else if (number==6){
    4536:	66 30       	cpi	r22, 0x06	; 6
    4538:	71 05       	cpc	r23, r1
    453a:	b1 f4       	brne	.+44     	; 0x4568 <getLevel+0xca>

		level->delay[0]=40;
    453c:	88 e2       	ldi	r24, 0x28	; 40
    453e:	80 83       	st	Z, r24
		level->delay[1]=11;
    4540:	8b e0       	ldi	r24, 0x0B	; 11
    4542:	81 83       	std	Z+1, r24	; 0x01
		level->delay[2]=1;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	82 83       	std	Z+2, r24	; 0x02
		level->delay[3]=3;
    4548:	23 e0       	ldi	r18, 0x03	; 3
    454a:	23 83       	std	Z+3, r18	; 0x03
		level->delay[4]=70;
    454c:	86 e4       	ldi	r24, 0x46	; 70
    454e:	84 83       	std	Z+4, r24	; 0x04
		level->delay[5]=30;
    4550:	9e e1       	ldi	r25, 0x1E	; 30
    4552:	95 83       	std	Z+5, r25	; 0x05
		level->delay[6]=70;
    4554:	86 83       	std	Z+6, r24	; 0x06
		level->delay[7]=30;
    4556:	97 83       	std	Z+7, r25	; 0x07
		level->delay[8]=70;
    4558:	80 87       	std	Z+8, r24	; 0x08
		level->delay[9]=0;
    455a:	11 86       	std	Z+9, r1	; 0x09
		level->waves = 3;
    455c:	27 87       	std	Z+15, r18	; 0x0f
		level->index = 0;
    455e:	11 8a       	std	Z+17, r1	; 0x11
		level->max_active_missiles=2;
    4560:	82 e0       	ldi	r24, 0x02	; 2
    4562:	82 8b       	std	Z+18, r24	; 0x12
		level->wave=0;
    4564:	10 8a       	std	Z+16, r1	; 0x10
    4566:	08 95       	ret
 		}  else if (number==7){
    4568:	67 30       	cpi	r22, 0x07	; 7
    456a:	71 05       	cpc	r23, r1
    456c:	c1 f4       	brne	.+48     	; 0x459e <getLevel+0x100>

		level->delay[0]=10;
    456e:	8a e0       	ldi	r24, 0x0A	; 10
    4570:	80 83       	st	Z, r24
		level->delay[1]=1;
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	81 83       	std	Z+1, r24	; 0x01
		level->delay[2]=80;
    4576:	80 e5       	ldi	r24, 0x50	; 80
    4578:	82 83       	std	Z+2, r24	; 0x02
		level->delay[3]=3;
    457a:	23 e0       	ldi	r18, 0x03	; 3
    457c:	23 83       	std	Z+3, r18	; 0x03
		level->delay[4]=7;
    457e:	87 e0       	ldi	r24, 0x07	; 7
    4580:	84 83       	std	Z+4, r24	; 0x04
		level->delay[5]=30;
    4582:	9e e1       	ldi	r25, 0x1E	; 30
    4584:	95 83       	std	Z+5, r25	; 0x05
		level->delay[6]=7;
    4586:	86 83       	std	Z+6, r24	; 0x06
		level->delay[7]=30;
    4588:	97 83       	std	Z+7, r25	; 0x07
		level->delay[8]=7;
    458a:	80 87       	std	Z+8, r24	; 0x08
		level->delay[9]=3;
    458c:	21 87       	std	Z+9, r18	; 0x09
		level->delay[10]=7;
    458e:	82 87       	std	Z+10, r24	; 0x0a
		level->delay[11]=0;
    4590:	13 86       	std	Z+11, r1	; 0x0b
		level->waves = 6;
    4592:	86 e0       	ldi	r24, 0x06	; 6
    4594:	87 87       	std	Z+15, r24	; 0x0f
		level->index = 0;
    4596:	11 8a       	std	Z+17, r1	; 0x11
		level->max_active_missiles=2;
    4598:	82 e0       	ldi	r24, 0x02	; 2
    459a:	82 8b       	std	Z+18, r24	; 0x12
		level->wave=0;
    459c:	10 8a       	std	Z+16, r1	; 0x10
    459e:	08 95       	ret

000045a0 <init_missile>:
LCD_drawLine(lcd,m->x/100 - m->fire.size/7,m->y/100,m->x/100+m->fire.size/7,m->y/100);
LCD_drawLine(lcd,m->x/100,m->y/100 - m->fire.size/7,m->x/100,m->y/100+m->fire.size/7);

}

void init_missile(Missile *m,char start_x,char start_y,char target_x,char target_y,unsigned char sent_from,char speed){
    45a0:	2f 92       	push	r2
    45a2:	3f 92       	push	r3
    45a4:	4f 92       	push	r4
    45a6:	5f 92       	push	r5
    45a8:	6f 92       	push	r6
    45aa:	7f 92       	push	r7
    45ac:	8f 92       	push	r8
    45ae:	9f 92       	push	r9
    45b0:	af 92       	push	r10
    45b2:	bf 92       	push	r11
    45b4:	cf 92       	push	r12
    45b6:	df 92       	push	r13
    45b8:	ef 92       	push	r14
    45ba:	0f 93       	push	r16
    45bc:	1f 93       	push	r17
    45be:	cf 93       	push	r28
    45c0:	df 93       	push	r29
    45c2:	5c 01       	movw	r10, r24
    45c4:	22 2e       	mov	r2, r18
	m->s_x=start_x;		
    45c6:	fc 01       	movw	r30, r24
    45c8:	61 83       	std	Z+1, r22	; 0x01
	m->s_y=start_y;
    45ca:	42 83       	std	Z+2, r20	; 0x02
	m->o_x=start_x;		
    45cc:	63 83       	std	Z+3, r22	; 0x03
	m->o_y=start_y;
    45ce:	44 83       	std	Z+4, r20	; 0x04
	m->x=m->s_x*100;
    45d0:	84 e6       	ldi	r24, 0x64	; 100
    45d2:	68 9f       	mul	r22, r24
    45d4:	90 01       	movw	r18, r0
    45d6:	11 24       	eor	r1, r1
    45d8:	36 83       	std	Z+6, r19	; 0x06
    45da:	25 83       	std	Z+5, r18	; 0x05
	m->y=m->s_y*100;
    45dc:	48 9f       	mul	r20, r24
    45de:	c0 01       	movw	r24, r0
    45e0:	11 24       	eor	r1, r1
    45e2:	90 87       	std	Z+8, r25	; 0x08
    45e4:	87 83       	std	Z+7, r24	; 0x07
	m->target_x=target_x;
    45e6:	25 86       	std	Z+13, r2	; 0x0d
	m->target_y=target_y;
    45e8:	06 87       	std	Z+14, r16	; 0x0e
	m->sent_from=sent_from;
    45ea:	e0 8a       	std	Z+16, r14	; 0x10
	int R=(int)sqrt((m->s_y-target_y)*(m->s_y-target_y)+(m->s_x-target_x)*(m->s_x-target_x));
    45ec:	84 2e       	mov	r8, r20
    45ee:	99 24       	eor	r9, r9
    45f0:	10 e0       	ldi	r17, 0x00	; 0
    45f2:	c4 01       	movw	r24, r8
    45f4:	80 1b       	sub	r24, r16
    45f6:	91 0b       	sbc	r25, r17
    45f8:	33 24       	eor	r3, r3
    45fa:	c6 2f       	mov	r28, r22
    45fc:	d0 e0       	ldi	r29, 0x00	; 0
    45fe:	9e 01       	movw	r18, r28
    4600:	22 19       	sub	r18, r2
    4602:	33 09       	sbc	r19, r3
    4604:	88 9f       	mul	r24, r24
    4606:	b0 01       	movw	r22, r0
    4608:	89 9f       	mul	r24, r25
    460a:	70 0d       	add	r23, r0
    460c:	98 9f       	mul	r25, r24
    460e:	70 0d       	add	r23, r0
    4610:	11 24       	eor	r1, r1
    4612:	c9 01       	movw	r24, r18
    4614:	88 9f       	mul	r24, r24
    4616:	90 01       	movw	r18, r0
    4618:	89 9f       	mul	r24, r25
    461a:	30 0d       	add	r19, r0
    461c:	98 9f       	mul	r25, r24
    461e:	30 0d       	add	r19, r0
    4620:	11 24       	eor	r1, r1
    4622:	62 0f       	add	r22, r18
    4624:	73 1f       	adc	r23, r19
    4626:	88 27       	eor	r24, r24
    4628:	77 fd       	sbrc	r23, 7
    462a:	80 95       	com	r24
    462c:	98 2f       	mov	r25, r24
    462e:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    4632:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <sqrt>
    4636:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    463a:	2b 01       	movw	r4, r22
    463c:	3c 01       	movw	r6, r24
	m->dy=speed*(-m->s_y+target_y)/R;
    463e:	dd 24       	eor	r13, r13
    4640:	08 19       	sub	r16, r8
    4642:	19 09       	sbc	r17, r9
    4644:	c0 9e       	mul	r12, r16
    4646:	c0 01       	movw	r24, r0
    4648:	c1 9e       	mul	r12, r17
    464a:	90 0d       	add	r25, r0
    464c:	d0 9e       	mul	r13, r16
    464e:	90 0d       	add	r25, r0
    4650:	11 24       	eor	r1, r1
    4652:	b2 01       	movw	r22, r4
    4654:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4658:	f5 01       	movw	r30, r10
    465a:	74 87       	std	Z+12, r23	; 0x0c
    465c:	63 87       	std	Z+11, r22	; 0x0b
	m->dx=speed*(-m->s_x+target_x)/R;
    465e:	2c 1a       	sub	r2, r28
    4660:	3d 0a       	sbc	r3, r29
    4662:	c2 9c       	mul	r12, r2
    4664:	c0 01       	movw	r24, r0
    4666:	c3 9c       	mul	r12, r3
    4668:	90 0d       	add	r25, r0
    466a:	d2 9c       	mul	r13, r2
    466c:	90 0d       	add	r25, r0
    466e:	11 24       	eor	r1, r1
    4670:	b2 01       	movw	r22, r4
    4672:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4676:	72 87       	std	Z+10, r23	; 0x0a
    4678:	61 87       	std	Z+9, r22	; 0x09

	m->fire.life=0;
    467a:	11 8a       	std	Z+17, r1	; 0x11
	m->fire.size=0;
    467c:	12 8a       	std	Z+18, r1	; 0x12
	m->active=1;
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	87 87       	std	Z+15, r24	; 0x0f
}
    4682:	df 91       	pop	r29
    4684:	cf 91       	pop	r28
    4686:	1f 91       	pop	r17
    4688:	0f 91       	pop	r16
    468a:	ef 90       	pop	r14
    468c:	df 90       	pop	r13
    468e:	cf 90       	pop	r12
    4690:	bf 90       	pop	r11
    4692:	af 90       	pop	r10
    4694:	9f 90       	pop	r9
    4696:	8f 90       	pop	r8
    4698:	7f 90       	pop	r7
    469a:	6f 90       	pop	r6
    469c:	5f 90       	pop	r5
    469e:	4f 90       	pop	r4
    46a0:	3f 90       	pop	r3
    46a2:	2f 90       	pop	r2
    46a4:	08 95       	ret

000046a6 <send_missile>:
void delete_Missile(Missile *m){
	m->active=0;
}
void send_missile(Missile *missiles,char start_x,char start_y,char target_x,char target_y,unsigned char sent_from,char speed){
    46a6:	cf 92       	push	r12
    46a8:	ef 92       	push	r14
    46aa:	0f 93       	push	r16
    46ac:	52 2f       	mov	r21, r18
    46ae:	fc 01       	movw	r30, r24
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
for (int i=0;i<MAXMISSILES;i++){
		if (!missiles[i].active){ //send this one
    46b4:	87 85       	ldd	r24, Z+15	; 0x0f
    46b6:	88 23       	and	r24, r24
    46b8:	39 f4       	brne	.+14     	; 0x46c8 <send_missile+0x22>
			missiles[i].active=1;
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	87 87       	std	Z+15, r24	; 0x0f
			init_missile(&missiles[i],start_x,start_y,target_x,target_y,sent_from,speed);
    46be:	cf 01       	movw	r24, r30
    46c0:	25 2f       	mov	r18, r21
    46c2:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <init_missile>
    46c6:	06 c0       	rjmp	.+12     	; 0x46d4 <send_missile+0x2e>
}
void delete_Missile(Missile *m){
	m->active=0;
}
void send_missile(Missile *missiles,char start_x,char start_y,char target_x,char target_y,unsigned char sent_from,char speed){
for (int i=0;i<MAXMISSILES;i++){
    46c8:	2f 5f       	subi	r18, 0xFF	; 255
    46ca:	3f 4f       	sbci	r19, 0xFF	; 255
    46cc:	73 96       	adiw	r30, 0x13	; 19
    46ce:	24 31       	cpi	r18, 0x14	; 20
    46d0:	31 05       	cpc	r19, r1
    46d2:	81 f7       	brne	.-32     	; 0x46b4 <send_missile+0xe>
			init_missile(&missiles[i],start_x,start_y,target_x,target_y,sent_from,speed);
		break;
		}
	
		}
}
    46d4:	0f 91       	pop	r16
    46d6:	ef 90       	pop	r14
    46d8:	cf 90       	pop	r12
    46da:	08 95       	ret

000046dc <draw_missile_fire>:

LCD_drawLine(lcd,m->o_x - m->fire.size/7,m->o_y,m->o_x+m->fire.size/7,m->o_y);
LCD_drawLine(lcd,m->o_x,m->o_y - m->fire.size/7,m->o_x,m->o_y+m->fire.size/7);
}

void draw_missile_fire(LCD_engine *lcd, Missile *m){
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	6c 01       	movw	r12, r24
    46ea:	7b 01       	movw	r14, r22
//LCD_drawLine(lcd,userMissile.s_x,userMissile.s_y,userMissile.x/100,userMissile.y/100);
//LCD_drawLine(lcd,m->s_x,m->s_y,m->x/100,m->y/100);
//drawCircle(lcd,m->x/100,m->y/100,m->fire.size/10);
//drawCircle(lcd,m->x/100,m->y/100,m->fire.size/10);

LCD_drawLine(lcd,m->x/100-m->fire.size/10,m->y/100-m->fire.size/10,m->x/100+m->fire.size/10,m->y/100+m->fire.size/10);
    46ec:	db 01       	movw	r26, r22
    46ee:	15 96       	adiw	r26, 0x05	; 5
    46f0:	8d 91       	ld	r24, X+
    46f2:	9c 91       	ld	r25, X
    46f4:	16 97       	sbiw	r26, 0x06	; 6
    46f6:	64 e6       	ldi	r22, 0x64	; 100
    46f8:	70 e0       	ldi	r23, 0x00	; 0
    46fa:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    46fe:	9b 01       	movw	r18, r22
    4700:	f7 01       	movw	r30, r14
    4702:	82 89       	ldd	r24, Z+18	; 0x12
    4704:	6a e0       	ldi	r22, 0x0A	; 10
    4706:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    470a:	08 2f       	mov	r16, r24
    470c:	10 e0       	ldi	r17, 0x00	; 0
    470e:	87 81       	ldd	r24, Z+7	; 0x07
    4710:	90 85       	ldd	r25, Z+8	; 0x08
    4712:	64 e6       	ldi	r22, 0x64	; 100
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    471a:	cb 01       	movw	r24, r22
    471c:	b9 01       	movw	r22, r18
    471e:	60 1b       	sub	r22, r16
    4720:	71 0b       	sbc	r23, r17
    4722:	ac 01       	movw	r20, r24
    4724:	40 1b       	sub	r20, r16
    4726:	51 0b       	sbc	r21, r17
    4728:	20 0f       	add	r18, r16
    472a:	31 1f       	adc	r19, r17
    472c:	08 0f       	add	r16, r24
    472e:	19 1f       	adc	r17, r25
    4730:	c6 01       	movw	r24, r12
    4732:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,m->x/100-m->fire.size/10,m->y/100+m->fire.size/10,m->x/100+m->fire.size/10,m->y/100-m->fire.size/10);
    4736:	d7 01       	movw	r26, r14
    4738:	15 96       	adiw	r26, 0x05	; 5
    473a:	8d 91       	ld	r24, X+
    473c:	9c 91       	ld	r25, X
    473e:	16 97       	sbiw	r26, 0x06	; 6
    4740:	64 e6       	ldi	r22, 0x64	; 100
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4748:	9b 01       	movw	r18, r22
    474a:	f7 01       	movw	r30, r14
    474c:	82 89       	ldd	r24, Z+18	; 0x12
    474e:	6a e0       	ldi	r22, 0x0A	; 10
    4750:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    4754:	e8 2f       	mov	r30, r24
    4756:	f0 e0       	ldi	r31, 0x00	; 0
    4758:	d7 01       	movw	r26, r14
    475a:	17 96       	adiw	r26, 0x07	; 7
    475c:	8d 91       	ld	r24, X+
    475e:	9c 91       	ld	r25, X
    4760:	18 97       	sbiw	r26, 0x08	; 8
    4762:	64 e6       	ldi	r22, 0x64	; 100
    4764:	70 e0       	ldi	r23, 0x00	; 0
    4766:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    476a:	8b 01       	movw	r16, r22
    476c:	b9 01       	movw	r22, r18
    476e:	6e 1b       	sub	r22, r30
    4770:	7f 0b       	sbc	r23, r31
    4772:	af 01       	movw	r20, r30
    4774:	40 0f       	add	r20, r16
    4776:	51 1f       	adc	r21, r17
    4778:	2e 0f       	add	r18, r30
    477a:	3f 1f       	adc	r19, r31
    477c:	0e 1b       	sub	r16, r30
    477e:	1f 0b       	sbc	r17, r31
    4780:	c6 01       	movw	r24, r12
    4782:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

LCD_drawLine(lcd,m->x/100 - m->fire.size/7,m->y/100,m->x/100+m->fire.size/7,m->y/100);
    4786:	f7 01       	movw	r30, r14
    4788:	85 81       	ldd	r24, Z+5	; 0x05
    478a:	96 81       	ldd	r25, Z+6	; 0x06
    478c:	64 e6       	ldi	r22, 0x64	; 100
    478e:	70 e0       	ldi	r23, 0x00	; 0
    4790:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4794:	fb 01       	movw	r30, r22
    4796:	d7 01       	movw	r26, r14
    4798:	52 96       	adiw	r26, 0x12	; 18
    479a:	8c 91       	ld	r24, X
    479c:	52 97       	sbiw	r26, 0x12	; 18
    479e:	67 e0       	ldi	r22, 0x07	; 7
    47a0:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    47a4:	28 2f       	mov	r18, r24
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	17 96       	adiw	r26, 0x07	; 7
    47aa:	8d 91       	ld	r24, X+
    47ac:	9c 91       	ld	r25, X
    47ae:	18 97       	sbiw	r26, 0x08	; 8
    47b0:	64 e6       	ldi	r22, 0x64	; 100
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    47b8:	8b 01       	movw	r16, r22
    47ba:	bf 01       	movw	r22, r30
    47bc:	62 1b       	sub	r22, r18
    47be:	73 0b       	sbc	r23, r19
    47c0:	2e 0f       	add	r18, r30
    47c2:	3f 1f       	adc	r19, r31
    47c4:	c6 01       	movw	r24, r12
    47c6:	a8 01       	movw	r20, r16
    47c8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,m->x/100,m->y/100 - m->fire.size/7,m->x/100,m->y/100+m->fire.size/7);
    47cc:	f7 01       	movw	r30, r14
    47ce:	87 81       	ldd	r24, Z+7	; 0x07
    47d0:	90 85       	ldd	r25, Z+8	; 0x08
    47d2:	64 e6       	ldi	r22, 0x64	; 100
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    47da:	fb 01       	movw	r30, r22
    47dc:	d7 01       	movw	r26, r14
    47de:	52 96       	adiw	r26, 0x12	; 18
    47e0:	8c 91       	ld	r24, X
    47e2:	52 97       	sbiw	r26, 0x12	; 18
    47e4:	67 e0       	ldi	r22, 0x07	; 7
    47e6:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    47ea:	08 2f       	mov	r16, r24
    47ec:	10 e0       	ldi	r17, 0x00	; 0
    47ee:	15 96       	adiw	r26, 0x05	; 5
    47f0:	8d 91       	ld	r24, X+
    47f2:	9c 91       	ld	r25, X
    47f4:	16 97       	sbiw	r26, 0x06	; 6
    47f6:	64 e6       	ldi	r22, 0x64	; 100
    47f8:	70 e0       	ldi	r23, 0x00	; 0
    47fa:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    47fe:	9b 01       	movw	r18, r22
    4800:	af 01       	movw	r20, r30
    4802:	40 1b       	sub	r20, r16
    4804:	51 0b       	sbc	r21, r17
    4806:	0e 0f       	add	r16, r30
    4808:	1f 1f       	adc	r17, r31
    480a:	c6 01       	movw	r24, r12
    480c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

}
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	df 90       	pop	r13
    481a:	cf 90       	pop	r12
    481c:	08 95       	ret

0000481e <clear_missile_fire>:
LCD_drawLine(lcd,m->s_x,m->s_y,m->x/100,m->y/100);

}
}

void clear_missile_fire(LCD_engine *lcd, Missile *m){
    481e:	cf 92       	push	r12
    4820:	df 92       	push	r13
    4822:	ef 92       	push	r14
    4824:	ff 92       	push	r15
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	6c 01       	movw	r12, r24
    482c:	7b 01       	movw	r14, r22
//LCD_drawLine(lcd,M_1.s_x,M_1.s_y,M_1.o_x,M_1.o_y);
//LCD_drawLine(lcd,m->s_x,m->s_y,m->o_x,m->o_y);

//fillRect(lcd,m->o_x-(m->fire.size/10)-1,m->o_y-(m->fire.size/10)-1,(m->fire.size/5)+2,(m->fire.size/5)+2);

LCD_drawLine(lcd,m->o_x-m->fire.size/10,m->o_y-m->fire.size/10,m->o_x+m->fire.size/10,m->o_y+m->fire.size/10);
    482e:	db 01       	movw	r26, r22
    4830:	13 96       	adiw	r26, 0x03	; 3
    4832:	2c 91       	ld	r18, X
    4834:	13 97       	sbiw	r26, 0x03	; 3
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	52 96       	adiw	r26, 0x12	; 18
    483a:	8c 91       	ld	r24, X
    483c:	52 97       	sbiw	r26, 0x12	; 18
    483e:	6a e0       	ldi	r22, 0x0A	; 10
    4840:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    4844:	08 2f       	mov	r16, r24
    4846:	10 e0       	ldi	r17, 0x00	; 0
    4848:	14 96       	adiw	r26, 0x04	; 4
    484a:	8c 91       	ld	r24, X
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	b9 01       	movw	r22, r18
    4850:	60 1b       	sub	r22, r16
    4852:	71 0b       	sbc	r23, r17
    4854:	ac 01       	movw	r20, r24
    4856:	40 1b       	sub	r20, r16
    4858:	51 0b       	sbc	r21, r17
    485a:	20 0f       	add	r18, r16
    485c:	31 1f       	adc	r19, r17
    485e:	08 0f       	add	r16, r24
    4860:	19 1f       	adc	r17, r25
    4862:	c6 01       	movw	r24, r12
    4864:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,m->o_x-m->fire.size/10,m->o_y+m->fire.size/10,m->o_x+m->fire.size/10,m->o_y-m->fire.size/10);
    4868:	f7 01       	movw	r30, r14
    486a:	23 81       	ldd	r18, Z+3	; 0x03
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	82 89       	ldd	r24, Z+18	; 0x12
    4870:	6a e0       	ldi	r22, 0x0A	; 10
    4872:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	04 81       	ldd	r16, Z+4	; 0x04
    487a:	10 e0       	ldi	r17, 0x00	; 0
    487c:	b9 01       	movw	r22, r18
    487e:	68 1b       	sub	r22, r24
    4880:	79 0b       	sbc	r23, r25
    4882:	ac 01       	movw	r20, r24
    4884:	40 0f       	add	r20, r16
    4886:	51 1f       	adc	r21, r17
    4888:	28 0f       	add	r18, r24
    488a:	39 1f       	adc	r19, r25
    488c:	08 1b       	sub	r16, r24
    488e:	19 0b       	sbc	r17, r25
    4890:	c6 01       	movw	r24, r12
    4892:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

LCD_drawLine(lcd,m->o_x - m->fire.size/7,m->o_y,m->o_x+m->fire.size/7,m->o_y);
    4896:	d7 01       	movw	r26, r14
    4898:	13 96       	adiw	r26, 0x03	; 3
    489a:	4c 91       	ld	r20, X
    489c:	13 97       	sbiw	r26, 0x03	; 3
    489e:	50 e0       	ldi	r21, 0x00	; 0
    48a0:	52 96       	adiw	r26, 0x12	; 18
    48a2:	8c 91       	ld	r24, X
    48a4:	52 97       	sbiw	r26, 0x12	; 18
    48a6:	67 e0       	ldi	r22, 0x07	; 7
    48a8:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    48ac:	28 2f       	mov	r18, r24
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	14 96       	adiw	r26, 0x04	; 4
    48b2:	0c 91       	ld	r16, X
    48b4:	ba 01       	movw	r22, r20
    48b6:	62 1b       	sub	r22, r18
    48b8:	73 0b       	sbc	r23, r19
    48ba:	24 0f       	add	r18, r20
    48bc:	35 1f       	adc	r19, r21
    48be:	c6 01       	movw	r24, r12
    48c0:	40 2f       	mov	r20, r16
    48c2:	50 e0       	ldi	r21, 0x00	; 0
    48c4:	10 e0       	ldi	r17, 0x00	; 0
    48c6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
LCD_drawLine(lcd,m->o_x,m->o_y - m->fire.size/7,m->o_x,m->o_y+m->fire.size/7);
    48ca:	d7 01       	movw	r26, r14
    48cc:	14 96       	adiw	r26, 0x04	; 4
    48ce:	ec 91       	ld	r30, X
    48d0:	14 97       	sbiw	r26, 0x04	; 4
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	52 96       	adiw	r26, 0x12	; 18
    48d6:	8c 91       	ld	r24, X
    48d8:	52 97       	sbiw	r26, 0x12	; 18
    48da:	67 e0       	ldi	r22, 0x07	; 7
    48dc:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    48e0:	08 2f       	mov	r16, r24
    48e2:	10 e0       	ldi	r17, 0x00	; 0
    48e4:	13 96       	adiw	r26, 0x03	; 3
    48e6:	2c 91       	ld	r18, X
    48e8:	af 01       	movw	r20, r30
    48ea:	40 1b       	sub	r20, r16
    48ec:	51 0b       	sbc	r21, r17
    48ee:	0e 0f       	add	r16, r30
    48f0:	1f 1f       	adc	r17, r31
    48f2:	c6 01       	movw	r24, r12
    48f4:	62 2f       	mov	r22, r18
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
    48fe:	1f 91       	pop	r17
    4900:	0f 91       	pop	r16
    4902:	ff 90       	pop	r15
    4904:	ef 90       	pop	r14
    4906:	df 90       	pop	r13
    4908:	cf 90       	pop	r12
    490a:	08 95       	ret

0000490c <draw_missile>:
void clear_missile(LCD_engine *lcd, Missile *m){
//LCD_drawLine(lcd,M_1.s_x,M_1.s_y,M_1.o_x,M_1.o_y);
LCD_drawLine(lcd,m->s_x,m->s_y,m->o_x,m->o_y);
}

void draw_missile(LCD_engine *lcd, Missile *m){
    490c:	ef 92       	push	r14
    490e:	ff 92       	push	r15
    4910:	0f 93       	push	r16
    4912:	1f 93       	push	r17
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	7c 01       	movw	r14, r24
    491a:	eb 01       	movw	r28, r22
//LCD_drawLine(lcd,userMissile.s_x,userMissile.s_y,userMissile.x/100,userMissile.y/100);
if (isOnFire(m)){
    491c:	89 89       	ldd	r24, Y+17	; 0x11
    491e:	88 23       	and	r24, r24
    4920:	21 f0       	breq	.+8      	; 0x492a <draw_missile+0x1e>
draw_missile_fire(lcd,m);}else {
    4922:	c7 01       	movw	r24, r14
    4924:	0e 94 6e 23 	call	0x46dc	; 0x46dc <draw_missile_fire>
    4928:	16 c0       	rjmp	.+44     	; 0x4956 <draw_missile+0x4a>
LCD_drawLine(lcd,m->s_x,m->s_y,m->x/100,m->y/100);
    492a:	e9 81       	ldd	r30, Y+1	; 0x01
    492c:	4a 81       	ldd	r20, Y+2	; 0x02
    492e:	8d 81       	ldd	r24, Y+5	; 0x05
    4930:	9e 81       	ldd	r25, Y+6	; 0x06
    4932:	64 e6       	ldi	r22, 0x64	; 100
    4934:	70 e0       	ldi	r23, 0x00	; 0
    4936:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    493a:	9b 01       	movw	r18, r22
    493c:	8f 81       	ldd	r24, Y+7	; 0x07
    493e:	98 85       	ldd	r25, Y+8	; 0x08
    4940:	64 e6       	ldi	r22, 0x64	; 100
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    4948:	8b 01       	movw	r16, r22
    494a:	c7 01       	movw	r24, r14
    494c:	6e 2f       	mov	r22, r30
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	50 e0       	ldi	r21, 0x00	; 0
    4952:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

}
}
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	1f 91       	pop	r17
    495c:	0f 91       	pop	r16
    495e:	ff 90       	pop	r15
    4960:	ef 90       	pop	r14
    4962:	08 95       	ret

00004964 <clear_missile>:
int abs(int arg){
if (arg<0)
return arg*-1;
return arg;
}
void clear_missile(LCD_engine *lcd, Missile *m){
    4964:	0f 93       	push	r16
    4966:	1f 93       	push	r17
    4968:	fb 01       	movw	r30, r22
//LCD_drawLine(lcd,M_1.s_x,M_1.s_y,M_1.o_x,M_1.o_y);
LCD_drawLine(lcd,m->s_x,m->s_y,m->o_x,m->o_y);
    496a:	61 81       	ldd	r22, Z+1	; 0x01
    496c:	42 81       	ldd	r20, Z+2	; 0x02
    496e:	23 81       	ldd	r18, Z+3	; 0x03
    4970:	04 81       	ldd	r16, Z+4	; 0x04
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	10 e0       	ldi	r17, 0x00	; 0
    497a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
}
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	08 95       	ret

00004984 <start_game>:
return 0;	
}



int start_game(LCD_engine *lcd,int startlevel){
    4984:	2f 92       	push	r2
    4986:	3f 92       	push	r3
    4988:	4f 92       	push	r4
    498a:	5f 92       	push	r5
    498c:	6f 92       	push	r6
    498e:	7f 92       	push	r7
    4990:	8f 92       	push	r8
    4992:	9f 92       	push	r9
    4994:	af 92       	push	r10
    4996:	bf 92       	push	r11
    4998:	cf 92       	push	r12
    499a:	df 92       	push	r13
    499c:	ef 92       	push	r14
    499e:	ff 92       	push	r15
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	df 93       	push	r29
    49a6:	cf 93       	push	r28
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	c4 5b       	subi	r28, 0xB4	; 180
    49ae:	d1 40       	sbci	r29, 0x01	; 1
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	3c 01       	movw	r6, r24
    49bc:	7b 01       	movw	r14, r22
	
	LCD_CLR();
    49be:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
	LCD_RAM_CLR(lcd);
    49c2:	c3 01       	movw	r24, r6
    49c4:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	DOGENABLE;
    49c8:	2c 98       	cbi	0x05, 4	; 5
	setDubbelbuffer(lcd,1);
    49ca:	c3 01       	movw	r24, r6
    49cc:	61 e0       	ldi	r22, 0x01	; 1
    49ce:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    49d2:	c3 01       	movw	r24, r6
    49d4:	61 e0       	ldi	r22, 0x01	; 1
    49d6:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
	DOGENABLE;
    49da:	2c 98       	cbi	0x05, 4	; 5
    49dc:	fe 01       	movw	r30, r28
    49de:	36 96       	adiw	r30, 0x06	; 6
    49e0:	84 e1       	ldi	r24, 0x14	; 20

	Base Bases[MAXBASES];
		
	for (int i=0;i<MAXBASES;i++){
		Bases[i].pos=(100/MAXBASES)*i+20;
		Bases[i].size=10;
    49e2:	2a e0       	ldi	r18, 0x0A	; 10
		Bases[i].alive=1;
    49e4:	91 e0       	ldi	r25, 0x01	; 1
	DOGENABLE;

	Base Bases[MAXBASES];
		
	for (int i=0;i<MAXBASES;i++){
		Bases[i].pos=(100/MAXBASES)*i+20;
    49e6:	81 83       	std	Z+1, r24	; 0x01
		Bases[i].size=10;
    49e8:	20 83       	st	Z, r18
		Bases[i].alive=1;
    49ea:	92 83       	std	Z+2, r25	; 0x02
		Bases[i].active_missiles=0;
    49ec:	13 82       	std	Z+3, r1	; 0x03
    49ee:	34 96       	adiw	r30, 0x04	; 4
    49f0:	87 5e       	subi	r24, 0xE7	; 231
	pixelSetOrClearOrInvert(lcd,SET_PIXELS);
	DOGENABLE;

	Base Bases[MAXBASES];
		
	for (int i=0;i<MAXBASES;i++){
    49f2:	88 37       	cpi	r24, 0x78	; 120
    49f4:	c1 f7       	brne	.-16     	; 0x49e6 <start_game+0x62>
    49f6:	fe 01       	movw	r30, r28
    49f8:	f8 96       	adiw	r30, 0x38	; 56

	

	Missile missiles[MAXMISSILES]; //there cant be more than 10 missiles, but thats more then enugth

	for (int i=0;i<MAXMISSILES;i++){
    49fa:	ce 01       	movw	r24, r28
    49fc:	8c 54       	subi	r24, 0x4C	; 76
    49fe:	9e 4f       	sbci	r25, 0xFE	; 254
		missiles[i].active=0;
    4a00:	10 82       	st	Z, r1
    4a02:	73 96       	adiw	r30, 0x13	; 19

	

	Missile missiles[MAXMISSILES]; //there cant be more than 10 missiles, but thats more then enugth

	for (int i=0;i<MAXMISSILES;i++){
    4a04:	e8 17       	cp	r30, r24
    4a06:	f9 07       	cpc	r31, r25
    4a08:	d9 f7       	brne	.-10     	; 0x4a00 <start_game+0x7c>
		missiles[i].active=0;
	
		}

	Level level; //=malloc(sizeof(Level));
	getLevel(&level,startlevel);
    4a0a:	8e 01       	movw	r16, r28
    4a0c:	0a 5e       	subi	r16, 0xEA	; 234
    4a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a10:	c8 01       	movw	r24, r16
    4a12:	b7 01       	movw	r22, r14
    4a14:	0e 94 4f 22 	call	0x449e	; 0x449e <getLevel>
    4a18:	dd 24       	eor	r13, r13
    4a1a:	c4 55       	subi	r28, 0x54	; 84
    4a1c:	de 4f       	sbci	r29, 0xFE	; 254
    4a1e:	18 82       	st	Y, r1
    4a20:	cc 5a       	subi	r28, 0xAC	; 172
    4a22:	d1 40       	sbci	r29, 0x01	; 1
    4a24:	c5 55       	subi	r28, 0x55	; 85
    4a26:	de 4f       	sbci	r29, 0xFE	; 254
    4a28:	18 82       	st	Y, r1
    4a2a:	cb 5a       	subi	r28, 0xAB	; 171
    4a2c:	d1 40       	sbci	r29, 0x01	; 1
    4a2e:	c6 55       	subi	r28, 0x56	; 86
    4a30:	de 4f       	sbci	r29, 0xFE	; 254
    4a32:	18 82       	st	Y, r1
    4a34:	ca 5a       	subi	r28, 0xAA	; 170
    4a36:	d1 40       	sbci	r29, 0x01	; 1

		
		//check level
		if (level_delay<=0){//send next

			if (level.delay[level.index]==0){//last
    4a38:	cd 54       	subi	r28, 0x4D	; 77
    4a3a:	de 4f       	sbci	r29, 0xFE	; 254
    4a3c:	19 83       	std	Y+1, r17	; 0x01
    4a3e:	08 83       	st	Y, r16
    4a40:	c3 5b       	subi	r28, 0xB3	; 179
    4a42:	d1 40       	sbci	r29, 0x01	; 1
			

			}else {
				int base_index =	closestBase(Bases,100,99);
				if (base_index>=0)
					send_missile(missiles,30,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);		
    4a44:	69 e2       	ldi	r22, 0x29	; 41
    4a46:	26 2e       	mov	r2, r22
    4a48:	31 2c       	mov	r3, r1
    4a4a:	2c 0e       	add	r2, r28
    4a4c:	3d 1e       	adc	r3, r29
    4a4e:	2e 01       	movw	r4, r28
    4a50:	08 94       	sec
    4a52:	41 1c       	adc	r4, r1
    4a54:	51 1c       	adc	r5, r1
		}



		if (TOUCH_STATE==TOUCH_STATE_PRESSED){
		Point p=getTouch();
    4a56:	ce 01       	movw	r24, r28
    4a58:	8b 55       	subi	r24, 0x5B	; 91
    4a5a:	9e 4f       	sbci	r25, 0xFE	; 254
    4a5c:	cf 54       	subi	r28, 0x4F	; 79
    4a5e:	de 4f       	sbci	r29, 0xFE	; 254
    4a60:	99 83       	std	Y+1, r25	; 0x01
    4a62:	88 83       	st	Y, r24
    4a64:	c1 5b       	subi	r28, 0xB1	; 177
    4a66:	d1 40       	sbci	r29, 0x01	; 1
    4a68:	de 01       	movw	r26, r28
    4a6a:	aa 55       	subi	r26, 0x5A	; 90
    4a6c:	be 4f       	sbci	r27, 0xFE	; 254
    4a6e:	c1 55       	subi	r28, 0x51	; 81
    4a70:	de 4f       	sbci	r29, 0xFE	; 254
    4a72:	b9 83       	std	Y+1, r27	; 0x01
    4a74:	a8 83       	st	Y, r26
    4a76:	cf 5a       	subi	r28, 0xAF	; 175
    4a78:	d1 40       	sbci	r29, 0x01	; 1
	char spread_count=0;
	//return 1;
	while (!GAME){//Game loop

		
		if (START_isPressedAndRel()){
    4a7a:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    4a7e:	88 23       	and	r24, r24
    4a80:	21 f0       	breq	.+8      	; 0x4a8a <start_game+0x106>
    4a82:	55 e0       	ldi	r21, 0x05	; 5
    4a84:	85 2e       	mov	r8, r21
    4a86:	91 2c       	mov	r9, r1
    4a88:	b4 c2       	rjmp	.+1384   	; 0x4ff2 <start_game+0x66e>
		return 5;
		}

			
		game_ticks = sys_time; //current time
    4a8a:	e0 91 65 0a 	lds	r30, 0x0A65
    4a8e:	f0 91 66 0a 	lds	r31, 0x0A66
    4a92:	c3 55       	subi	r28, 0x53	; 83
    4a94:	de 4f       	sbci	r29, 0xFE	; 254
    4a96:	f9 83       	std	Y+1, r31	; 0x01
    4a98:	e8 83       	st	Y, r30
    4a9a:	cd 5a       	subi	r28, 0xAD	; 173
    4a9c:	d1 40       	sbci	r29, 0x01	; 1

		
		//check level
		if (level_delay<=0){//send next
    4a9e:	dd 20       	and	r13, r13
    4aa0:	09 f0       	breq	.+2      	; 0x4aa4 <start_game+0x120>
    4aa2:	d3 c0       	rjmp	.+422    	; 0x4c4a <start_game+0x2c6>

			if (level.delay[level.index]==0){//last
    4aa4:	8f a1       	ldd	r24, Y+39	; 0x27
    4aa6:	e6 e1       	ldi	r30, 0x16	; 22
    4aa8:	f0 e0       	ldi	r31, 0x00	; 0
    4aaa:	ec 0f       	add	r30, r28
    4aac:	fd 1f       	adc	r31, r29
    4aae:	e8 0f       	add	r30, r24
    4ab0:	f1 1d       	adc	r31, r1
    4ab2:	d0 80       	ld	r13, Z
    4ab4:	dd 20       	and	r13, r13
    4ab6:	d1 f4       	brne	.+52     	; 0x4aec <start_game+0x168>
				
				if (level.wave>level.waves){//WON
    4ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    4aba:	8d a1       	ldd	r24, Y+37	; 0x25
    4abc:	89 17       	cp	r24, r25
    4abe:	90 f4       	brcc	.+36     	; 0x4ae4 <start_game+0x160>
					//GAME=1;
					winning_count++;
    4ac0:	c5 55       	subi	r28, 0x55	; 85
    4ac2:	de 4f       	sbci	r29, 0xFE	; 254
    4ac4:	f8 81       	ld	r31, Y
    4ac6:	cb 5a       	subi	r28, 0xAB	; 171
    4ac8:	d1 40       	sbci	r29, 0x01	; 1
    4aca:	ff 5f       	subi	r31, 0xFF	; 255
    4acc:	c5 55       	subi	r28, 0x55	; 85
    4ace:	de 4f       	sbci	r29, 0xFE	; 254
    4ad0:	f8 83       	st	Y, r31
    4ad2:	cb 5a       	subi	r28, 0xAB	; 171
    4ad4:	d1 40       	sbci	r29, 0x01	; 1
					if (winning_count>=250)
    4ad6:	fa 3f       	cpi	r31, 0xFA	; 250
    4ad8:	08 f4       	brcc	.+2      	; 0x4adc <start_game+0x158>
    4ada:	b8 c0       	rjmp	.+368    	; 0x4c4c <start_game+0x2c8>
    4adc:	41 e0       	ldi	r20, 0x01	; 1
    4ade:	84 2e       	mov	r8, r20
    4ae0:	91 2c       	mov	r9, r1
    4ae2:	b6 c0       	rjmp	.+364    	; 0x4c50 <start_game+0x2cc>
						GAME=1;
				}else {
				level.index=0;
    4ae4:	1f a2       	std	Y+39, r1	; 0x27
				level.wave++;
    4ae6:	9f 5f       	subi	r25, 0xFF	; 255
    4ae8:	9e a3       	std	Y+38, r25	; 0x26
    4aea:	b0 c0       	rjmp	.+352    	; 0x4c4c <start_game+0x2c8>
				
				
			}else {
				
			level_delay=level.delay[level.index];
			level.index++;
    4aec:	8f 5f       	subi	r24, 0xFF	; 255
    4aee:	8f a3       	std	Y+39, r24	; 0x27
			spread_count++;
    4af0:	c6 55       	subi	r28, 0x56	; 86
    4af2:	de 4f       	sbci	r29, 0xFE	; 254
    4af4:	28 81       	ld	r18, Y
    4af6:	ca 5a       	subi	r28, 0xAA	; 170
    4af8:	d1 40       	sbci	r29, 0x01	; 1
    4afa:	2f 5f       	subi	r18, 0xFF	; 255
    4afc:	c6 55       	subi	r28, 0x56	; 86
    4afe:	de 4f       	sbci	r29, 0xFE	; 254
    4b00:	28 83       	st	Y, r18
    4b02:	ca 5a       	subi	r28, 0xAA	; 170
    4b04:	d1 40       	sbci	r29, 0x01	; 1
			

			//send missile
			//Get target
			
			if (spread_count%8==0){
    4b06:	82 2f       	mov	r24, r18
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	87 70       	andi	r24, 0x07	; 7
    4b0c:	90 70       	andi	r25, 0x00	; 0
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	91 f4       	brne	.+36     	; 0x4b36 <start_game+0x1b2>
				int base_index =	closestBase(Bases,20,99);
    4b12:	ce 01       	movw	r24, r28
    4b14:	06 96       	adiw	r24, 0x06	; 6
    4b16:	64 e1       	ldi	r22, 0x14	; 20
    4b18:	43 e6       	ldi	r20, 0x63	; 99
    4b1a:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4b1e:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4b20:	97 fd       	sbrc	r25, 7
    4b22:	94 c0       	rjmp	.+296    	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,20,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4b24:	ee 0f       	add	r30, r30
    4b26:	ff 1f       	adc	r31, r31
    4b28:	ee 0f       	add	r30, r30
    4b2a:	ff 1f       	adc	r31, r31
    4b2c:	e4 0d       	add	r30, r4
    4b2e:	f5 1d       	adc	r31, r5
    4b30:	c1 01       	movw	r24, r2
    4b32:	64 e1       	ldi	r22, 0x14	; 20
    4b34:	6e c0       	rjmp	.+220    	; 0x4c12 <start_game+0x28e>
			}else if (spread_count%8==1){
    4b36:	81 30       	cpi	r24, 0x01	; 1
    4b38:	91 05       	cpc	r25, r1
    4b3a:	91 f4       	brne	.+36     	; 0x4b60 <start_game+0x1dc>
				int base_index =	closestBase(Bases,10,99);
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	06 96       	adiw	r24, 0x06	; 6
    4b40:	6a e0       	ldi	r22, 0x0A	; 10
    4b42:	43 e6       	ldi	r20, 0x63	; 99
    4b44:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4b48:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4b4a:	97 fd       	sbrc	r25, 7
    4b4c:	7f c0       	rjmp	.+254    	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,90,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4b4e:	ee 0f       	add	r30, r30
    4b50:	ff 1f       	adc	r31, r31
    4b52:	ee 0f       	add	r30, r30
    4b54:	ff 1f       	adc	r31, r31
    4b56:	e4 0d       	add	r30, r4
    4b58:	f5 1d       	adc	r31, r5
    4b5a:	c1 01       	movw	r24, r2
    4b5c:	6a e5       	ldi	r22, 0x5A	; 90
    4b5e:	59 c0       	rjmp	.+178    	; 0x4c12 <start_game+0x28e>
			

			}else if (spread_count%8==2){
    4b60:	82 30       	cpi	r24, 0x02	; 2
    4b62:	91 05       	cpc	r25, r1
    4b64:	91 f4       	brne	.+36     	; 0x4b8a <start_game+0x206>
				int base_index =	closestBase(Bases,80,99);
    4b66:	ce 01       	movw	r24, r28
    4b68:	06 96       	adiw	r24, 0x06	; 6
    4b6a:	60 e5       	ldi	r22, 0x50	; 80
    4b6c:	43 e6       	ldi	r20, 0x63	; 99
    4b6e:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4b72:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4b74:	97 fd       	sbrc	r25, 7
    4b76:	6a c0       	rjmp	.+212    	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,10,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4b78:	ee 0f       	add	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	ee 0f       	add	r30, r30
    4b7e:	ff 1f       	adc	r31, r31
    4b80:	e4 0d       	add	r30, r4
    4b82:	f5 1d       	adc	r31, r5
    4b84:	c1 01       	movw	r24, r2
    4b86:	6a e0       	ldi	r22, 0x0A	; 10
    4b88:	44 c0       	rjmp	.+136    	; 0x4c12 <start_game+0x28e>
			

			}else if (spread_count%8==3){
    4b8a:	83 30       	cpi	r24, 0x03	; 3
    4b8c:	91 05       	cpc	r25, r1
    4b8e:	21 f4       	brne	.+8      	; 0x4b98 <start_game+0x214>
				int base_index =	closestBase(Bases,50,99);
    4b90:	ce 01       	movw	r24, r28
    4b92:	06 96       	adiw	r24, 0x06	; 6
    4b94:	62 e3       	ldi	r22, 0x32	; 50
    4b96:	4a c0       	rjmp	.+148    	; 0x4c2c <start_game+0x2a8>
				if (base_index>=0)
					send_missile(missiles,30,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
			

			}else if (spread_count%8==4){
    4b98:	84 30       	cpi	r24, 0x04	; 4
    4b9a:	91 05       	cpc	r25, r1
    4b9c:	91 f4       	brne	.+36     	; 0x4bc2 <start_game+0x23e>
				int base_index =	closestBase(Bases,30,99);
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	06 96       	adiw	r24, 0x06	; 6
    4ba2:	6e e1       	ldi	r22, 0x1E	; 30
    4ba4:	43 e6       	ldi	r20, 0x63	; 99
    4ba6:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4baa:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4bac:	97 fd       	sbrc	r25, 7
    4bae:	4e c0       	rjmp	.+156    	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,120,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4bb0:	ee 0f       	add	r30, r30
    4bb2:	ff 1f       	adc	r31, r31
    4bb4:	ee 0f       	add	r30, r30
    4bb6:	ff 1f       	adc	r31, r31
    4bb8:	e4 0d       	add	r30, r4
    4bba:	f5 1d       	adc	r31, r5
    4bbc:	c1 01       	movw	r24, r2
    4bbe:	68 e7       	ldi	r22, 0x78	; 120
    4bc0:	28 c0       	rjmp	.+80     	; 0x4c12 <start_game+0x28e>
			

			}else if (spread_count%8==5){
    4bc2:	85 30       	cpi	r24, 0x05	; 5
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	91 f4       	brne	.+36     	; 0x4bec <start_game+0x268>
				int base_index =	closestBase(Bases,80,99);
    4bc8:	ce 01       	movw	r24, r28
    4bca:	06 96       	adiw	r24, 0x06	; 6
    4bcc:	60 e5       	ldi	r22, 0x50	; 80
    4bce:	43 e6       	ldi	r20, 0x63	; 99
    4bd0:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4bd4:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4bd6:	97 fd       	sbrc	r25, 7
    4bd8:	39 c0       	rjmp	.+114    	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,100,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4bda:	ee 0f       	add	r30, r30
    4bdc:	ff 1f       	adc	r31, r31
    4bde:	ee 0f       	add	r30, r30
    4be0:	ff 1f       	adc	r31, r31
    4be2:	e4 0d       	add	r30, r4
    4be4:	f5 1d       	adc	r31, r5
    4be6:	c1 01       	movw	r24, r2
    4be8:	64 e6       	ldi	r22, 0x64	; 100
    4bea:	13 c0       	rjmp	.+38     	; 0x4c12 <start_game+0x28e>
			

			}else if (spread_count%8==6){
    4bec:	06 97       	sbiw	r24, 0x06	; 6
    4bee:	d9 f4       	brne	.+54     	; 0x4c26 <start_game+0x2a2>
				int base_index =	closestBase(Bases,70,99);
    4bf0:	ce 01       	movw	r24, r28
    4bf2:	06 96       	adiw	r24, 0x06	; 6
    4bf4:	66 e4       	ldi	r22, 0x46	; 70
    4bf6:	43 e6       	ldi	r20, 0x63	; 99
    4bf8:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4bfc:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4bfe:	97 fd       	sbrc	r25, 7
    4c00:	25 c0       	rjmp	.+74     	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,40,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);
    4c02:	ee 0f       	add	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	ee 0f       	add	r30, r30
    4c08:	ff 1f       	adc	r31, r31
    4c0a:	e4 0d       	add	r30, r4
    4c0c:	f5 1d       	adc	r31, r5
    4c0e:	c1 01       	movw	r24, r2
    4c10:	68 e2       	ldi	r22, 0x28	; 40
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	26 81       	ldd	r18, Z+6	; 0x06
    4c16:	0c e3       	ldi	r16, 0x3C	; 60
    4c18:	ee 24       	eor	r14, r14
    4c1a:	ea 94       	dec	r14
    4c1c:	b8 e2       	ldi	r27, 0x28	; 40
    4c1e:	cb 2e       	mov	r12, r27
    4c20:	0e 94 53 23 	call	0x46a6	; 0x46a6 <send_missile>
    4c24:	13 c0       	rjmp	.+38     	; 0x4c4c <start_game+0x2c8>
			

			}else {
				int base_index =	closestBase(Bases,100,99);
    4c26:	ce 01       	movw	r24, r28
    4c28:	06 96       	adiw	r24, 0x06	; 6
    4c2a:	64 e6       	ldi	r22, 0x64	; 100
    4c2c:	43 e6       	ldi	r20, 0x63	; 99
    4c2e:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4c32:	fc 01       	movw	r30, r24
				if (base_index>=0)
    4c34:	97 fd       	sbrc	r25, 7
    4c36:	0a c0       	rjmp	.+20     	; 0x4c4c <start_game+0x2c8>
					send_missile(missiles,30,0,Bases[(unsigned)base_index].pos,60,-1,M_SPEED);		
    4c38:	ee 0f       	add	r30, r30
    4c3a:	ff 1f       	adc	r31, r31
    4c3c:	ee 0f       	add	r30, r30
    4c3e:	ff 1f       	adc	r31, r31
    4c40:	e4 0d       	add	r30, r4
    4c42:	f5 1d       	adc	r31, r5
    4c44:	c1 01       	movw	r24, r2
    4c46:	6e e1       	ldi	r22, 0x1E	; 30
    4c48:	e4 cf       	rjmp	.-56     	; 0x4c12 <start_game+0x28e>
			}
			}
		}else {
			level_delay--;
    4c4a:	da 94       	dec	r13
    4c4c:	88 24       	eor	r8, r8
    4c4e:	99 24       	eor	r9, r9
		}



		if (TOUCH_STATE==TOUCH_STATE_PRESSED){
    4c50:	80 91 64 0a 	lds	r24, 0x0A64
    4c54:	82 30       	cpi	r24, 0x02	; 2
    4c56:	09 f0       	breq	.+2      	; 0x4c5a <start_game+0x2d6>
    4c58:	60 c0       	rjmp	.+192    	; 0x4d1a <start_game+0x396>
		Point p=getTouch();
    4c5a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <getTouch>
    4c5e:	cb 55       	subi	r28, 0x5B	; 91
    4c60:	de 4f       	sbci	r29, 0xFE	; 254
    4c62:	28 83       	st	Y, r18
    4c64:	c5 5a       	subi	r28, 0xA5	; 165
    4c66:	d1 40       	sbci	r29, 0x01	; 1
    4c68:	ca 55       	subi	r28, 0x5A	; 90
    4c6a:	de 4f       	sbci	r29, 0xFE	; 254
    4c6c:	38 83       	st	Y, r19
    4c6e:	c6 5a       	subi	r28, 0xA6	; 166
    4c70:	d1 40       	sbci	r29, 0x01	; 1
    4c72:	c9 55       	subi	r28, 0x59	; 89
    4c74:	de 4f       	sbci	r29, 0xFE	; 254
    4c76:	48 83       	st	Y, r20
    4c78:	c7 5a       	subi	r28, 0xA7	; 167
    4c7a:	d1 40       	sbci	r29, 0x01	; 1
    4c7c:	c8 55       	subi	r28, 0x58	; 88
    4c7e:	de 4f       	sbci	r29, 0xFE	; 254
    4c80:	58 83       	st	Y, r21
    4c82:	c8 5a       	subi	r28, 0xA8	; 168
    4c84:	d1 40       	sbci	r29, 0x01	; 1
    4c86:	c7 55       	subi	r28, 0x57	; 87
    4c88:	de 4f       	sbci	r29, 0xFE	; 254
    4c8a:	68 83       	st	Y, r22
    4c8c:	c9 5a       	subi	r28, 0xA9	; 169
    4c8e:	d1 40       	sbci	r29, 0x01	; 1
    4c90:	d2 01       	movw	r26, r4
    4c92:	fe 01       	movw	r30, r28
    4c94:	eb 55       	subi	r30, 0x5B	; 91
    4c96:	fe 4f       	sbci	r31, 0xFE	; 254
    4c98:	85 e0       	ldi	r24, 0x05	; 5
    4c9a:	01 90       	ld	r0, Z+
    4c9c:	0d 92       	st	X+, r0
    4c9e:	81 50       	subi	r24, 0x01	; 1
    4ca0:	e1 f7       	brne	.-8      	; 0x4c9a <start_game+0x316>
    4ca2:	c9 80       	ldd	r12, Y+1	; 0x01
    4ca4:	0b 81       	ldd	r16, Y+3	; 0x03
    4ca6:	1c 81       	ldd	r17, Y+4	; 0x04
		if (p.down_count<8){
    4ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    4caa:	88 30       	cpi	r24, 0x08	; 8
    4cac:	b0 f1       	brcs	.+108    	; 0x4d1a <start_game+0x396>
			//pressCount++;
			pressCount=0;
		}else {//pressed, sen missile
		if (pressCount!=10 && p.y<48){
    4cae:	c4 55       	subi	r28, 0x54	; 84
    4cb0:	de 4f       	sbci	r29, 0xFE	; 254
    4cb2:	88 81       	ld	r24, Y
    4cb4:	cc 5a       	subi	r28, 0xAC	; 172
    4cb6:	d1 40       	sbci	r29, 0x01	; 1
    4cb8:	8a 30       	cpi	r24, 0x0A	; 10
    4cba:	a1 f1       	breq	.+104    	; 0x4d24 <start_game+0x3a0>
    4cbc:	00 33       	cpi	r16, 0x30	; 48
    4cbe:	11 05       	cpc	r17, r1
    4cc0:	8c f5       	brge	.+98     	; 0x4d24 <start_game+0x3a0>
		pressCount=10;

		//Point p=getTouch();
		//init_missile(&userMissile,10,60,p.x,p.y,M_SPEED);
		 int base_index =	closestBase(Bases,p.x,level.max_active_missiles);
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	06 96       	adiw	r24, 0x06	; 6
    4cc6:	6c 2d       	mov	r22, r12
    4cc8:	48 a5       	ldd	r20, Y+40	; 0x28
    4cca:	0e 94 25 22 	call	0x444a	; 0x444a <closestBase>
    4cce:	7c 01       	movw	r14, r24
		if (base_index>=0){//else cannot fire...
    4cd0:	97 ff       	sbrs	r25, 7
    4cd2:	07 c0       	rjmp	.+14     	; 0x4ce2 <start_game+0x35e>
    4cd4:	9a e0       	ldi	r25, 0x0A	; 10
    4cd6:	c4 55       	subi	r28, 0x54	; 84
    4cd8:	de 4f       	sbci	r29, 0xFE	; 254
    4cda:	98 83       	st	Y, r25
    4cdc:	cc 5a       	subi	r28, 0xAC	; 172
    4cde:	d1 40       	sbci	r29, 0x01	; 1
    4ce0:	21 c0       	rjmp	.+66     	; 0x4d24 <start_game+0x3a0>
			//error
			//break;

					send_missile(missiles,Bases[(unsigned)base_index].pos,50,p.x,p.y,base_index,M_DEF_SPEED);
    4ce2:	5c 01       	movw	r10, r24
    4ce4:	aa 0c       	add	r10, r10
    4ce6:	bb 1c       	adc	r11, r11
    4ce8:	aa 0c       	add	r10, r10
    4cea:	bb 1c       	adc	r11, r11
    4cec:	a4 0c       	add	r10, r4
    4cee:	b5 1c       	adc	r11, r5
    4cf0:	c1 01       	movw	r24, r2
    4cf2:	d5 01       	movw	r26, r10
    4cf4:	16 96       	adiw	r26, 0x06	; 6
    4cf6:	6c 91       	ld	r22, X
    4cf8:	42 e3       	ldi	r20, 0x32	; 50
    4cfa:	2c 2d       	mov	r18, r12
    4cfc:	72 e3       	ldi	r23, 0x32	; 50
    4cfe:	c7 2e       	mov	r12, r23
    4d00:	0e 94 53 23 	call	0x46a6	; 0x46a6 <send_missile>
					Bases[(unsigned)base_index].active_missiles++;
    4d04:	f5 01       	movw	r30, r10
    4d06:	80 85       	ldd	r24, Z+8	; 0x08
    4d08:	8f 5f       	subi	r24, 0xFF	; 255
    4d0a:	80 87       	std	Z+8, r24	; 0x08
    4d0c:	fa e0       	ldi	r31, 0x0A	; 10
    4d0e:	c4 55       	subi	r28, 0x54	; 84
    4d10:	de 4f       	sbci	r29, 0xFE	; 254
    4d12:	f8 83       	st	Y, r31
    4d14:	cc 5a       	subi	r28, 0xAC	; 172
    4d16:	d1 40       	sbci	r29, 0x01	; 1
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <start_game+0x3a0>
    4d1a:	c4 55       	subi	r28, 0x54	; 84
    4d1c:	de 4f       	sbci	r29, 0xFE	; 254
    4d1e:	18 82       	st	Y, r1
    4d20:	cc 5a       	subi	r28, 0xAC	; 172
    4d22:	d1 40       	sbci	r29, 0x01	; 1
		}
		}else {
		pressCount=0;
		}
		
		pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    4d24:	c3 01       	movw	r24, r6
    4d26:	60 e0       	ldi	r22, 0x00	; 0
    4d28:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
    4d2c:	5a e2       	ldi	r21, 0x2A	; 42
    4d2e:	e5 2e       	mov	r14, r21
    4d30:	f1 2c       	mov	r15, r1
    4d32:	ec 0e       	add	r14, r28
    4d34:	fd 1e       	adc	r15, r29
		for (int i=0;i<MAXMISSILES;i++){
		if (!missiles[i].active)
    4d36:	d7 01       	movw	r26, r14
    4d38:	1e 96       	adiw	r26, 0x0e	; 14
    4d3a:	8c 91       	ld	r24, X
    4d3c:	1e 97       	sbiw	r26, 0x0e	; 14
    4d3e:	88 23       	and	r24, r24
    4d40:	81 f0       	breq	.+32     	; 0x4d62 <start_game+0x3de>
return arg*-1;
return arg;
}
void clear_missile(LCD_engine *lcd, Missile *m){
//LCD_drawLine(lcd,M_1.s_x,M_1.s_y,M_1.o_x,M_1.o_y);
LCD_drawLine(lcd,m->s_x,m->s_y,m->o_x,m->o_y);
    4d42:	6c 91       	ld	r22, X
    4d44:	11 96       	adiw	r26, 0x01	; 1
    4d46:	4c 91       	ld	r20, X
    4d48:	11 97       	sbiw	r26, 0x01	; 1
    4d4a:	12 96       	adiw	r26, 0x02	; 2
    4d4c:	2c 91       	ld	r18, X
    4d4e:	12 97       	sbiw	r26, 0x02	; 2
    4d50:	13 96       	adiw	r26, 0x03	; 3
    4d52:	0c 91       	ld	r16, X
    4d54:	c3 01       	movw	r24, r6
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	10 e0       	ldi	r17, 0x00	; 0
    4d5e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>
    4d62:	e3 e1       	ldi	r30, 0x13	; 19
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	ee 0e       	add	r14, r30
    4d68:	ff 1e       	adc	r15, r31
		}else {
		pressCount=0;
		}
		
		pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
		for (int i=0;i<MAXMISSILES;i++){
    4d6a:	c1 55       	subi	r28, 0x51	; 81
    4d6c:	de 4f       	sbci	r29, 0xFE	; 254
    4d6e:	88 81       	ld	r24, Y
    4d70:	99 81       	ldd	r25, Y+1	; 0x01
    4d72:	cf 5a       	subi	r28, 0xAF	; 175
    4d74:	d1 40       	sbci	r29, 0x01	; 1
    4d76:	e8 16       	cp	r14, r24
    4d78:	f9 06       	cpc	r15, r25
    4d7a:	e9 f6       	brne	.-70     	; 0x4d36 <start_game+0x3b2>
			clear_missile(lcd,&missiles[i]);	
		}



		pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    4d7c:	c3 01       	movw	r24, r6
    4d7e:	61 e0       	ldi	r22, 0x01	; 1
    4d80:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
    4d84:	71 01       	movw	r14, r2
    4d86:	81 01       	movw	r16, r2
		for (int i=0;i<MAXMISSILES;i++){
		if (!missiles[i].active)
    4d88:	d8 01       	movw	r26, r16
    4d8a:	1f 96       	adiw	r26, 0x0f	; 15
    4d8c:	8c 91       	ld	r24, X
    4d8e:	88 23       	and	r24, r24
    4d90:	21 f0       	breq	.+8      	; 0x4d9a <start_game+0x416>
				continue;
			draw_missile(lcd,&missiles[i]);	
    4d92:	c3 01       	movw	r24, r6
    4d94:	b8 01       	movw	r22, r16
    4d96:	0e 94 86 24 	call	0x490c	; 0x490c <draw_missile>
    4d9a:	0d 5e       	subi	r16, 0xED	; 237
    4d9c:	1f 4f       	sbci	r17, 0xFF	; 255
		}



		pixelSetOrClearOrInvert(lcd,SET_PIXELS);
		for (int i=0;i<MAXMISSILES;i++){
    4d9e:	cf 54       	subi	r28, 0x4F	; 79
    4da0:	de 4f       	sbci	r29, 0xFE	; 254
    4da2:	e8 81       	ld	r30, Y
    4da4:	f9 81       	ldd	r31, Y+1	; 0x01
    4da6:	c1 5b       	subi	r28, 0xB1	; 177
    4da8:	d1 40       	sbci	r29, 0x01	; 1
    4daa:	0e 17       	cp	r16, r30
    4dac:	1f 07       	cpc	r17, r31
    4dae:	61 f7       	brne	.-40     	; 0x4d88 <start_game+0x404>

		//check fire


		for (int i=0;i<MAXMISSILES;i++){
			if (!missiles[i].active)
    4db0:	d7 01       	movw	r26, r14
    4db2:	1f 96       	adiw	r26, 0x0f	; 15
    4db4:	8c 91       	ld	r24, X
    4db6:	88 23       	and	r24, r24
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <start_game+0x438>
    4dba:	5d c0       	rjmp	.+186    	; 0x4e76 <start_game+0x4f2>
				continue;
    4dbc:	ce 2c       	mov	r12, r14
    4dbe:	af 2c       	mov	r10, r15
			if (uppdateMissile(&missiles[i])){//this missile is done...
    4dc0:	c7 01       	movw	r24, r14
    4dc2:	0e 94 90 21 	call	0x4320	; 0x4320 <uppdateMissile>
    4dc6:	88 23       	and	r24, r24
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <start_game+0x448>
    4dca:	3f c0       	rjmp	.+126    	; 0x4e4a <start_game+0x4c6>
				if (missiles[i].sent_from>=0){//sent from a base
					Bases[missiles[i].sent_from].active_missiles--;
    4dcc:	d7 01       	movw	r26, r14
    4dce:	50 96       	adiw	r26, 0x10	; 16
    4dd0:	ec 91       	ld	r30, X
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	ee 0f       	add	r30, r30
    4dd6:	ff 1f       	adc	r31, r31
    4dd8:	ee 0f       	add	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	e4 0d       	add	r30, r4
    4dde:	f5 1d       	adc	r31, r5
    4de0:	80 85       	ldd	r24, Z+8	; 0x08
    4de2:	81 50       	subi	r24, 0x01	; 1
    4de4:	80 87       	std	Z+8, r24	; 0x08
				}
				pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    4de6:	c3 01       	movw	r24, r6
    4de8:	60 e0       	ldi	r22, 0x00	; 0
    4dea:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
				int hit = handle_fire_and_bases(Bases,missiles[i].o_x,missiles[i].o_y);
    4dee:	ce 01       	movw	r24, r28
    4df0:	06 96       	adiw	r24, 0x06	; 6
    4df2:	f7 01       	movw	r30, r14
    4df4:	63 81       	ldd	r22, Z+3	; 0x03
    4df6:	44 81       	ldd	r20, Z+4	; 0x04
    4df8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <handle_fire_and_bases>
				if (hit>=0){
    4dfc:	97 fd       	sbrc	r25, 7
    4dfe:	1c c0       	rjmp	.+56     	; 0x4e38 <start_game+0x4b4>
					Base *baseKilled=&Bases[hit];
    4e00:	fc 01       	movw	r30, r24
    4e02:	ee 0f       	add	r30, r30
    4e04:	ff 1f       	adc	r31, r31
    4e06:	ee 0f       	add	r30, r30
    4e08:	ff 1f       	adc	r31, r31
    4e0a:	86 e0       	ldi	r24, 0x06	; 6
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	8c 0f       	add	r24, r28
    4e10:	9d 1f       	adc	r25, r29
    4e12:	e8 0f       	add	r30, r24
    4e14:	f9 1f       	adc	r31, r25
					
					
					fillRect(lcd,baseKilled->pos-baseKilled->size,62-baseKilled->size,baseKilled->size*2,baseKilled->size*2);
    4e16:	80 81       	ld	r24, Z
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	8c 01       	movw	r16, r24
    4e1c:	00 0f       	add	r16, r16
    4e1e:	11 1f       	adc	r17, r17
    4e20:	61 81       	ldd	r22, Z+1	; 0x01
    4e22:	70 e0       	ldi	r23, 0x00	; 0
    4e24:	68 1b       	sub	r22, r24
    4e26:	79 0b       	sbc	r23, r25
    4e28:	4e e3       	ldi	r20, 0x3E	; 62
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	48 1b       	sub	r20, r24
    4e2e:	59 0b       	sbc	r21, r25
    4e30:	c3 01       	movw	r24, r6
    4e32:	98 01       	movw	r18, r16
    4e34:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>
				
				}
				
				clear_missile_fire(lcd,&missiles[i]);
    4e38:	c3 01       	movw	r24, r6
    4e3a:	6c 2d       	mov	r22, r12
    4e3c:	7a 2d       	mov	r23, r10
    4e3e:	0e 94 0f 24 	call	0x481e	; 0x481e <clear_missile_fire>
				
				
				missiles[i].active=0;
    4e42:	d7 01       	movw	r26, r14
    4e44:	1f 96       	adiw	r26, 0x0f	; 15
    4e46:	1c 92       	st	X, r1
    4e48:	16 c0       	rjmp	.+44     	; 0x4e76 <start_game+0x4f2>
				
					

			}else {
			
				if (missiles[i].x>=130*100 || missiles[i].x<0 || missiles[i].y>65*100 || missiles[i].y<0){
    4e4a:	f7 01       	movw	r30, r14
    4e4c:	85 81       	ldd	r24, Z+5	; 0x05
    4e4e:	96 81       	ldd	r25, Z+6	; 0x06
    4e50:	88 5c       	subi	r24, 0xC8	; 200
    4e52:	92 43       	sbci	r25, 0x32	; 50
    4e54:	58 f4       	brcc	.+22     	; 0x4e6c <start_game+0x4e8>
    4e56:	d7 01       	movw	r26, r14
    4e58:	17 96       	adiw	r26, 0x07	; 7
    4e5a:	8d 91       	ld	r24, X+
    4e5c:	9c 91       	ld	r25, X
    4e5e:	18 97       	sbiw	r26, 0x08	; 8
    4e60:	b9 e1       	ldi	r27, 0x19	; 25
    4e62:	85 36       	cpi	r24, 0x65	; 101
    4e64:	9b 07       	cpc	r25, r27
    4e66:	14 f4       	brge	.+4      	; 0x4e6c <start_game+0x4e8>
    4e68:	97 ff       	sbrs	r25, 7
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <start_game+0x4f2>
					missiles[i].target_x=missiles[i].o_x;
    4e6c:	f7 01       	movw	r30, r14
    4e6e:	83 81       	ldd	r24, Z+3	; 0x03
    4e70:	85 87       	std	Z+13, r24	; 0x0d
					missiles[i].target_y=missiles[i].o_y;
    4e72:	84 81       	ldd	r24, Z+4	; 0x04
    4e74:	86 87       	std	Z+14, r24	; 0x0e
    4e76:	83 e1       	ldi	r24, 0x13	; 19
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	e8 0e       	add	r14, r24
    4e7c:	f9 1e       	adc	r15, r25


		//check fire


		for (int i=0;i<MAXMISSILES;i++){
    4e7e:	cf 54       	subi	r28, 0x4F	; 79
    4e80:	de 4f       	sbci	r29, 0xFE	; 254
    4e82:	a8 81       	ld	r26, Y
    4e84:	b9 81       	ldd	r27, Y+1	; 0x01
    4e86:	c1 5b       	subi	r28, 0xB1	; 177
    4e88:	d1 40       	sbci	r29, 0x01	; 1
    4e8a:	ea 16       	cp	r14, r26
    4e8c:	fb 06       	cpc	r15, r27
    4e8e:	09 f0       	breq	.+2      	; 0x4e92 <start_game+0x50e>
    4e90:	8f cf       	rjmp	.-226    	; 0x4db0 <start_game+0x42c>
    4e92:	de 01       	movw	r26, r28
    4e94:	9c 96       	adiw	r26, 0x2c	; 44
    4e96:	00 e0       	ldi	r16, 0x00	; 0
    4e98:	10 e0       	ldi	r17, 0x00	; 0
		}


		//Fire against missile
		for (int i=0;i<MAXMISSILES;i++){
			if (!missiles[i].active)
    4e9a:	1c 96       	adiw	r26, 0x0c	; 12
    4e9c:	8c 91       	ld	r24, X
    4e9e:	1c 97       	sbiw	r26, 0x0c	; 12
    4ea0:	88 23       	and	r24, r24
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <start_game+0x522>
    4ea4:	3f c0       	rjmp	.+126    	; 0x4f24 <start_game+0x5a0>
				continue;
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	bc 96       	adiw	r30, 0x2c	; 44
    4eaa:	40 e0       	ldi	r20, 0x00	; 0
    4eac:	50 e0       	ldi	r21, 0x00	; 0
						for (int j=0;j<MAXMISSILES;j++){
							if (!missiles[i].active || j==i)
    4eae:	1c 96       	adiw	r26, 0x0c	; 12
    4eb0:	8c 91       	ld	r24, X
    4eb2:	1c 97       	sbiw	r26, 0x0c	; 12
    4eb4:	88 23       	and	r24, r24
    4eb6:	81 f1       	breq	.+96     	; 0x4f18 <start_game+0x594>
    4eb8:	40 17       	cp	r20, r16
    4eba:	51 07       	cpc	r21, r17
    4ebc:	69 f1       	breq	.+90     	; 0x4f18 <start_game+0x594>
								continue;
							if (isOnFire(&missiles[i]) && ( abs(missiles[i].o_x-missiles[j].o_x)<missiles[i].fire.size/5 && abs( missiles[i].o_y-missiles[j].o_y)<missiles[i].fire.size/5) ){
    4ebe:	1e 96       	adiw	r26, 0x0e	; 14
    4ec0:	8c 91       	ld	r24, X
    4ec2:	1e 97       	sbiw	r26, 0x0e	; 14
    4ec4:	88 23       	and	r24, r24
    4ec6:	41 f1       	breq	.+80     	; 0x4f18 <start_game+0x594>
    4ec8:	f0 80       	ld	r15, Z
    4eca:	1f 96       	adiw	r26, 0x0f	; 15
    4ecc:	8c 91       	ld	r24, X
    4ece:	1f 97       	sbiw	r26, 0x0f	; 15
    4ed0:	65 e0       	ldi	r22, 0x05	; 5
    4ed2:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__udivmodqi4>
    4ed6:	68 2f       	mov	r22, r24
    4ed8:	70 e0       	ldi	r23, 0x00	; 0
    4eda:	8c 91       	ld	r24, X
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	8f 19       	sub	r24, r15
    4ee0:	91 09       	sbc	r25, r1
    4ee2:	97 ff       	sbrs	r25, 7
    4ee4:	03 c0       	rjmp	.+6      	; 0x4eec <start_game+0x568>
    4ee6:	90 95       	com	r25
    4ee8:	81 95       	neg	r24
    4eea:	9f 4f       	sbci	r25, 0xFF	; 255
    4eec:	86 17       	cp	r24, r22
    4eee:	97 07       	cpc	r25, r23
    4ef0:	9c f4       	brge	.+38     	; 0x4f18 <start_game+0x594>
    4ef2:	11 96       	adiw	r26, 0x01	; 1
    4ef4:	8c 91       	ld	r24, X
    4ef6:	11 97       	sbiw	r26, 0x01	; 1
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	81 81       	ldd	r24, Z+1	; 0x01
    4efe:	28 1b       	sub	r18, r24
    4f00:	31 09       	sbc	r19, r1
    4f02:	37 ff       	sbrs	r19, 7
    4f04:	03 c0       	rjmp	.+6      	; 0x4f0c <start_game+0x588>
    4f06:	30 95       	com	r19
    4f08:	21 95       	neg	r18
    4f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0c:	26 17       	cp	r18, r22
    4f0e:	37 07       	cpc	r19, r23
    4f10:	1c f4       	brge	.+6      	; 0x4f18 <start_game+0x594>
								missiles[j].target_x=missiles[j].o_x;
    4f12:	f2 86       	std	Z+10, r15	; 0x0a
								missiles[j].target_y=missiles[j].o_y;
    4f14:	81 81       	ldd	r24, Z+1	; 0x01
    4f16:	83 87       	std	Z+11, r24	; 0x0b

		//Fire against missile
		for (int i=0;i<MAXMISSILES;i++){
			if (!missiles[i].active)
				continue;
						for (int j=0;j<MAXMISSILES;j++){
    4f18:	4f 5f       	subi	r20, 0xFF	; 255
    4f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1c:	73 96       	adiw	r30, 0x13	; 19
    4f1e:	44 31       	cpi	r20, 0x14	; 20
    4f20:	51 05       	cpc	r21, r1
    4f22:	29 f6       	brne	.-118    	; 0x4eae <start_game+0x52a>
			}
		}


		//Fire against missile
		for (int i=0;i<MAXMISSILES;i++){
    4f24:	0f 5f       	subi	r16, 0xFF	; 255
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
    4f28:	53 96       	adiw	r26, 0x13	; 19
    4f2a:	04 31       	cpi	r16, 0x14	; 20
    4f2c:	11 05       	cpc	r17, r1
    4f2e:	09 f0       	breq	.+2      	; 0x4f32 <start_game+0x5ae>
    4f30:	b4 cf       	rjmp	.-152    	; 0x4e9a <start_game+0x516>



		
		
		pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    4f32:	c3 01       	movw	r24, r6
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
    4f3a:	8e 01       	movw	r16, r28
    4f3c:	0a 5f       	subi	r16, 0xFA	; 250
    4f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f40:	ff 24       	eor	r15, r15
		//drawCircle(lcd,Base_1.pos,62,Base_1.size);
		char alive_bases=0;
		for (int i=0;i<MAXBASES;i++){
			//Bases[i].pos=(100/MAXBASES)*i+20;
			if (!Bases[i].alive)
    4f42:	f8 01       	movw	r30, r16
    4f44:	82 81       	ldd	r24, Z+2	; 0x02
    4f46:	88 23       	and	r24, r24
    4f48:	e9 f0       	breq	.+58     	; 0x4f84 <start_game+0x600>
				continue;
			alive_bases++;
    4f4a:	f3 94       	inc	r15
			LCD_setPage(7);
    4f4c:	87 e0       	ldi	r24, 0x07	; 7
    4f4e:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
			LCD_setColumn(Bases[i].pos);
    4f52:	d8 01       	movw	r26, r16
    4f54:	11 96       	adiw	r26, 0x01	; 1
    4f56:	8c 91       	ld	r24, X
    4f58:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
			rprintfInt(level.max_active_missiles-Bases[i].active_missiles);
    4f5c:	88 a5       	ldd	r24, Y+40	; 0x28
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	f8 01       	movw	r30, r16
    4f62:	23 81       	ldd	r18, Z+3	; 0x03
    4f64:	82 1b       	sub	r24, r18
    4f66:	91 09       	sbc	r25, r1
    4f68:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
						
			drawCircle(lcd,Bases[i].pos,62,Bases[i].size);
    4f6c:	d8 01       	movw	r26, r16
    4f6e:	11 96       	adiw	r26, 0x01	; 1
    4f70:	6c 91       	ld	r22, X
    4f72:	11 97       	sbiw	r26, 0x01	; 1
    4f74:	2c 91       	ld	r18, X
    4f76:	c3 01       	movw	r24, r6
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	4e e3       	ldi	r20, 0x3E	; 62
    4f7c:	50 e0       	ldi	r21, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	0e 94 09 0b 	call	0x1612	; 0x1612 <drawCircle>
    4f84:	0c 5f       	subi	r16, 0xFC	; 252
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
		
		
		pixelSetOrClearOrInvert(lcd,SET_PIXELS);
		//drawCircle(lcd,Base_1.pos,62,Base_1.size);
		char alive_bases=0;
		for (int i=0;i<MAXBASES;i++){
    4f88:	cd 54       	subi	r28, 0x4D	; 77
    4f8a:	de 4f       	sbci	r29, 0xFE	; 254
    4f8c:	e8 81       	ld	r30, Y
    4f8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f90:	c3 5b       	subi	r28, 0xB3	; 179
    4f92:	d1 40       	sbci	r29, 0x01	; 1
    4f94:	0e 17       	cp	r16, r30
    4f96:	1f 07       	cpc	r17, r31
    4f98:	a1 f6       	brne	.-88     	; 0x4f42 <start_game+0x5be>
			drawCircle(lcd,Bases[i].pos,62,Bases[i].size);


		}

		if (alive_bases==0)
    4f9a:	ff 20       	and	r15, r15
    4f9c:	19 f4       	brne	.+6      	; 0x4fa4 <start_game+0x620>
    4f9e:	82 e0       	ldi	r24, 0x02	; 2
    4fa0:	88 2e       	mov	r8, r24
    4fa2:	91 2c       	mov	r9, r1
			GAME=2; // LOST


		
		pushRAM(lcd);
    4fa4:	c3 01       	movw	r24, r6
    4fa6:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>

		int diff=time_diff(game_ticks,sys_time);
    4faa:	00 91 65 0a 	lds	r16, 0x0A65
    4fae:	10 91 66 0a 	lds	r17, 0x0A66
    4fb2:	c3 55       	subi	r28, 0x53	; 83
    4fb4:	de 4f       	sbci	r29, 0xFE	; 254
    4fb6:	88 81       	ld	r24, Y
    4fb8:	99 81       	ldd	r25, Y+1	; 0x01
    4fba:	cd 5a       	subi	r28, 0xAD	; 173
    4fbc:	d1 40       	sbci	r29, 0x01	; 1
    4fbe:	08 1b       	sub	r16, r24
    4fc0:	19 0b       	sbc	r17, r25
    4fc2:	0f c0       	rjmp	.+30     	; 0x4fe2 <start_game+0x65e>
		while (diff<25){
			diff=time_diff(game_ticks,sys_time);
    4fc4:	00 91 65 0a 	lds	r16, 0x0A65
    4fc8:	10 91 66 0a 	lds	r17, 0x0A66
    4fcc:	c3 55       	subi	r28, 0x53	; 83
    4fce:	de 4f       	sbci	r29, 0xFE	; 254
    4fd0:	a8 81       	ld	r26, Y
    4fd2:	b9 81       	ldd	r27, Y+1	; 0x01
    4fd4:	cd 5a       	subi	r28, 0xAD	; 173
    4fd6:	d1 40       	sbci	r29, 0x01	; 1
    4fd8:	0a 1b       	sub	r16, r26
    4fda:	1b 0b       	sbc	r17, r27
			LCD_setColumn(10); //Time consuming
    4fdc:	8a e0       	ldi	r24, 0x0A	; 10
    4fde:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>

		
		pushRAM(lcd);

		int diff=time_diff(game_ticks,sys_time);
		while (diff<25){
    4fe2:	09 31       	cpi	r16, 0x19	; 25
    4fe4:	11 05       	cpc	r17, r1
    4fe6:	74 f3       	brlt	.-36     	; 0x4fc4 <start_game+0x640>
			diff=time_diff(game_ticks,sys_time);
			LCD_setColumn(10); //Time consuming
		}
		
		DOGENABLE;
    4fe8:	2c 98       	cbi	0x05, 4	; 5
	unsigned char pressCount=0;
	int GAME=0;//Running
	unsigned char winning_count=0;
	char spread_count=0;
	//return 1;
	while (!GAME){//Game loop
    4fea:	81 14       	cp	r8, r1
    4fec:	91 04       	cpc	r9, r1
    4fee:	09 f4       	brne	.+2      	; 0x4ff2 <start_game+0x66e>
    4ff0:	44 cd       	rjmp	.-1400   	; 0x4a7a <start_game+0xf6>
	}//Game loop - END


return GAME;

}
    4ff2:	c4 01       	movw	r24, r8
    4ff4:	cc 54       	subi	r28, 0x4C	; 76
    4ff6:	de 4f       	sbci	r29, 0xFE	; 254
    4ff8:	0f b6       	in	r0, 0x3f	; 63
    4ffa:	f8 94       	cli
    4ffc:	de bf       	out	0x3e, r29	; 62
    4ffe:	0f be       	out	0x3f, r0	; 63
    5000:	cd bf       	out	0x3d, r28	; 61
    5002:	cf 91       	pop	r28
    5004:	df 91       	pop	r29
    5006:	1f 91       	pop	r17
    5008:	0f 91       	pop	r16
    500a:	ff 90       	pop	r15
    500c:	ef 90       	pop	r14
    500e:	df 90       	pop	r13
    5010:	cf 90       	pop	r12
    5012:	bf 90       	pop	r11
    5014:	af 90       	pop	r10
    5016:	9f 90       	pop	r9
    5018:	8f 90       	pop	r8
    501a:	7f 90       	pop	r7
    501c:	6f 90       	pop	r6
    501e:	5f 90       	pop	r5
    5020:	4f 90       	pop	r4
    5022:	3f 90       	pop	r3
    5024:	2f 90       	pop	r2
    5026:	08 95       	ret

00005028 <game_missile>:
//return level;

}


int game_missile(LCD_engine *lcd ){
    5028:	cf 92       	push	r12
    502a:	df 92       	push	r13
    502c:	ef 92       	push	r14
    502e:	ff 92       	push	r15
    5030:	0f 93       	push	r16
    5032:	1f 93       	push	r17
    5034:	cf 93       	push	r28
    5036:	df 93       	push	r29
    5038:	6c 01       	movw	r12, r24
	LCD_CLR();
    503a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
	LCD_RAM_CLR(lcd);
    503e:	c6 01       	movw	r24, r12
    5040:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	DOGENABLE;
    5044:	2c 98       	cbi	0x05, 4	; 5
	LCD_setPage(0);
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(10);
    504c:	8a e0       	ldi	r24, 0x0A	; 10
    504e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("Missile commander!");
    5052:	80 ec       	ldi	r24, 0xC0	; 192
    5054:	98 e0       	ldi	r25, 0x08	; 8
    5056:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    505a:	10 e0       	ldi	r17, 0x00	; 0
	//setDubbelbuffer(lcd,1);
	//pixelSetOrClearOrInvert(lcd,SET_PIXELS);
	//DOGENABLE;
	char animation=0;
	while (1){
	animation++;
    505c:	1f 5f       	subi	r17, 0xFF	; 255
	LCD_setPage(1);
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(10);
    5064:	8a e0       	ldi	r24, 0x0A	; 10
    5066:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	if (animation<30){
    506a:	1e 31       	cpi	r17, 0x1E	; 30
    506c:	18 f4       	brcc	.+6      	; 0x5074 <game_missile+0x4c>
	rprintfStr("                ");
    506e:	83 ed       	ldi	r24, 0xD3	; 211
    5070:	98 e0       	ldi	r25, 0x08	; 8
    5072:	02 c0       	rjmp	.+4      	; 0x5078 <game_missile+0x50>
	}else {
	rprintfStr("Press A to start");
    5074:	84 ee       	ldi	r24, 0xE4	; 228
    5076:	98 e0       	ldi	r25, 0x08	; 8
    5078:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
	}
	//rprintfInt(animation);
	if (START_isPressedAndRel()){
    507c:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    5080:	88 23       	and	r24, r24
    5082:	09 f0       	breq	.+2      	; 0x5086 <game_missile+0x5e>
    5084:	63 c0       	rjmp	.+198    	; 0x514c <game_missile+0x124>
		return 0;
		}
	if (A_isPressedAndRel()){
    5086:	0e 94 08 11 	call	0x2210	; 0x2210 <A_isPressedAndRel>
    508a:	88 23       	and	r24, r24
    508c:	39 f3       	breq	.-50     	; 0x505c <game_missile+0x34>
    508e:	c1 e0       	ldi	r28, 0x01	; 1
    5090:	d0 e0       	ldi	r29, 0x00	; 0
	}

int GAME=0;
int start_level=1;
while (GAME!=2){//Lost
	GAME=start_game(lcd,start_level);
    5092:	c6 01       	movw	r24, r12
    5094:	be 01       	movw	r22, r28
    5096:	0e 94 c2 24 	call	0x4984	; 0x4984 <start_game>
    509a:	8c 01       	movw	r16, r24
	if (GAME==5)
    509c:	85 30       	cpi	r24, 0x05	; 5
    509e:	91 05       	cpc	r25, r1
    50a0:	09 f4       	brne	.+2      	; 0x50a4 <game_missile+0x7c>
    50a2:	54 c0       	rjmp	.+168    	; 0x514c <game_missile+0x124>
		return 0;

	start_level++;
    50a4:	7e 01       	movw	r14, r28
    50a6:	08 94       	sec
    50a8:	e1 1c       	adc	r14, r1
    50aa:	f1 1c       	adc	r15, r1
	LCD_CLR();
    50ac:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
	LCD_RAM_CLR(lcd);
    50b0:	c6 01       	movw	r24, r12
    50b2:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
	DOGENABLE;
    50b6:	2c 98       	cbi	0x05, 4	; 5


	if (GAME==1){//Won
    50b8:	01 30       	cpi	r16, 0x01	; 1
    50ba:	11 05       	cpc	r17, r1
    50bc:	c1 f4       	brne	.+48     	; 0x50ee <game_missile+0xc6>
	LCD_setPage(3);
    50be:	83 e0       	ldi	r24, 0x03	; 3
    50c0:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(40);
    50c4:	88 e2       	ldi	r24, 0x28	; 40
    50c6:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("WON");
    50ca:	85 ef       	ldi	r24, 0xF5	; 245
    50cc:	98 e0       	ldi	r25, 0x08	; 8
    50ce:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
	LCD_setPage(2);
    50d2:	82 e0       	ldi	r24, 0x02	; 2
    50d4:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(2);
    50d8:	82 e0       	ldi	r24, 0x02	; 2
    50da:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("start mission: ");rprintfInt(start_level);
    50de:	89 ef       	ldi	r24, 0xF9	; 249
    50e0:	98 e0       	ldi	r25, 0x08	; 8
    50e2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    50e6:	c7 01       	movw	r24, r14
    50e8:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
    50ec:	1e c0       	rjmp	.+60     	; 0x512a <game_missile+0x102>

	}else if (GAME==2){//Lost
    50ee:	02 30       	cpi	r16, 0x02	; 2
    50f0:	11 05       	cpc	r17, r1
    50f2:	d9 f4       	brne	.+54     	; 0x512a <game_missile+0x102>
	LCD_setPage(3);
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(40);
    50fa:	88 e2       	ldi	r24, 0x28	; 40
    50fc:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("LOST");
    5100:	89 e0       	ldi	r24, 0x09	; 9
    5102:	99 e0       	ldi	r25, 0x09	; 9
    5104:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
	LCD_setPage(4);
    5108:	84 e0       	ldi	r24, 0x04	; 4
    510a:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_setPage>
	LCD_setColumn(2);
    510e:	82 e0       	ldi	r24, 0x02	; 2
    5110:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_setColumn>
	rprintfStr("Mission ");rprintfInt(start_level-1);rprintfStr(" was to much.");
    5114:	8e e0       	ldi	r24, 0x0E	; 14
    5116:	99 e0       	ldi	r25, 0x09	; 9
    5118:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>
    511c:	ce 01       	movw	r24, r28
    511e:	0e 94 15 10 	call	0x202a	; 0x202a <rprintfInt>
    5122:	87 e1       	ldi	r24, 0x17	; 23
    5124:	99 e0       	ldi	r25, 0x09	; 9
    5126:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <rprintfStr>

	}

	while (1){
	if (START_isPressedAndRel()){
    512a:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    512e:	88 23       	and	r24, r24
    5130:	69 f4       	brne	.+26     	; 0x514c <game_missile+0x124>
		return 0;
		}
	if (A_isPressedAndRel()){
    5132:	0e 94 08 11 	call	0x2210	; 0x2210 <A_isPressedAndRel>
    5136:	88 23       	and	r24, r24
    5138:	c1 f3       	breq	.-16     	; 0x512a <game_missile+0x102>
		//return 0;
		
		break;
		}
	}
	if (start_level>NUMBEROFLEVELS)
    513a:	88 e0       	ldi	r24, 0x08	; 8
    513c:	e8 16       	cp	r14, r24
    513e:	f1 04       	cpc	r15, r1
    5140:	29 f0       	breq	.+10     	; 0x514c <game_missile+0x124>
		}
	}

int GAME=0;
int start_level=1;
while (GAME!=2){//Lost
    5142:	02 30       	cpi	r16, 0x02	; 2
    5144:	11 05       	cpc	r17, r1
    5146:	11 f0       	breq	.+4      	; 0x514c <game_missile+0x124>
    5148:	e7 01       	movw	r28, r14
    514a:	a3 cf       	rjmp	.-186    	; 0x5092 <game_missile+0x6a>
		break;
}


return 0;	
}
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	ff 90       	pop	r15
    515a:	ef 90       	pop	r14
    515c:	df 90       	pop	r13
    515e:	cf 90       	pop	r12
    5160:	08 95       	ret

00005162 <calcVertice>:
double cosP , sinP ;
double cosTcosP , cosTsinP , sinTcosP, sinTsinP;

}PreCalc;

void calcVertice(Vertice *V,PreCalc *PC){
    5162:	2f 92       	push	r2
    5164:	3f 92       	push	r3
    5166:	4f 92       	push	r4
    5168:	5f 92       	push	r5
    516a:	6f 92       	push	r6
    516c:	7f 92       	push	r7
    516e:	8f 92       	push	r8
    5170:	9f 92       	push	r9
    5172:	af 92       	push	r10
    5174:	bf 92       	push	r11
    5176:	cf 92       	push	r12
    5178:	df 92       	push	r13
    517a:	ef 92       	push	r14
    517c:	ff 92       	push	r15
    517e:	0f 93       	push	r16
    5180:	1f 93       	push	r17
    5182:	df 93       	push	r29
    5184:	cf 93       	push	r28
    5186:	cd b7       	in	r28, 0x3d	; 61
    5188:	de b7       	in	r29, 0x3e	; 62
    518a:	60 97       	sbiw	r28, 0x10	; 16
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	de bf       	out	0x3e, r29	; 62
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	cd bf       	out	0x3d, r28	; 61
    5196:	1c 01       	movw	r2, r24
    5198:	6b 01       	movw	r12, r22

// compute an orthographic projection
         double x1 = PC->cosT*V->p3d.x + PC->sinT*V->p3d.z;
    519a:	fc 01       	movw	r30, r24
    519c:	60 81       	ld	r22, Z
    519e:	71 81       	ldd	r23, Z+1	; 0x01
    51a0:	88 27       	eor	r24, r24
    51a2:	77 fd       	sbrc	r23, 7
    51a4:	80 95       	com	r24
    51a6:	98 2f       	mov	r25, r24
    51a8:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    51ac:	4b 01       	movw	r8, r22
    51ae:	5c 01       	movw	r10, r24
    51b0:	f1 01       	movw	r30, r2
    51b2:	64 81       	ldd	r22, Z+4	; 0x04
    51b4:	75 81       	ldd	r23, Z+5	; 0x05
    51b6:	88 27       	eor	r24, r24
    51b8:	77 fd       	sbrc	r23, 7
    51ba:	80 95       	com	r24
    51bc:	98 2f       	mov	r25, r24
    51be:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    51c2:	6d 83       	std	Y+5, r22	; 0x05
    51c4:	7e 83       	std	Y+6, r23	; 0x06
    51c6:	8f 83       	std	Y+7, r24	; 0x07
    51c8:	98 87       	std	Y+8, r25	; 0x08
         double y1 = -PC->sinTsinP*V->p3d.x + PC->cosP*V->p3d.y + PC->cosTsinP*V->p3d.z;
    51ca:	f1 01       	movw	r30, r2
    51cc:	62 81       	ldd	r22, Z+2	; 0x02
    51ce:	73 81       	ldd	r23, Z+3	; 0x03
    51d0:	88 27       	eor	r24, r24
    51d2:	77 fd       	sbrc	r23, 7
    51d4:	80 95       	com	r24
    51d6:	98 2f       	mov	r25, r24
    51d8:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    51dc:	69 83       	std	Y+1, r22	; 0x01
    51de:	7a 83       	std	Y+2, r23	; 0x02
    51e0:	8b 83       	std	Y+3, r24	; 0x03
    51e2:	9c 83       	std	Y+4, r25	; 0x04

         // now adjust things to get a perspective projection
         double z1 = PC->cosTcosP*V->p3d.z - PC->sinTcosP*V->p3d.x - PC->sinP*V->p3d.y;
         x1 = x1*PC->near/(z1+PC->near+PC->nearToObj);
    51e4:	f6 01       	movw	r30, r12
    51e6:	62 85       	ldd	r22, Z+10	; 0x0a
    51e8:	73 85       	ldd	r23, Z+11	; 0x0b
    51ea:	88 27       	eor	r24, r24
    51ec:	77 fd       	sbrc	r23, 7
    51ee:	80 95       	com	r24
    51f0:	98 2f       	mov	r25, r24
    51f2:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    51f6:	2b 01       	movw	r4, r22
    51f8:	3c 01       	movw	r6, r24
    51fa:	c5 01       	movw	r24, r10
    51fc:	b4 01       	movw	r22, r8
    51fe:	f6 01       	movw	r30, r12
    5200:	24 89       	ldd	r18, Z+20	; 0x14
    5202:	35 89       	ldd	r19, Z+21	; 0x15
    5204:	46 89       	ldd	r20, Z+22	; 0x16
    5206:	57 89       	ldd	r21, Z+23	; 0x17
    5208:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    520c:	7b 01       	movw	r14, r22
    520e:	8c 01       	movw	r16, r24
    5210:	6d 81       	ldd	r22, Y+5	; 0x05
    5212:	7e 81       	ldd	r23, Y+6	; 0x06
    5214:	8f 81       	ldd	r24, Y+7	; 0x07
    5216:	98 85       	ldd	r25, Y+8	; 0x08
    5218:	f6 01       	movw	r30, r12
    521a:	20 8d       	ldd	r18, Z+24	; 0x18
    521c:	31 8d       	ldd	r19, Z+25	; 0x19
    521e:	42 8d       	ldd	r20, Z+26	; 0x1a
    5220:	53 8d       	ldd	r21, Z+27	; 0x1b
    5222:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	c8 01       	movw	r24, r16
    522c:	b7 01       	movw	r22, r14
    522e:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    5232:	a3 01       	movw	r20, r6
    5234:	92 01       	movw	r18, r4
    5236:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    523a:	69 87       	std	Y+9, r22	; 0x09
    523c:	7a 87       	std	Y+10, r23	; 0x0a
    523e:	8b 87       	std	Y+11, r24	; 0x0b
    5240:	9c 87       	std	Y+12, r25	; 0x0c
    5242:	6d 81       	ldd	r22, Y+5	; 0x05
    5244:	7e 81       	ldd	r23, Y+6	; 0x06
    5246:	8f 81       	ldd	r24, Y+7	; 0x07
    5248:	98 85       	ldd	r25, Y+8	; 0x08
    524a:	f6 01       	movw	r30, r12
    524c:	24 a1       	ldd	r18, Z+36	; 0x24
    524e:	35 a1       	ldd	r19, Z+37	; 0x25
    5250:	46 a1       	ldd	r20, Z+38	; 0x26
    5252:	57 a1       	ldd	r21, Z+39	; 0x27
    5254:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5258:	7b 01       	movw	r14, r22
    525a:	8c 01       	movw	r16, r24
    525c:	c5 01       	movw	r24, r10
    525e:	b4 01       	movw	r22, r8
    5260:	f6 01       	movw	r30, r12
    5262:	24 a5       	ldd	r18, Z+44	; 0x2c
    5264:	35 a5       	ldd	r19, Z+45	; 0x2d
    5266:	46 a5       	ldd	r20, Z+46	; 0x2e
    5268:	57 a5       	ldd	r21, Z+47	; 0x2f
    526a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    526e:	9b 01       	movw	r18, r22
    5270:	ac 01       	movw	r20, r24
    5272:	c8 01       	movw	r24, r16
    5274:	b7 01       	movw	r22, r14
    5276:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    527a:	7b 01       	movw	r14, r22
    527c:	8c 01       	movw	r16, r24
    527e:	69 81       	ldd	r22, Y+1	; 0x01
    5280:	7a 81       	ldd	r23, Y+2	; 0x02
    5282:	8b 81       	ldd	r24, Y+3	; 0x03
    5284:	9c 81       	ldd	r25, Y+4	; 0x04
    5286:	f6 01       	movw	r30, r12
    5288:	20 a1       	ldd	r18, Z+32	; 0x20
    528a:	31 a1       	ldd	r19, Z+33	; 0x21
    528c:	42 a1       	ldd	r20, Z+34	; 0x22
    528e:	53 a1       	ldd	r21, Z+35	; 0x23
    5290:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5294:	9b 01       	movw	r18, r22
    5296:	ac 01       	movw	r20, r24
    5298:	c8 01       	movw	r24, r16
    529a:	b7 01       	movw	r22, r14
    529c:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    52a0:	a3 01       	movw	r20, r6
    52a2:	92 01       	movw	r18, r4
    52a4:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    52a8:	f6 01       	movw	r30, r12
    52aa:	24 81       	ldd	r18, Z+4	; 0x04
    52ac:	35 81       	ldd	r19, Z+5	; 0x05
    52ae:	46 81       	ldd	r20, Z+6	; 0x06
    52b0:	57 81       	ldd	r21, Z+7	; 0x07
    52b2:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    52b6:	6d 87       	std	Y+13, r22	; 0x0d
    52b8:	7e 87       	std	Y+14, r23	; 0x0e
    52ba:	8f 87       	std	Y+15, r24	; 0x0f
    52bc:	98 8b       	std	Y+16, r25	; 0x10
         y1 = y1*PC->near/(z1+PC->near+PC->nearToObj);
    52be:	f6 01       	movw	r30, r12
    52c0:	60 a9       	ldd	r22, Z+48	; 0x30
    52c2:	71 a9       	ldd	r23, Z+49	; 0x31
    52c4:	82 a9       	ldd	r24, Z+50	; 0x32
    52c6:	93 a9       	ldd	r25, Z+51	; 0x33
    52c8:	90 58       	subi	r25, 0x80	; 128
    52ca:	a5 01       	movw	r20, r10
    52cc:	94 01       	movw	r18, r8
    52ce:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    52d2:	7b 01       	movw	r14, r22
    52d4:	8c 01       	movw	r16, r24
    52d6:	69 81       	ldd	r22, Y+1	; 0x01
    52d8:	7a 81       	ldd	r23, Y+2	; 0x02
    52da:	8b 81       	ldd	r24, Y+3	; 0x03
    52dc:	9c 81       	ldd	r25, Y+4	; 0x04
    52de:	f6 01       	movw	r30, r12
    52e0:	24 8d       	ldd	r18, Z+28	; 0x1c
    52e2:	35 8d       	ldd	r19, Z+29	; 0x1d
    52e4:	46 8d       	ldd	r20, Z+30	; 0x1e
    52e6:	57 8d       	ldd	r21, Z+31	; 0x1f
    52e8:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    52ec:	9b 01       	movw	r18, r22
    52ee:	ac 01       	movw	r20, r24
    52f0:	c8 01       	movw	r24, r16
    52f2:	b7 01       	movw	r22, r14
    52f4:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    52f8:	7b 01       	movw	r14, r22
    52fa:	8c 01       	movw	r16, r24
    52fc:	6d 81       	ldd	r22, Y+5	; 0x05
    52fe:	7e 81       	ldd	r23, Y+6	; 0x06
    5300:	8f 81       	ldd	r24, Y+7	; 0x07
    5302:	98 85       	ldd	r25, Y+8	; 0x08
    5304:	f6 01       	movw	r30, r12
    5306:	20 a5       	ldd	r18, Z+40	; 0x28
    5308:	31 a5       	ldd	r19, Z+41	; 0x29
    530a:	42 a5       	ldd	r20, Z+42	; 0x2a
    530c:	53 a5       	ldd	r21, Z+43	; 0x2b
    530e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5312:	9b 01       	movw	r18, r22
    5314:	ac 01       	movw	r20, r24
    5316:	c8 01       	movw	r24, r16
    5318:	b7 01       	movw	r22, r14
    531a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    531e:	a3 01       	movw	r20, r6
    5320:	92 01       	movw	r18, r4
    5322:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5326:	4b 01       	movw	r8, r22
    5328:	5c 01       	movw	r10, r24
		
		V->p2d.x=64 + PC->scaleFactor*x1 + 0.5;
    532a:	f6 01       	movw	r30, r12
    532c:	60 85       	ldd	r22, Z+8	; 0x08
    532e:	71 85       	ldd	r23, Z+9	; 0x09
    5330:	88 27       	eor	r24, r24
    5332:	77 fd       	sbrc	r23, 7
    5334:	80 95       	com	r24
    5336:	98 2f       	mov	r25, r24
    5338:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    533c:	7b 01       	movw	r14, r22
    533e:	8c 01       	movw	r16, r24
    5340:	69 85       	ldd	r22, Y+9	; 0x09
    5342:	7a 85       	ldd	r23, Y+10	; 0x0a
    5344:	8b 85       	ldd	r24, Y+11	; 0x0b
    5346:	9c 85       	ldd	r25, Y+12	; 0x0c
    5348:	2d 85       	ldd	r18, Y+13	; 0x0d
    534a:	3e 85       	ldd	r19, Y+14	; 0x0e
    534c:	4f 85       	ldd	r20, Y+15	; 0x0f
    534e:	58 89       	ldd	r21, Y+16	; 0x10
    5350:	0e 94 2d 30 	call	0x605a	; 0x605a <__divsf3>
    5354:	9b 01       	movw	r18, r22
    5356:	ac 01       	movw	r20, r24
    5358:	c8 01       	movw	r24, r16
    535a:	b7 01       	movw	r22, r14
    535c:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	40 e8       	ldi	r20, 0x80	; 128
    5366:	52 e4       	ldi	r21, 0x42	; 66
    5368:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	40 e0       	ldi	r20, 0x00	; 0
    5372:	5f e3       	ldi	r21, 0x3F	; 63
    5374:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    5378:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    537c:	f1 01       	movw	r30, r2
    537e:	77 83       	std	Z+7, r23	; 0x07
    5380:	66 83       	std	Z+6, r22	; 0x06
        V->p2d.y=32 - PC->scaleFactor*y1 + 0.5;
    5382:	c5 01       	movw	r24, r10
    5384:	b4 01       	movw	r22, r8
    5386:	2d 85       	ldd	r18, Y+13	; 0x0d
    5388:	3e 85       	ldd	r19, Y+14	; 0x0e
    538a:	4f 85       	ldd	r20, Y+15	; 0x0f
    538c:	58 89       	ldd	r21, Y+16	; 0x10
    538e:	0e 94 2d 30 	call	0x605a	; 0x605a <__divsf3>
    5392:	9b 01       	movw	r18, r22
    5394:	ac 01       	movw	r20, r24
    5396:	c8 01       	movw	r24, r16
    5398:	b7 01       	movw	r22, r14
    539a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    539e:	9b 01       	movw	r18, r22
    53a0:	ac 01       	movw	r20, r24
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	92 e4       	ldi	r25, 0x42	; 66
    53aa:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <__subsf3>
    53ae:	20 e0       	ldi	r18, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	40 e0       	ldi	r20, 0x00	; 0
    53b4:	5f e3       	ldi	r21, 0x3F	; 63
    53b6:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <__addsf3>
    53ba:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    53be:	f1 01       	movw	r30, r2
    53c0:	71 87       	std	Z+9, r23	; 0x09
    53c2:	60 87       	std	Z+8, r22	; 0x08
		//V->p2d.x=width/2 + PC->scaleFactor*x1 + 0.5;
        //V->p2d.y=height/2 - PC->scaleFactor*y1 + 0.5;
}
    53c4:	60 96       	adiw	r28, 0x10	; 16
    53c6:	0f b6       	in	r0, 0x3f	; 63
    53c8:	f8 94       	cli
    53ca:	de bf       	out	0x3e, r29	; 62
    53cc:	0f be       	out	0x3f, r0	; 63
    53ce:	cd bf       	out	0x3d, r28	; 61
    53d0:	cf 91       	pop	r28
    53d2:	df 91       	pop	r29
    53d4:	1f 91       	pop	r17
    53d6:	0f 91       	pop	r16
    53d8:	ff 90       	pop	r15
    53da:	ef 90       	pop	r14
    53dc:	df 90       	pop	r13
    53de:	cf 90       	pop	r12
    53e0:	bf 90       	pop	r11
    53e2:	af 90       	pop	r10
    53e4:	9f 90       	pop	r9
    53e6:	8f 90       	pop	r8
    53e8:	7f 90       	pop	r7
    53ea:	6f 90       	pop	r6
    53ec:	5f 90       	pop	r5
    53ee:	4f 90       	pop	r4
    53f0:	3f 90       	pop	r3
    53f2:	2f 90       	pop	r2
    53f4:	08 95       	ret

000053f6 <setSizeCube>:

void setSizeCube(Vertice (Cube[8]),int size){
    53f6:	fc 01       	movw	r30, r24
    53f8:	20 e0       	ldi	r18, 0x00	; 0
    53fa:	30 e0       	ldi	r19, 0x00	; 0
for (int i=0;i<8;i++){
Cube[i].p3d.x=Cube[i].p3d.x*size;
    53fc:	80 81       	ld	r24, Z
    53fe:	91 81       	ldd	r25, Z+1	; 0x01
    5400:	ac 01       	movw	r20, r24
    5402:	46 9f       	mul	r20, r22
    5404:	c0 01       	movw	r24, r0
    5406:	47 9f       	mul	r20, r23
    5408:	90 0d       	add	r25, r0
    540a:	56 9f       	mul	r21, r22
    540c:	90 0d       	add	r25, r0
    540e:	11 24       	eor	r1, r1
    5410:	91 83       	std	Z+1, r25	; 0x01
    5412:	80 83       	st	Z, r24
Cube[i].p3d.y=Cube[i].p3d.y*size;
    5414:	82 81       	ldd	r24, Z+2	; 0x02
    5416:	93 81       	ldd	r25, Z+3	; 0x03
    5418:	ac 01       	movw	r20, r24
    541a:	46 9f       	mul	r20, r22
    541c:	c0 01       	movw	r24, r0
    541e:	47 9f       	mul	r20, r23
    5420:	90 0d       	add	r25, r0
    5422:	56 9f       	mul	r21, r22
    5424:	90 0d       	add	r25, r0
    5426:	11 24       	eor	r1, r1
    5428:	93 83       	std	Z+3, r25	; 0x03
    542a:	82 83       	std	Z+2, r24	; 0x02
Cube[i].p3d.z=Cube[i].p3d.z*size;
    542c:	84 81       	ldd	r24, Z+4	; 0x04
    542e:	95 81       	ldd	r25, Z+5	; 0x05
    5430:	ac 01       	movw	r20, r24
    5432:	46 9f       	mul	r20, r22
    5434:	c0 01       	movw	r24, r0
    5436:	47 9f       	mul	r20, r23
    5438:	90 0d       	add	r25, r0
    543a:	56 9f       	mul	r21, r22
    543c:	90 0d       	add	r25, r0
    543e:	11 24       	eor	r1, r1
    5440:	95 83       	std	Z+5, r25	; 0x05
    5442:	84 83       	std	Z+4, r24	; 0x04
		//V->p2d.x=width/2 + PC->scaleFactor*x1 + 0.5;
        //V->p2d.y=height/2 - PC->scaleFactor*y1 + 0.5;
}

void setSizeCube(Vertice (Cube[8]),int size){
for (int i=0;i<8;i++){
    5444:	2f 5f       	subi	r18, 0xFF	; 255
    5446:	3f 4f       	sbci	r19, 0xFF	; 255
    5448:	3a 96       	adiw	r30, 0x0a	; 10
    544a:	28 30       	cpi	r18, 0x08	; 8
    544c:	31 05       	cpc	r19, r1
    544e:	b1 f6       	brne	.-84     	; 0x53fc <setSizeCube+0x6>
Cube[i].p3d.x=Cube[i].p3d.x*size;
Cube[i].p3d.y=Cube[i].p3d.y*size;
Cube[i].p3d.z=Cube[i].p3d.z*size;
}

}
    5450:	08 95       	ret

00005452 <calcCube>:

void calcCube(Vertice (Cube[8]),PreCalc *PC){
    5452:	ef 92       	push	r14
    5454:	ff 92       	push	r15
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	7c 01       	movw	r14, r24
    5460:	8b 01       	movw	r16, r22
    5462:	c0 e0       	ldi	r28, 0x00	; 0
    5464:	d0 e0       	ldi	r29, 0x00	; 0
for (int i=0;i<8;i++){
calcVertice(&Cube[i],PC);
    5466:	c7 01       	movw	r24, r14
    5468:	8c 0f       	add	r24, r28
    546a:	9d 1f       	adc	r25, r29
    546c:	b8 01       	movw	r22, r16
    546e:	0e 94 b1 28 	call	0x5162	; 0x5162 <calcVertice>
    5472:	2a 96       	adiw	r28, 0x0a	; 10
}

}

void calcCube(Vertice (Cube[8]),PreCalc *PC){
for (int i=0;i<8;i++){
    5474:	c0 35       	cpi	r28, 0x50	; 80
    5476:	d1 05       	cpc	r29, r1
    5478:	b1 f7       	brne	.-20     	; 0x5466 <calcCube+0x14>
calcVertice(&Cube[i],PC);

}

}
    547a:	df 91       	pop	r29
    547c:	cf 91       	pop	r28
    547e:	1f 91       	pop	r17
    5480:	0f 91       	pop	r16
    5482:	ff 90       	pop	r15
    5484:	ef 90       	pop	r14
    5486:	08 95       	ret

00005488 <RotatePreCalc>:
LCD_drawLine(lcd,Cube[CubeEdges[i]].p2d.x,Cube[CubeEdges[i]].p2d.y,Cube[CubeEdges[i+1]].p2d.x,Cube[CubeEdges[i+1]].p2d.y);
}

}

void RotatePreCalc(PreCalc *PC,int rot){
    5488:	2f 92       	push	r2
    548a:	3f 92       	push	r3
    548c:	4f 92       	push	r4
    548e:	5f 92       	push	r5
    5490:	6f 92       	push	r6
    5492:	7f 92       	push	r7
    5494:	8f 92       	push	r8
    5496:	9f 92       	push	r9
    5498:	af 92       	push	r10
    549a:	bf 92       	push	r11
    549c:	cf 92       	push	r12
    549e:	df 92       	push	r13
    54a0:	ef 92       	push	r14
    54a2:	ff 92       	push	r15
    54a4:	0f 93       	push	r16
    54a6:	1f 93       	push	r17
    54a8:	cf 93       	push	r28
    54aa:	df 93       	push	r29
    54ac:	ec 01       	movw	r28, r24
PC->azimuth+=rot;
    54ae:	28 81       	ld	r18, Y
    54b0:	39 81       	ldd	r19, Y+1	; 0x01
    54b2:	62 0f       	add	r22, r18
    54b4:	73 1f       	adc	r23, r19
    54b6:	79 83       	std	Y+1, r23	; 0x01
    54b8:	68 83       	st	Y, r22

      PC->theta = 3.1415 * PC->azimuth / 180.0;
    54ba:	88 27       	eor	r24, r24
    54bc:	77 fd       	sbrc	r23, 7
    54be:	80 95       	com	r24
    54c0:	98 2f       	mov	r25, r24
    54c2:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    54c6:	26 e5       	ldi	r18, 0x56	; 86
    54c8:	3e e0       	ldi	r19, 0x0E	; 14
    54ca:	49 e4       	ldi	r20, 0x49	; 73
    54cc:	50 e4       	ldi	r21, 0x40	; 64
    54ce:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	44 e3       	ldi	r20, 0x34	; 52
    54d8:	53 e4       	ldi	r21, 0x43	; 67
    54da:	0e 94 2d 30 	call	0x605a	; 0x605a <__divsf3>
    54de:	5b 01       	movw	r10, r22
    54e0:	6c 01       	movw	r12, r24
    54e2:	6c 87       	std	Y+12, r22	; 0x0c
    54e4:	7d 87       	std	Y+13, r23	; 0x0d
    54e6:	8e 87       	std	Y+14, r24	; 0x0e
    54e8:	9f 87       	std	Y+15, r25	; 0x0f
      PC->phi = 3.1415 * PC->elevation / 180.0;
    54ea:	6a 81       	ldd	r22, Y+2	; 0x02
    54ec:	7b 81       	ldd	r23, Y+3	; 0x03
    54ee:	88 27       	eor	r24, r24
    54f0:	77 fd       	sbrc	r23, 7
    54f2:	80 95       	com	r24
    54f4:	98 2f       	mov	r25, r24
    54f6:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    54fa:	26 e5       	ldi	r18, 0x56	; 86
    54fc:	3e e0       	ldi	r19, 0x0E	; 14
    54fe:	49 e4       	ldi	r20, 0x49	; 73
    5500:	50 e4       	ldi	r21, 0x40	; 64
    5502:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	44 e3       	ldi	r20, 0x34	; 52
    550c:	53 e4       	ldi	r21, 0x43	; 67
    550e:	0e 94 2d 30 	call	0x605a	; 0x605a <__divsf3>
    5512:	7b 01       	movw	r14, r22
    5514:	8c 01       	movw	r16, r24
    5516:	68 8b       	std	Y+16, r22	; 0x10
    5518:	79 8b       	std	Y+17, r23	; 0x11
    551a:	8a 8b       	std	Y+18, r24	; 0x12
    551c:	9b 8b       	std	Y+19, r25	; 0x13
      PC->cosT = cos( PC->theta );
    551e:	c6 01       	movw	r24, r12
    5520:	b5 01       	movw	r22, r10
    5522:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <cos>
    5526:	3b 01       	movw	r6, r22
    5528:	4c 01       	movw	r8, r24
    552a:	6c 8b       	std	Y+20, r22	; 0x14
    552c:	7d 8b       	std	Y+21, r23	; 0x15
    552e:	8e 8b       	std	Y+22, r24	; 0x16
    5530:	9f 8b       	std	Y+23, r25	; 0x17
	   PC->sinT = sin( PC->theta );
    5532:	c6 01       	movw	r24, r12
    5534:	b5 01       	movw	r22, r10
    5536:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <sin>
    553a:	1b 01       	movw	r2, r22
    553c:	2c 01       	movw	r4, r24
    553e:	68 8f       	std	Y+24, r22	; 0x18
    5540:	79 8f       	std	Y+25, r23	; 0x19
    5542:	8a 8f       	std	Y+26, r24	; 0x1a
    5544:	9b 8f       	std	Y+27, r25	; 0x1b
      PC->cosP = cos( PC->phi );
    5546:	c8 01       	movw	r24, r16
    5548:	b7 01       	movw	r22, r14
    554a:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <cos>
    554e:	5b 01       	movw	r10, r22
    5550:	6c 01       	movw	r12, r24
    5552:	6c 8f       	std	Y+28, r22	; 0x1c
    5554:	7d 8f       	std	Y+29, r23	; 0x1d
    5556:	8e 8f       	std	Y+30, r24	; 0x1e
    5558:	9f 8f       	std	Y+31, r25	; 0x1f
	   PC->sinP = sin( PC->phi );
    555a:	c8 01       	movw	r24, r16
    555c:	b7 01       	movw	r22, r14
    555e:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <sin>
    5562:	7b 01       	movw	r14, r22
    5564:	8c 01       	movw	r16, r24
    5566:	68 a3       	std	Y+32, r22	; 0x20
    5568:	79 a3       	std	Y+33, r23	; 0x21
    556a:	8a a3       	std	Y+34, r24	; 0x22
    556c:	9b a3       	std	Y+35, r25	; 0x23
      PC->cosTcosP = PC->cosT*PC->cosP;
    556e:	c4 01       	movw	r24, r8
    5570:	b3 01       	movw	r22, r6
    5572:	a6 01       	movw	r20, r12
    5574:	95 01       	movw	r18, r10
    5576:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    557a:	6c a3       	std	Y+36, r22	; 0x24
    557c:	7d a3       	std	Y+37, r23	; 0x25
    557e:	8e a3       	std	Y+38, r24	; 0x26
    5580:	9f a3       	std	Y+39, r25	; 0x27
	  PC->cosTsinP = PC->cosT*PC->sinP;
    5582:	c4 01       	movw	r24, r8
    5584:	b3 01       	movw	r22, r6
    5586:	a8 01       	movw	r20, r16
    5588:	97 01       	movw	r18, r14
    558a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    558e:	68 a7       	std	Y+40, r22	; 0x28
    5590:	79 a7       	std	Y+41, r23	; 0x29
    5592:	8a a7       	std	Y+42, r24	; 0x2a
    5594:	9b a7       	std	Y+43, r25	; 0x2b
       PC->sinTcosP = PC->sinT*PC->cosP; 
    5596:	c2 01       	movw	r24, r4
    5598:	b1 01       	movw	r22, r2
    559a:	a6 01       	movw	r20, r12
    559c:	95 01       	movw	r18, r10
    559e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    55a2:	6c a7       	std	Y+44, r22	; 0x2c
    55a4:	7d a7       	std	Y+45, r23	; 0x2d
    55a6:	8e a7       	std	Y+46, r24	; 0x2e
    55a8:	9f a7       	std	Y+47, r25	; 0x2f
	   PC->sinTsinP = PC->sinT*PC->sinP;
    55aa:	c2 01       	movw	r24, r4
    55ac:	b1 01       	movw	r22, r2
    55ae:	a8 01       	movw	r20, r16
    55b0:	97 01       	movw	r18, r14
    55b2:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    55b6:	68 ab       	std	Y+48, r22	; 0x30
    55b8:	79 ab       	std	Y+49, r23	; 0x31
    55ba:	8a ab       	std	Y+50, r24	; 0x32
    55bc:	9b ab       	std	Y+51, r25	; 0x33

}
    55be:	df 91       	pop	r29
    55c0:	cf 91       	pop	r28
    55c2:	1f 91       	pop	r17
    55c4:	0f 91       	pop	r16
    55c6:	ff 90       	pop	r15
    55c8:	ef 90       	pop	r14
    55ca:	df 90       	pop	r13
    55cc:	cf 90       	pop	r12
    55ce:	bf 90       	pop	r11
    55d0:	af 90       	pop	r10
    55d2:	9f 90       	pop	r9
    55d4:	8f 90       	pop	r8
    55d6:	7f 90       	pop	r7
    55d8:	6f 90       	pop	r6
    55da:	5f 90       	pop	r5
    55dc:	4f 90       	pop	r4
    55de:	3f 90       	pop	r3
    55e0:	2f 90       	pop	r2
    55e2:	08 95       	ret

000055e4 <drawCube>:
calcVertice(&Cube[i],PC);

}

}
void drawCube(LCD_engine *lcd,Vertice (Cube[8]),int CubeEdges[24]){
    55e4:	af 92       	push	r10
    55e6:	bf 92       	push	r11
    55e8:	cf 92       	push	r12
    55ea:	df 92       	push	r13
    55ec:	ef 92       	push	r14
    55ee:	ff 92       	push	r15
    55f0:	0f 93       	push	r16
    55f2:	1f 93       	push	r17
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	5c 01       	movw	r10, r24
    55fa:	6b 01       	movw	r12, r22
    55fc:	ea 01       	movw	r28, r20
    55fe:	ee 24       	eor	r14, r14
    5600:	ff 24       	eor	r15, r15
for (int i=0;i<23;i+=2){
LCD_drawLine(lcd,Cube[CubeEdges[i]].p2d.x,Cube[CubeEdges[i]].p2d.y,Cube[CubeEdges[i+1]].p2d.x,Cube[CubeEdges[i+1]].p2d.y);
    5602:	88 81       	ld	r24, Y
    5604:	99 81       	ldd	r25, Y+1	; 0x01
    5606:	dc 01       	movw	r26, r24
    5608:	53 e0       	ldi	r21, 0x03	; 3
    560a:	aa 0f       	add	r26, r26
    560c:	bb 1f       	adc	r27, r27
    560e:	5a 95       	dec	r21
    5610:	e1 f7       	brne	.-8      	; 0x560a <drawCube+0x26>
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	a8 0f       	add	r26, r24
    5618:	b9 1f       	adc	r27, r25
    561a:	ac 0d       	add	r26, r12
    561c:	bd 1d       	adc	r27, r13
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	9b 81       	ldd	r25, Y+3	; 0x03
    5622:	fc 01       	movw	r30, r24
    5624:	33 e0       	ldi	r19, 0x03	; 3
    5626:	ee 0f       	add	r30, r30
    5628:	ff 1f       	adc	r31, r31
    562a:	3a 95       	dec	r19
    562c:	e1 f7       	brne	.-8      	; 0x5626 <drawCube+0x42>
    562e:	88 0f       	add	r24, r24
    5630:	99 1f       	adc	r25, r25
    5632:	e8 0f       	add	r30, r24
    5634:	f9 1f       	adc	r31, r25
    5636:	ec 0d       	add	r30, r12
    5638:	fd 1d       	adc	r31, r13
    563a:	16 96       	adiw	r26, 0x06	; 6
    563c:	6d 91       	ld	r22, X+
    563e:	7c 91       	ld	r23, X
    5640:	17 97       	sbiw	r26, 0x07	; 7
    5642:	18 96       	adiw	r26, 0x08	; 8
    5644:	4d 91       	ld	r20, X+
    5646:	5c 91       	ld	r21, X
    5648:	19 97       	sbiw	r26, 0x09	; 9
    564a:	26 81       	ldd	r18, Z+6	; 0x06
    564c:	37 81       	ldd	r19, Z+7	; 0x07
    564e:	00 85       	ldd	r16, Z+8	; 0x08
    5650:	11 85       	ldd	r17, Z+9	; 0x09
    5652:	c5 01       	movw	r24, r10
    5654:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_drawLine>

}

}
void drawCube(LCD_engine *lcd,Vertice (Cube[8]),int CubeEdges[24]){
for (int i=0;i<23;i+=2){
    5658:	82 e0       	ldi	r24, 0x02	; 2
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	e8 0e       	add	r14, r24
    565e:	f9 1e       	adc	r15, r25
    5660:	24 96       	adiw	r28, 0x04	; 4
    5662:	98 e1       	ldi	r25, 0x18	; 24
    5664:	e9 16       	cp	r14, r25
    5666:	f1 04       	cpc	r15, r1
    5668:	61 f6       	brne	.-104    	; 0x5602 <drawCube+0x1e>
LCD_drawLine(lcd,Cube[CubeEdges[i]].p2d.x,Cube[CubeEdges[i]].p2d.y,Cube[CubeEdges[i+1]].p2d.x,Cube[CubeEdges[i+1]].p2d.y);
}

}
    566a:	df 91       	pop	r29
    566c:	cf 91       	pop	r28
    566e:	1f 91       	pop	r17
    5670:	0f 91       	pop	r16
    5672:	ff 90       	pop	r15
    5674:	ef 90       	pop	r14
    5676:	df 90       	pop	r13
    5678:	cf 90       	pop	r12
    567a:	bf 90       	pop	r11
    567c:	af 90       	pop	r10
    567e:	08 95       	ret

00005680 <start_3dDemo>:
}




int start_3dDemo(LCD_engine *lcd){
    5680:	2f 92       	push	r2
    5682:	3f 92       	push	r3
    5684:	4f 92       	push	r4
    5686:	5f 92       	push	r5
    5688:	6f 92       	push	r6
    568a:	7f 92       	push	r7
    568c:	8f 92       	push	r8
    568e:	9f 92       	push	r9
    5690:	af 92       	push	r10
    5692:	bf 92       	push	r11
    5694:	cf 92       	push	r12
    5696:	df 92       	push	r13
    5698:	ef 92       	push	r14
    569a:	ff 92       	push	r15
    569c:	0f 93       	push	r16
    569e:	1f 93       	push	r17
    56a0:	df 93       	push	r29
    56a2:	cf 93       	push	r28
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	cf 5b       	subi	r28, 0xBF	; 191
    56aa:	d0 40       	sbci	r29, 0x00	; 0
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	5c 01       	movw	r10, r24
LCD_CLR();
    56b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCD_CLR>
LCD_RAM_CLR(lcd);
    56bc:	c5 01       	movw	r24, r10
    56be:	0e 94 46 09 	call	0x128c	; 0x128c <LCD_RAM_CLR>
resetConnection();
    56c2:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>
setDubbelbuffer(lcd,1);
    56c6:	c5 01       	movw	r24, r10
    56c8:	61 e0       	ldi	r22, 0x01	; 1
    56ca:	0e 94 f6 07 	call	0xfec	; 0xfec <setDubbelbuffer>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    56ce:	c5 01       	movw	r24, r10
    56d0:	61 e0       	ldi	r22, 0x01	; 1
    56d2:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
resetConnection();
    56d6:	0e 94 91 09 	call	0x1322	; 0x1322 <resetConnection>

//printfStr(lcd,"hello3d",0,0);


pushRAM(lcd);
    56da:	c5 01       	movw	r24, r10
    56dc:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
//Point3d p3d[]={1,2,3};


//Point2d p1_c;
PreCalc PC;
PC.azimuth = 35;
    56e0:	83 e2       	ldi	r24, 0x23	; 35
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	9f ab       	std	Y+55, r25	; 0x37
    56e6:	8e ab       	std	Y+54, r24	; 0x36
PC.elevation = 30;
    56e8:	8e e1       	ldi	r24, 0x1E	; 30
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	99 af       	std	Y+57, r25	; 0x39
    56ee:	88 af       	std	Y+56, r24	; 0x38
PC.nearToObj = 5;  // distance from near plane to center of object
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	a0 ea       	ldi	r26, 0xA0	; 160
    56f6:	b0 e4       	ldi	r27, 0x40	; 64
    56f8:	8a af       	std	Y+58, r24	; 0x3a
    56fa:	9b af       	std	Y+59, r25	; 0x3b
    56fc:	ac af       	std	Y+60, r26	; 0x3c
    56fe:	bd af       	std	Y+61, r27	; 0x3d

PC.scaleFactor = width/4;
    5700:	80 e2       	ldi	r24, 0x20	; 32
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	9f af       	std	Y+63, r25	; 0x3f
    5706:	8e af       	std	Y+62, r24	; 0x3e
PC.near = 3;  // distance from eye to near plane
    5708:	83 e0       	ldi	r24, 0x03	; 3
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	fe 01       	movw	r30, r28
    570e:	e0 5c       	subi	r30, 0xC0	; 192
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	91 83       	std	Z+1, r25	; 0x01
    5714:	80 83       	st	Z, r24
      //double nearToObj = 1.5; 

      PC.theta = 3.1415 * PC.azimuth / 180.0;
    5716:	8c e7       	ldi	r24, 0x7C	; 124
    5718:	90 e6       	ldi	r25, 0x60	; 96
    571a:	ac e1       	ldi	r26, 0x1C	; 28
    571c:	bf e3       	ldi	r27, 0x3F	; 63
    571e:	fe 01       	movw	r30, r28
    5720:	ee 5b       	subi	r30, 0xBE	; 190
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	80 83       	st	Z, r24
    5726:	91 83       	std	Z+1, r25	; 0x01
    5728:	a2 83       	std	Z+2, r26	; 0x02
    572a:	b3 83       	std	Z+3, r27	; 0x03
      PC.phi = 3.1415 * PC.elevation / 180.0;
    572c:	8f e8       	ldi	r24, 0x8F	; 143
    572e:	99 e0       	ldi	r25, 0x09	; 9
    5730:	a6 e0       	ldi	r26, 0x06	; 6
    5732:	bf e3       	ldi	r27, 0x3F	; 63
    5734:	fe 01       	movw	r30, r28
    5736:	ea 5b       	subi	r30, 0xBA	; 186
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	80 83       	st	Z, r24
    573c:	91 83       	std	Z+1, r25	; 0x01
    573e:	a2 83       	std	Z+2, r26	; 0x02
    5740:	b3 83       	std	Z+3, r27	; 0x03
      PC.cosT = cos( PC.theta );
    5742:	80 ea       	ldi	r24, 0xA0	; 160
    5744:	94 eb       	ldi	r25, 0xB4	; 180
    5746:	a1 e5       	ldi	r26, 0x51	; 81
    5748:	bf e3       	ldi	r27, 0x3F	; 63
    574a:	fe 01       	movw	r30, r28
    574c:	e6 5b       	subi	r30, 0xB6	; 182
    574e:	ff 4f       	sbci	r31, 0xFF	; 255
    5750:	80 83       	st	Z, r24
    5752:	91 83       	std	Z+1, r25	; 0x01
    5754:	a2 83       	std	Z+2, r26	; 0x02
    5756:	b3 83       	std	Z+3, r27	; 0x03
	   PC.sinT = sin( PC.theta );
    5758:	80 ef       	ldi	r24, 0xF0	; 240
    575a:	94 ed       	ldi	r25, 0xD4	; 212
    575c:	a2 e1       	ldi	r26, 0x12	; 18
    575e:	bf e3       	ldi	r27, 0x3F	; 63
    5760:	fe 01       	movw	r30, r28
    5762:	e2 5b       	subi	r30, 0xB2	; 178
    5764:	ff 4f       	sbci	r31, 0xFF	; 255
    5766:	80 83       	st	Z, r24
    5768:	91 83       	std	Z+1, r25	; 0x01
    576a:	a2 83       	std	Z+2, r26	; 0x02
    576c:	b3 83       	std	Z+3, r27	; 0x03
      PC.cosP = cos( PC.phi );
    576e:	89 e5       	ldi	r24, 0x59	; 89
    5770:	94 eb       	ldi	r25, 0xB4	; 180
    5772:	ad e5       	ldi	r26, 0x5D	; 93
    5774:	bf e3       	ldi	r27, 0x3F	; 63
    5776:	fe 01       	movw	r30, r28
    5778:	ee 5a       	subi	r30, 0xAE	; 174
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	80 83       	st	Z, r24
    577e:	91 83       	std	Z+1, r25	; 0x01
    5780:	a2 83       	std	Z+2, r26	; 0x02
    5782:	b3 83       	std	Z+3, r27	; 0x03
	   PC.sinP = sin( PC.phi );
    5784:	80 e4       	ldi	r24, 0x40	; 64
    5786:	9e ef       	ldi	r25, 0xFE	; 254
    5788:	af ef       	ldi	r26, 0xFF	; 255
    578a:	be e3       	ldi	r27, 0x3E	; 62
    578c:	fe 01       	movw	r30, r28
    578e:	ea 5a       	subi	r30, 0xAA	; 170
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	80 83       	st	Z, r24
    5794:	91 83       	std	Z+1, r25	; 0x01
    5796:	a2 83       	std	Z+2, r26	; 0x02
    5798:	b3 83       	std	Z+3, r27	; 0x03
      PC.cosTcosP = PC.cosT*PC.cosP;
    579a:	8a ea       	ldi	r24, 0xAA	; 170
    579c:	9c e9       	ldi	r25, 0x9C	; 156
    579e:	a5 e3       	ldi	r26, 0x35	; 53
    57a0:	bf e3       	ldi	r27, 0x3F	; 63
    57a2:	fe 01       	movw	r30, r28
    57a4:	e6 5a       	subi	r30, 0xA6	; 166
    57a6:	ff 4f       	sbci	r31, 0xFF	; 255
    57a8:	80 83       	st	Z, r24
    57aa:	91 83       	std	Z+1, r25	; 0x01
    57ac:	a2 83       	std	Z+2, r26	; 0x02
    57ae:	b3 83       	std	Z+3, r27	; 0x03
	  PC.cosTsinP = PC.cosT*PC.sinP;
    57b0:	81 e3       	ldi	r24, 0x31	; 49
    57b2:	93 eb       	ldi	r25, 0xB3	; 179
    57b4:	a1 ed       	ldi	r26, 0xD1	; 209
    57b6:	be e3       	ldi	r27, 0x3E	; 62
    57b8:	fe 01       	movw	r30, r28
    57ba:	e2 5a       	subi	r30, 0xA2	; 162
    57bc:	ff 4f       	sbci	r31, 0xFF	; 255
    57be:	80 83       	st	Z, r24
    57c0:	91 83       	std	Z+1, r25	; 0x01
    57c2:	a2 83       	std	Z+2, r26	; 0x02
    57c4:	b3 83       	std	Z+3, r27	; 0x03
       PC.sinTcosP = PC.sinT*PC.cosP; 
    57c6:	88 e8       	ldi	r24, 0x88	; 136
    57c8:	92 e5       	ldi	r25, 0x52	; 82
    57ca:	ae ef       	ldi	r26, 0xFE	; 254
    57cc:	be e3       	ldi	r27, 0x3E	; 62
    57ce:	fe 01       	movw	r30, r28
    57d0:	ee 59       	subi	r30, 0x9E	; 158
    57d2:	ff 4f       	sbci	r31, 0xFF	; 255
    57d4:	80 83       	st	Z, r24
    57d6:	91 83       	std	Z+1, r25	; 0x01
    57d8:	a2 83       	std	Z+2, r26	; 0x02
    57da:	b3 83       	std	Z+3, r27	; 0x03
	   PC.sinTsinP = PC.sinT*PC.sinP;
    57dc:	8f ee       	ldi	r24, 0xEF	; 239
    57de:	93 ed       	ldi	r25, 0xD3	; 211
    57e0:	a2 e9       	ldi	r26, 0x92	; 146
    57e2:	be e3       	ldi	r27, 0x3E	; 62
    57e4:	fe 01       	movw	r30, r28
    57e6:	ea 59       	subi	r30, 0x9A	; 154
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 83       	st	Z, r24
    57ec:	91 83       	std	Z+1, r25	; 0x01
    57ee:	a2 83       	std	Z+2, r26	; 0x02
    57f0:	b3 83       	std	Z+3, r27	; 0x03

Vertice Cube[8];
Cube[0].p3d.x=1;Cube[0].p3d.y=1;Cube[0].p3d.z=-1;
    57f2:	fe 01       	movw	r30, r28
    57f4:	e6 59       	subi	r30, 0x96	; 150
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	21 e0       	ldi	r18, 0x01	; 1
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	31 83       	std	Z+1, r19	; 0x01
    57fe:	20 83       	st	Z, r18
    5800:	33 83       	std	Z+3, r19	; 0x03
    5802:	22 83       	std	Z+2, r18	; 0x02
    5804:	8f ef       	ldi	r24, 0xFF	; 255
    5806:	9f ef       	ldi	r25, 0xFF	; 255
    5808:	95 83       	std	Z+5, r25	; 0x05
    580a:	84 83       	std	Z+4, r24	; 0x04
Cube[1].p3d.x=1;Cube[1].p3d.y=1;Cube[1].p3d.z=1;
    580c:	33 87       	std	Z+11, r19	; 0x0b
    580e:	22 87       	std	Z+10, r18	; 0x0a
    5810:	35 87       	std	Z+13, r19	; 0x0d
    5812:	24 87       	std	Z+12, r18	; 0x0c
    5814:	37 87       	std	Z+15, r19	; 0x0f
    5816:	26 87       	std	Z+14, r18	; 0x0e
Cube[2].p3d.x=-1;Cube[2].p3d.y=1;Cube[2].p3d.z=1;
    5818:	95 8b       	std	Z+21, r25	; 0x15
    581a:	84 8b       	std	Z+20, r24	; 0x14
    581c:	37 8b       	std	Z+23, r19	; 0x17
    581e:	26 8b       	std	Z+22, r18	; 0x16
    5820:	31 8f       	std	Z+25, r19	; 0x19
    5822:	20 8f       	std	Z+24, r18	; 0x18
Cube[3].p3d.x=-1;Cube[3].p3d.y=1;Cube[3].p3d.z=-1;
    5824:	97 8f       	std	Z+31, r25	; 0x1f
    5826:	86 8f       	std	Z+30, r24	; 0x1e
    5828:	31 a3       	std	Z+33, r19	; 0x21
    582a:	20 a3       	std	Z+32, r18	; 0x20
    582c:	93 a3       	std	Z+35, r25	; 0x23
    582e:	82 a3       	std	Z+34, r24	; 0x22
Cube[4].p3d.x=-1;Cube[4].p3d.y=-1;Cube[4].p3d.z=-1;
    5830:	91 a7       	std	Z+41, r25	; 0x29
    5832:	80 a7       	std	Z+40, r24	; 0x28
    5834:	93 a7       	std	Z+43, r25	; 0x2b
    5836:	82 a7       	std	Z+42, r24	; 0x2a
    5838:	95 a7       	std	Z+45, r25	; 0x2d
    583a:	84 a7       	std	Z+44, r24	; 0x2c
Cube[5].p3d.x=1;Cube[5].p3d.y=-1;Cube[5].p3d.z=-1;
    583c:	33 ab       	std	Z+51, r19	; 0x33
    583e:	22 ab       	std	Z+50, r18	; 0x32
    5840:	95 ab       	std	Z+53, r25	; 0x35
    5842:	84 ab       	std	Z+52, r24	; 0x34
    5844:	97 ab       	std	Z+55, r25	; 0x37
    5846:	86 ab       	std	Z+54, r24	; 0x36
Cube[6].p3d.x=1;Cube[6].p3d.y=-1;Cube[6].p3d.z=1;
    5848:	35 af       	std	Z+61, r19	; 0x3d
    584a:	24 af       	std	Z+60, r18	; 0x3c
    584c:	97 af       	std	Z+63, r25	; 0x3f
    584e:	86 af       	std	Z+62, r24	; 0x3e
    5850:	fe 01       	movw	r30, r28
    5852:	e6 55       	subi	r30, 0x56	; 86
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	31 83       	std	Z+1, r19	; 0x01
    5858:	20 83       	st	Z, r18
Cube[7].p3d.x=-1;Cube[7].p3d.y=-1;Cube[7].p3d.z=1;
    585a:	fe 01       	movw	r30, r28
    585c:	e0 55       	subi	r30, 0x50	; 80
    585e:	ff 4f       	sbci	r31, 0xFF	; 255
    5860:	91 83       	std	Z+1, r25	; 0x01
    5862:	80 83       	st	Z, r24
    5864:	fe 01       	movw	r30, r28
    5866:	ee 54       	subi	r30, 0x4E	; 78
    5868:	ff 4f       	sbci	r31, 0xFF	; 255
    586a:	91 83       	std	Z+1, r25	; 0x01
    586c:	80 83       	st	Z, r24
    586e:	fe 01       	movw	r30, r28
    5870:	ec 54       	subi	r30, 0x4C	; 76
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
    5874:	31 83       	std	Z+1, r19	; 0x01
    5876:	20 83       	st	Z, r18

int CubeEdges[24]={0,1,0,5,0,3,4,3,4,5,4,7,2,3,2,1,2,7,6,5,6,1,6,7};
    5878:	de 01       	movw	r26, r28
    587a:	16 96       	adiw	r26, 0x06	; 6
    587c:	e5 e2       	ldi	r30, 0x25	; 37
    587e:	f9 e0       	ldi	r31, 0x09	; 9
    5880:	80 e3       	ldi	r24, 0x30	; 48
    5882:	01 90       	ld	r0, Z+
    5884:	0d 92       	st	X+, r0
    5886:	81 50       	subi	r24, 0x01	; 1
    5888:	e1 f7       	brne	.-8      	; 0x5882 <start_3dDemo+0x202>

setSizeCube(Cube,1);
    588a:	8e 01       	movw	r16, r28
    588c:	06 59       	subi	r16, 0x96	; 150
    588e:	1f 4f       	sbci	r17, 0xFF	; 255
    5890:	c8 01       	movw	r24, r16
    5892:	61 e0       	ldi	r22, 0x01	; 1
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <setSizeCube>
calcCube(Cube,&PC);
    589a:	b6 e3       	ldi	r27, 0x36	; 54
    589c:	cb 2e       	mov	r12, r27
    589e:	d1 2c       	mov	r13, r1
    58a0:	cc 0e       	add	r12, r28
    58a2:	dd 1e       	adc	r13, r29
    58a4:	c8 01       	movw	r24, r16
    58a6:	b6 01       	movw	r22, r12
    58a8:	0e 94 29 2a 	call	0x5452	; 0x5452 <calcCube>

drawCube(lcd,Cube,CubeEdges);
    58ac:	a6 e0       	ldi	r26, 0x06	; 6
    58ae:	ea 2e       	mov	r14, r26
    58b0:	f1 2c       	mov	r15, r1
    58b2:	ec 0e       	add	r14, r28
    58b4:	fd 1e       	adc	r15, r29
    58b6:	c5 01       	movw	r24, r10
    58b8:	b8 01       	movw	r22, r16
    58ba:	a7 01       	movw	r20, r14
    58bc:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <drawCube>
LCD_drawPixel(lcd,Zneg.p2d.x,Zneg.p2d.y);
LCD_drawPixel(lcd,Zpos.p2d.x,Zpos.p2d.y);
LCD_drawLine(lcd,Zneg.p2d.x,Zneg.p2d.y,Zpos.p2d.x,Zpos.p2d.y);
*/
int downX=0;
int downA=PC.azimuth;
    58c0:	2e a8       	ldd	r2, Y+54	; 0x36
    58c2:	3f a8       	ldd	r3, Y+55	; 0x37
    58c4:	f1 e0       	ldi	r31, 0x01	; 1
    58c6:	8f 2e       	mov	r8, r31
    58c8:	91 2c       	mov	r9, r1
    58ca:	66 24       	eor	r6, r6
    58cc:	77 24       	eor	r7, r7
if (START_isPressedAndRel()){
		return 5;
		}
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
//printfStr(lcd,"    ",80,2);
drawCube(lcd,Cube,CubeEdges);
    58ce:	28 01       	movw	r4, r16
    58d0:	c1 54       	subi	r28, 0x41	; 65
    58d2:	df 4f       	sbci	r29, 0xFF	; 255
    58d4:	e8 82       	st	Y, r14
    58d6:	cf 5b       	subi	r28, 0xBF	; 191
    58d8:	d0 40       	sbci	r29, 0x00	; 0
    58da:	ef 2c       	mov	r14, r15
		}else {downX=0;}




RotatePreCalc(&PC,rotSpeed);
    58dc:	fc 2c       	mov	r15, r12
    58de:	cd 2c       	mov	r12, r13
*/
int downX=0;
int downA=PC.azimuth;
while (1){//Main loop

if (START_isPressedAndRel()){
    58e0:	0e 94 18 11 	call	0x2230	; 0x2230 <START_isPressedAndRel>
    58e4:	88 23       	and	r24, r24
    58e6:	e1 f0       	breq	.+56     	; 0x5920 <start_3dDemo+0x2a0>
}


return 0;

}
    58e8:	85 e0       	ldi	r24, 0x05	; 5
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	c1 54       	subi	r28, 0x41	; 65
    58ee:	df 4f       	sbci	r29, 0xFF	; 255
    58f0:	0f b6       	in	r0, 0x3f	; 63
    58f2:	f8 94       	cli
    58f4:	de bf       	out	0x3e, r29	; 62
    58f6:	0f be       	out	0x3f, r0	; 63
    58f8:	cd bf       	out	0x3d, r28	; 61
    58fa:	cf 91       	pop	r28
    58fc:	df 91       	pop	r29
    58fe:	1f 91       	pop	r17
    5900:	0f 91       	pop	r16
    5902:	ff 90       	pop	r15
    5904:	ef 90       	pop	r14
    5906:	df 90       	pop	r13
    5908:	cf 90       	pop	r12
    590a:	bf 90       	pop	r11
    590c:	af 90       	pop	r10
    590e:	9f 90       	pop	r9
    5910:	8f 90       	pop	r8
    5912:	7f 90       	pop	r7
    5914:	6f 90       	pop	r6
    5916:	5f 90       	pop	r5
    5918:	4f 90       	pop	r4
    591a:	3f 90       	pop	r3
    591c:	2f 90       	pop	r2
    591e:	08 95       	ret
while (1){//Main loop

if (START_isPressedAndRel()){
		return 5;
		}
pixelSetOrClearOrInvert(lcd,CLEAR_PIXELS);
    5920:	c5 01       	movw	r24, r10
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
//printfStr(lcd,"    ",80,2);
drawCube(lcd,Cube,CubeEdges);
    5928:	c5 01       	movw	r24, r10
    592a:	b2 01       	movw	r22, r4
    592c:	c1 54       	subi	r28, 0x41	; 65
    592e:	df 4f       	sbci	r29, 0xFF	; 255
    5930:	48 81       	ld	r20, Y
    5932:	cf 5b       	subi	r28, 0xBF	; 191
    5934:	d0 40       	sbci	r29, 0x00	; 0
    5936:	5e 2d       	mov	r21, r14
    5938:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <drawCube>

fillRect(lcd,122,30-rotSpeed,5,4);
    593c:	4e e1       	ldi	r20, 0x1E	; 30
    593e:	50 e0       	ldi	r21, 0x00	; 0
    5940:	48 19       	sub	r20, r8
    5942:	59 09       	sbc	r21, r9
    5944:	c5 01       	movw	r24, r10
    5946:	6a e7       	ldi	r22, 0x7A	; 122
    5948:	70 e0       	ldi	r23, 0x00	; 0
    594a:	25 e0       	ldi	r18, 0x05	; 5
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	04 e0       	ldi	r16, 0x04	; 4
    5950:	10 e0       	ldi	r17, 0x00	; 0
    5952:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>
fillRect(lcd,PC.nearToObj*6,58,4,5);
    5956:	6a ad       	ldd	r22, Y+58	; 0x3a
    5958:	7b ad       	ldd	r23, Y+59	; 0x3b
    595a:	8c ad       	ldd	r24, Y+60	; 0x3c
    595c:	9d ad       	ldd	r25, Y+61	; 0x3d
    595e:	20 e0       	ldi	r18, 0x00	; 0
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	40 ec       	ldi	r20, 0xC0	; 192
    5964:	50 e4       	ldi	r21, 0x40	; 64
    5966:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    596a:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    596e:	9b 01       	movw	r18, r22
    5970:	ac 01       	movw	r20, r24
    5972:	c5 01       	movw	r24, r10
    5974:	b9 01       	movw	r22, r18
    5976:	4a e3       	ldi	r20, 0x3A	; 58
    5978:	50 e0       	ldi	r21, 0x00	; 0
    597a:	24 e0       	ldi	r18, 0x04	; 4
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	05 e0       	ldi	r16, 0x05	; 5
    5980:	10 e0       	ldi	r17, 0x00	; 0
    5982:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>

	if (TOUCH_STATE==TOUCH_STATE_PRESSED){
    5986:	80 91 64 0a 	lds	r24, 0x0A64
    598a:	82 30       	cpi	r24, 0x02	; 2
    598c:	19 f0       	breq	.+6      	; 0x5994 <start_3dDemo+0x314>
    598e:	66 24       	eor	r6, r6
    5990:	77 24       	eor	r7, r7
    5992:	68 c0       	rjmp	.+208    	; 0x5a64 <start_3dDemo+0x3e4>
		Point p=getTouch();
    5994:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <getTouch>
    5998:	c6 54       	subi	r28, 0x46	; 70
    599a:	df 4f       	sbci	r29, 0xFF	; 255
    599c:	28 83       	st	Y, r18
    599e:	ca 5b       	subi	r28, 0xBA	; 186
    59a0:	d0 40       	sbci	r29, 0x00	; 0
    59a2:	c5 54       	subi	r28, 0x45	; 69
    59a4:	df 4f       	sbci	r29, 0xFF	; 255
    59a6:	38 83       	st	Y, r19
    59a8:	cb 5b       	subi	r28, 0xBB	; 187
    59aa:	d0 40       	sbci	r29, 0x00	; 0
    59ac:	c4 54       	subi	r28, 0x44	; 68
    59ae:	df 4f       	sbci	r29, 0xFF	; 255
    59b0:	48 83       	st	Y, r20
    59b2:	cc 5b       	subi	r28, 0xBC	; 188
    59b4:	d0 40       	sbci	r29, 0x00	; 0
    59b6:	c3 54       	subi	r28, 0x43	; 67
    59b8:	df 4f       	sbci	r29, 0xFF	; 255
    59ba:	58 83       	st	Y, r21
    59bc:	cd 5b       	subi	r28, 0xBD	; 189
    59be:	d0 40       	sbci	r29, 0x00	; 0
    59c0:	c2 54       	subi	r28, 0x42	; 66
    59c2:	df 4f       	sbci	r29, 0xFF	; 255
    59c4:	68 83       	st	Y, r22
    59c6:	ce 5b       	subi	r28, 0xBE	; 190
    59c8:	d0 40       	sbci	r29, 0x00	; 0
    59ca:	de 01       	movw	r26, r28
    59cc:	11 96       	adiw	r26, 0x01	; 1
    59ce:	fe 01       	movw	r30, r28
    59d0:	e6 54       	subi	r30, 0x46	; 70
    59d2:	ff 4f       	sbci	r31, 0xFF	; 255
    59d4:	85 e0       	ldi	r24, 0x05	; 5
    59d6:	01 90       	ld	r0, Z+
    59d8:	0d 92       	st	X+, r0
    59da:	81 50       	subi	r24, 0x01	; 1
    59dc:	e1 f7       	brne	.-8      	; 0x59d6 <start_3dDemo+0x356>
    59de:	4b 81       	ldd	r20, Y+3	; 0x03
    59e0:	5c 81       	ldd	r21, Y+4	; 0x04
    59e2:	29 81       	ldd	r18, Y+1	; 0x01
    59e4:	3a 81       	ldd	r19, Y+2	; 0x02
		if (p.down_count>8){
    59e6:	8d 81       	ldd	r24, Y+5	; 0x05
    59e8:	89 30       	cpi	r24, 0x09	; 9
    59ea:	e0 f1       	brcs	.+120    	; 0x5a64 <start_3dDemo+0x3e4>
			
			
			if (p.x>=122){
    59ec:	2a 37       	cpi	r18, 0x7A	; 122
    59ee:	31 05       	cpc	r19, r1
    59f0:	bc f0       	brlt	.+46     	; 0x5a20 <start_3dDemo+0x3a0>
			rotSpeed=32-p.y;
    59f2:	e0 e2       	ldi	r30, 0x20	; 32
    59f4:	8e 2e       	mov	r8, r30
    59f6:	91 2c       	mov	r9, r1
    59f8:	84 1a       	sub	r8, r20
    59fa:	95 0a       	sbc	r9, r21
			if (rotSpeed>29)
    59fc:	8e e1       	ldi	r24, 0x1E	; 30
    59fe:	88 16       	cp	r8, r24
    5a00:	91 04       	cpc	r9, r1
    5a02:	24 f0       	brlt	.+8      	; 0x5a0c <start_3dDemo+0x38c>
    5a04:	7d e1       	ldi	r23, 0x1D	; 29
    5a06:	87 2e       	mov	r8, r23
    5a08:	91 2c       	mov	r9, r1
    5a0a:	2c c0       	rjmp	.+88     	; 0x5a64 <start_3dDemo+0x3e4>
				rotSpeed=29;
			if (rotSpeed<-29)
    5a0c:	83 ee       	ldi	r24, 0xE3	; 227
    5a0e:	88 16       	cp	r8, r24
    5a10:	8f ef       	ldi	r24, 0xFF	; 255
    5a12:	98 06       	cpc	r9, r24
    5a14:	3c f5       	brge	.+78     	; 0x5a64 <start_3dDemo+0x3e4>
    5a16:	63 ee       	ldi	r22, 0xE3	; 227
    5a18:	86 2e       	mov	r8, r22
    5a1a:	6f ef       	ldi	r22, 0xFF	; 255
    5a1c:	96 2e       	mov	r9, r22
    5a1e:	22 c0       	rjmp	.+68     	; 0x5a64 <start_3dDemo+0x3e4>
				rotSpeed=-29;
			}else if (p.y>55){
    5a20:	48 33       	cpi	r20, 0x38	; 56
    5a22:	51 05       	cpc	r21, r1
    5a24:	84 f0       	brlt	.+32     	; 0x5a46 <start_3dDemo+0x3c6>
			PC.nearToObj=p.x/6;
    5a26:	c9 01       	movw	r24, r18
    5a28:	66 e0       	ldi	r22, 0x06	; 6
    5a2a:	70 e0       	ldi	r23, 0x00	; 0
    5a2c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__divmodhi4>
    5a30:	88 27       	eor	r24, r24
    5a32:	77 fd       	sbrc	r23, 7
    5a34:	80 95       	com	r24
    5a36:	98 2f       	mov	r25, r24
    5a38:	0e 94 39 31 	call	0x6272	; 0x6272 <__floatsisf>
    5a3c:	6a af       	std	Y+58, r22	; 0x3a
    5a3e:	7b af       	std	Y+59, r23	; 0x3b
    5a40:	8c af       	std	Y+60, r24	; 0x3c
    5a42:	9d af       	std	Y+61, r25	; 0x3d
    5a44:	0f c0       	rjmp	.+30     	; 0x5a64 <start_3dDemo+0x3e4>
			
			}else {//free moving
				if (downX==0){
    5a46:	61 14       	cp	r6, r1
    5a48:	71 04       	cpc	r7, r1
    5a4a:	19 f4       	brne	.+6      	; 0x5a52 <start_3dDemo+0x3d2>
					downX=p.x;
					downA=PC.azimuth;
    5a4c:	2e a8       	ldd	r2, Y+54	; 0x36
    5a4e:	3f a8       	ldd	r3, Y+55	; 0x37
    5a50:	39 01       	movw	r6, r18
					}
				rotSpeed=0;
				PC.azimuth=downA+(downX-p.x);
    5a52:	c3 01       	movw	r24, r6
    5a54:	82 0d       	add	r24, r2
    5a56:	93 1d       	adc	r25, r3
    5a58:	82 1b       	sub	r24, r18
    5a5a:	93 0b       	sbc	r25, r19
    5a5c:	9f ab       	std	Y+55, r25	; 0x37
    5a5e:	8e ab       	std	Y+54, r24	; 0x36
    5a60:	88 24       	eor	r8, r8
    5a62:	99 24       	eor	r9, r9
		}else {downX=0;}




RotatePreCalc(&PC,rotSpeed);
    5a64:	8f 2d       	mov	r24, r15
    5a66:	9c 2d       	mov	r25, r12
    5a68:	b4 01       	movw	r22, r8
    5a6a:	0e 94 44 2a 	call	0x5488	; 0x5488 <RotatePreCalc>
calcCube(Cube,&PC);
    5a6e:	c2 01       	movw	r24, r4
    5a70:	6f 2d       	mov	r22, r15
    5a72:	7c 2d       	mov	r23, r12
    5a74:	0e 94 29 2a 	call	0x5452	; 0x5452 <calcCube>
pixelSetOrClearOrInvert(lcd,SET_PIXELS);
    5a78:	c5 01       	movw	r24, r10
    5a7a:	61 e0       	ldi	r22, 0x01	; 1
    5a7c:	0e 94 de 07 	call	0xfbc	; 0xfbc <pixelSetOrClearOrInvert>
drawRect(lcd,122,0,5,63);
    5a80:	c5 01       	movw	r24, r10
    5a82:	6a e7       	ldi	r22, 0x7A	; 122
    5a84:	70 e0       	ldi	r23, 0x00	; 0
    5a86:	40 e0       	ldi	r20, 0x00	; 0
    5a88:	50 e0       	ldi	r21, 0x00	; 0
    5a8a:	25 e0       	ldi	r18, 0x05	; 5
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	0f e3       	ldi	r16, 0x3F	; 63
    5a90:	10 e0       	ldi	r17, 0x00	; 0
    5a92:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
drawRect(lcd,0,58,121,5);
    5a96:	c5 01       	movw	r24, r10
    5a98:	60 e0       	ldi	r22, 0x00	; 0
    5a9a:	70 e0       	ldi	r23, 0x00	; 0
    5a9c:	4a e3       	ldi	r20, 0x3A	; 58
    5a9e:	50 e0       	ldi	r21, 0x00	; 0
    5aa0:	29 e7       	ldi	r18, 0x79	; 121
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	05 e0       	ldi	r16, 0x05	; 5
    5aa6:	10 e0       	ldi	r17, 0x00	; 0
    5aa8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <drawRect>
fillRect(lcd,122,30-rotSpeed,5,4);
    5aac:	4e e1       	ldi	r20, 0x1E	; 30
    5aae:	50 e0       	ldi	r21, 0x00	; 0
    5ab0:	48 19       	sub	r20, r8
    5ab2:	59 09       	sbc	r21, r9
    5ab4:	c5 01       	movw	r24, r10
    5ab6:	6a e7       	ldi	r22, 0x7A	; 122
    5ab8:	70 e0       	ldi	r23, 0x00	; 0
    5aba:	25 e0       	ldi	r18, 0x05	; 5
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	04 e0       	ldi	r16, 0x04	; 4
    5ac0:	10 e0       	ldi	r17, 0x00	; 0
    5ac2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>
fillRect(lcd,PC.nearToObj*6,58,4,5);
    5ac6:	6a ad       	ldd	r22, Y+58	; 0x3a
    5ac8:	7b ad       	ldd	r23, Y+59	; 0x3b
    5aca:	8c ad       	ldd	r24, Y+60	; 0x3c
    5acc:	9d ad       	ldd	r25, Y+61	; 0x3d
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	40 ec       	ldi	r20, 0xC0	; 192
    5ad4:	50 e4       	ldi	r21, 0x40	; 64
    5ad6:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__mulsf3>
    5ada:	0e 94 97 31 	call	0x632e	; 0x632e <__fixsfsi>
    5ade:	9b 01       	movw	r18, r22
    5ae0:	ac 01       	movw	r20, r24
    5ae2:	c5 01       	movw	r24, r10
    5ae4:	b9 01       	movw	r22, r18
    5ae6:	4a e3       	ldi	r20, 0x3A	; 58
    5ae8:	50 e0       	ldi	r21, 0x00	; 0
    5aea:	24 e0       	ldi	r18, 0x04	; 4
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	05 e0       	ldi	r16, 0x05	; 5
    5af0:	10 e0       	ldi	r17, 0x00	; 0
    5af2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <fillRect>
drawCube(lcd,Cube,CubeEdges);
    5af6:	c5 01       	movw	r24, r10
    5af8:	b2 01       	movw	r22, r4
    5afa:	c1 54       	subi	r28, 0x41	; 65
    5afc:	df 4f       	sbci	r29, 0xFF	; 255
    5afe:	48 81       	ld	r20, Y
    5b00:	cf 5b       	subi	r28, 0xBF	; 191
    5b02:	d0 40       	sbci	r29, 0x00	; 0
    5b04:	5e 2d       	mov	r21, r14
    5b06:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <drawCube>

//printfInt(lcd,rotSpeed,80,2);
pushRAM(lcd);
    5b0a:	c5 01       	movw	r24, r10
    5b0c:	0e 94 a9 09 	call	0x1352	; 0x1352 <pushRAM>
    5b10:	e7 ce       	rjmp	.-562    	; 0x58e0 <start_3dDemo+0x260>

00005b12 <_fpadd_parts>:
    5b12:	a0 e0       	ldi	r26, 0x00	; 0
    5b14:	b0 e0       	ldi	r27, 0x00	; 0
    5b16:	ef e8       	ldi	r30, 0x8F	; 143
    5b18:	fd e2       	ldi	r31, 0x2D	; 45
    5b1a:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__prologue_saves__>
    5b1e:	dc 01       	movw	r26, r24
    5b20:	2b 01       	movw	r4, r22
    5b22:	fa 01       	movw	r30, r20
    5b24:	9c 91       	ld	r25, X
    5b26:	92 30       	cpi	r25, 0x02	; 2
    5b28:	08 f4       	brcc	.+2      	; 0x5b2c <_fpadd_parts+0x1a>
    5b2a:	39 c1       	rjmp	.+626    	; 0x5d9e <_fpadd_parts+0x28c>
    5b2c:	eb 01       	movw	r28, r22
    5b2e:	88 81       	ld	r24, Y
    5b30:	82 30       	cpi	r24, 0x02	; 2
    5b32:	08 f4       	brcc	.+2      	; 0x5b36 <_fpadd_parts+0x24>
    5b34:	33 c1       	rjmp	.+614    	; 0x5d9c <_fpadd_parts+0x28a>
    5b36:	94 30       	cpi	r25, 0x04	; 4
    5b38:	69 f4       	brne	.+26     	; 0x5b54 <_fpadd_parts+0x42>
    5b3a:	84 30       	cpi	r24, 0x04	; 4
    5b3c:	09 f0       	breq	.+2      	; 0x5b40 <_fpadd_parts+0x2e>
    5b3e:	2f c1       	rjmp	.+606    	; 0x5d9e <_fpadd_parts+0x28c>
    5b40:	11 96       	adiw	r26, 0x01	; 1
    5b42:	9c 91       	ld	r25, X
    5b44:	11 97       	sbiw	r26, 0x01	; 1
    5b46:	89 81       	ldd	r24, Y+1	; 0x01
    5b48:	98 17       	cp	r25, r24
    5b4a:	09 f4       	brne	.+2      	; 0x5b4e <_fpadd_parts+0x3c>
    5b4c:	28 c1       	rjmp	.+592    	; 0x5d9e <_fpadd_parts+0x28c>
    5b4e:	a5 e5       	ldi	r26, 0x55	; 85
    5b50:	b9 e0       	ldi	r27, 0x09	; 9
    5b52:	25 c1       	rjmp	.+586    	; 0x5d9e <_fpadd_parts+0x28c>
    5b54:	84 30       	cpi	r24, 0x04	; 4
    5b56:	09 f4       	brne	.+2      	; 0x5b5a <_fpadd_parts+0x48>
    5b58:	21 c1       	rjmp	.+578    	; 0x5d9c <_fpadd_parts+0x28a>
    5b5a:	82 30       	cpi	r24, 0x02	; 2
    5b5c:	a9 f4       	brne	.+42     	; 0x5b88 <_fpadd_parts+0x76>
    5b5e:	92 30       	cpi	r25, 0x02	; 2
    5b60:	09 f0       	breq	.+2      	; 0x5b64 <_fpadd_parts+0x52>
    5b62:	1d c1       	rjmp	.+570    	; 0x5d9e <_fpadd_parts+0x28c>
    5b64:	9a 01       	movw	r18, r20
    5b66:	ad 01       	movw	r20, r26
    5b68:	88 e0       	ldi	r24, 0x08	; 8
    5b6a:	ea 01       	movw	r28, r20
    5b6c:	09 90       	ld	r0, Y+
    5b6e:	ae 01       	movw	r20, r28
    5b70:	e9 01       	movw	r28, r18
    5b72:	09 92       	st	Y+, r0
    5b74:	9e 01       	movw	r18, r28
    5b76:	81 50       	subi	r24, 0x01	; 1
    5b78:	c1 f7       	brne	.-16     	; 0x5b6a <_fpadd_parts+0x58>
    5b7a:	e2 01       	movw	r28, r4
    5b7c:	89 81       	ldd	r24, Y+1	; 0x01
    5b7e:	11 96       	adiw	r26, 0x01	; 1
    5b80:	9c 91       	ld	r25, X
    5b82:	89 23       	and	r24, r25
    5b84:	81 83       	std	Z+1, r24	; 0x01
    5b86:	08 c1       	rjmp	.+528    	; 0x5d98 <_fpadd_parts+0x286>
    5b88:	92 30       	cpi	r25, 0x02	; 2
    5b8a:	09 f4       	brne	.+2      	; 0x5b8e <_fpadd_parts+0x7c>
    5b8c:	07 c1       	rjmp	.+526    	; 0x5d9c <_fpadd_parts+0x28a>
    5b8e:	12 96       	adiw	r26, 0x02	; 2
    5b90:	2d 90       	ld	r2, X+
    5b92:	3c 90       	ld	r3, X
    5b94:	13 97       	sbiw	r26, 0x03	; 3
    5b96:	eb 01       	movw	r28, r22
    5b98:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b9c:	14 96       	adiw	r26, 0x04	; 4
    5b9e:	ad 90       	ld	r10, X+
    5ba0:	bd 90       	ld	r11, X+
    5ba2:	cd 90       	ld	r12, X+
    5ba4:	dc 90       	ld	r13, X
    5ba6:	17 97       	sbiw	r26, 0x07	; 7
    5ba8:	ec 80       	ldd	r14, Y+4	; 0x04
    5baa:	fd 80       	ldd	r15, Y+5	; 0x05
    5bac:	0e 81       	ldd	r16, Y+6	; 0x06
    5bae:	1f 81       	ldd	r17, Y+7	; 0x07
    5bb0:	91 01       	movw	r18, r2
    5bb2:	28 1b       	sub	r18, r24
    5bb4:	39 0b       	sbc	r19, r25
    5bb6:	b9 01       	movw	r22, r18
    5bb8:	37 ff       	sbrs	r19, 7
    5bba:	04 c0       	rjmp	.+8      	; 0x5bc4 <_fpadd_parts+0xb2>
    5bbc:	66 27       	eor	r22, r22
    5bbe:	77 27       	eor	r23, r23
    5bc0:	62 1b       	sub	r22, r18
    5bc2:	73 0b       	sbc	r23, r19
    5bc4:	60 32       	cpi	r22, 0x20	; 32
    5bc6:	71 05       	cpc	r23, r1
    5bc8:	0c f0       	brlt	.+2      	; 0x5bcc <_fpadd_parts+0xba>
    5bca:	61 c0       	rjmp	.+194    	; 0x5c8e <_fpadd_parts+0x17c>
    5bcc:	12 16       	cp	r1, r18
    5bce:	13 06       	cpc	r1, r19
    5bd0:	6c f5       	brge	.+90     	; 0x5c2c <_fpadd_parts+0x11a>
    5bd2:	37 01       	movw	r6, r14
    5bd4:	48 01       	movw	r8, r16
    5bd6:	06 2e       	mov	r0, r22
    5bd8:	04 c0       	rjmp	.+8      	; 0x5be2 <_fpadd_parts+0xd0>
    5bda:	96 94       	lsr	r9
    5bdc:	87 94       	ror	r8
    5bde:	77 94       	ror	r7
    5be0:	67 94       	ror	r6
    5be2:	0a 94       	dec	r0
    5be4:	d2 f7       	brpl	.-12     	; 0x5bda <_fpadd_parts+0xc8>
    5be6:	21 e0       	ldi	r18, 0x01	; 1
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	40 e0       	ldi	r20, 0x00	; 0
    5bec:	50 e0       	ldi	r21, 0x00	; 0
    5bee:	04 c0       	rjmp	.+8      	; 0x5bf8 <_fpadd_parts+0xe6>
    5bf0:	22 0f       	add	r18, r18
    5bf2:	33 1f       	adc	r19, r19
    5bf4:	44 1f       	adc	r20, r20
    5bf6:	55 1f       	adc	r21, r21
    5bf8:	6a 95       	dec	r22
    5bfa:	d2 f7       	brpl	.-12     	; 0x5bf0 <_fpadd_parts+0xde>
    5bfc:	21 50       	subi	r18, 0x01	; 1
    5bfe:	30 40       	sbci	r19, 0x00	; 0
    5c00:	40 40       	sbci	r20, 0x00	; 0
    5c02:	50 40       	sbci	r21, 0x00	; 0
    5c04:	2e 21       	and	r18, r14
    5c06:	3f 21       	and	r19, r15
    5c08:	40 23       	and	r20, r16
    5c0a:	51 23       	and	r21, r17
    5c0c:	21 15       	cp	r18, r1
    5c0e:	31 05       	cpc	r19, r1
    5c10:	41 05       	cpc	r20, r1
    5c12:	51 05       	cpc	r21, r1
    5c14:	21 f0       	breq	.+8      	; 0x5c1e <_fpadd_parts+0x10c>
    5c16:	21 e0       	ldi	r18, 0x01	; 1
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	40 e0       	ldi	r20, 0x00	; 0
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	79 01       	movw	r14, r18
    5c20:	8a 01       	movw	r16, r20
    5c22:	e6 28       	or	r14, r6
    5c24:	f7 28       	or	r15, r7
    5c26:	08 29       	or	r16, r8
    5c28:	19 29       	or	r17, r9
    5c2a:	3c c0       	rjmp	.+120    	; 0x5ca4 <_fpadd_parts+0x192>
    5c2c:	23 2b       	or	r18, r19
    5c2e:	d1 f1       	breq	.+116    	; 0x5ca4 <_fpadd_parts+0x192>
    5c30:	26 0e       	add	r2, r22
    5c32:	37 1e       	adc	r3, r23
    5c34:	35 01       	movw	r6, r10
    5c36:	46 01       	movw	r8, r12
    5c38:	06 2e       	mov	r0, r22
    5c3a:	04 c0       	rjmp	.+8      	; 0x5c44 <_fpadd_parts+0x132>
    5c3c:	96 94       	lsr	r9
    5c3e:	87 94       	ror	r8
    5c40:	77 94       	ror	r7
    5c42:	67 94       	ror	r6
    5c44:	0a 94       	dec	r0
    5c46:	d2 f7       	brpl	.-12     	; 0x5c3c <_fpadd_parts+0x12a>
    5c48:	21 e0       	ldi	r18, 0x01	; 1
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	40 e0       	ldi	r20, 0x00	; 0
    5c4e:	50 e0       	ldi	r21, 0x00	; 0
    5c50:	04 c0       	rjmp	.+8      	; 0x5c5a <_fpadd_parts+0x148>
    5c52:	22 0f       	add	r18, r18
    5c54:	33 1f       	adc	r19, r19
    5c56:	44 1f       	adc	r20, r20
    5c58:	55 1f       	adc	r21, r21
    5c5a:	6a 95       	dec	r22
    5c5c:	d2 f7       	brpl	.-12     	; 0x5c52 <_fpadd_parts+0x140>
    5c5e:	21 50       	subi	r18, 0x01	; 1
    5c60:	30 40       	sbci	r19, 0x00	; 0
    5c62:	40 40       	sbci	r20, 0x00	; 0
    5c64:	50 40       	sbci	r21, 0x00	; 0
    5c66:	2a 21       	and	r18, r10
    5c68:	3b 21       	and	r19, r11
    5c6a:	4c 21       	and	r20, r12
    5c6c:	5d 21       	and	r21, r13
    5c6e:	21 15       	cp	r18, r1
    5c70:	31 05       	cpc	r19, r1
    5c72:	41 05       	cpc	r20, r1
    5c74:	51 05       	cpc	r21, r1
    5c76:	21 f0       	breq	.+8      	; 0x5c80 <_fpadd_parts+0x16e>
    5c78:	21 e0       	ldi	r18, 0x01	; 1
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	40 e0       	ldi	r20, 0x00	; 0
    5c7e:	50 e0       	ldi	r21, 0x00	; 0
    5c80:	59 01       	movw	r10, r18
    5c82:	6a 01       	movw	r12, r20
    5c84:	a6 28       	or	r10, r6
    5c86:	b7 28       	or	r11, r7
    5c88:	c8 28       	or	r12, r8
    5c8a:	d9 28       	or	r13, r9
    5c8c:	0b c0       	rjmp	.+22     	; 0x5ca4 <_fpadd_parts+0x192>
    5c8e:	82 15       	cp	r24, r2
    5c90:	93 05       	cpc	r25, r3
    5c92:	2c f0       	brlt	.+10     	; 0x5c9e <_fpadd_parts+0x18c>
    5c94:	1c 01       	movw	r2, r24
    5c96:	aa 24       	eor	r10, r10
    5c98:	bb 24       	eor	r11, r11
    5c9a:	65 01       	movw	r12, r10
    5c9c:	03 c0       	rjmp	.+6      	; 0x5ca4 <_fpadd_parts+0x192>
    5c9e:	ee 24       	eor	r14, r14
    5ca0:	ff 24       	eor	r15, r15
    5ca2:	87 01       	movw	r16, r14
    5ca4:	11 96       	adiw	r26, 0x01	; 1
    5ca6:	9c 91       	ld	r25, X
    5ca8:	d2 01       	movw	r26, r4
    5caa:	11 96       	adiw	r26, 0x01	; 1
    5cac:	8c 91       	ld	r24, X
    5cae:	98 17       	cp	r25, r24
    5cb0:	09 f4       	brne	.+2      	; 0x5cb4 <_fpadd_parts+0x1a2>
    5cb2:	45 c0       	rjmp	.+138    	; 0x5d3e <_fpadd_parts+0x22c>
    5cb4:	99 23       	and	r25, r25
    5cb6:	39 f0       	breq	.+14     	; 0x5cc6 <_fpadd_parts+0x1b4>
    5cb8:	a8 01       	movw	r20, r16
    5cba:	97 01       	movw	r18, r14
    5cbc:	2a 19       	sub	r18, r10
    5cbe:	3b 09       	sbc	r19, r11
    5cc0:	4c 09       	sbc	r20, r12
    5cc2:	5d 09       	sbc	r21, r13
    5cc4:	06 c0       	rjmp	.+12     	; 0x5cd2 <_fpadd_parts+0x1c0>
    5cc6:	a6 01       	movw	r20, r12
    5cc8:	95 01       	movw	r18, r10
    5cca:	2e 19       	sub	r18, r14
    5ccc:	3f 09       	sbc	r19, r15
    5cce:	40 0b       	sbc	r20, r16
    5cd0:	51 0b       	sbc	r21, r17
    5cd2:	57 fd       	sbrc	r21, 7
    5cd4:	08 c0       	rjmp	.+16     	; 0x5ce6 <_fpadd_parts+0x1d4>
    5cd6:	11 82       	std	Z+1, r1	; 0x01
    5cd8:	33 82       	std	Z+3, r3	; 0x03
    5cda:	22 82       	std	Z+2, r2	; 0x02
    5cdc:	24 83       	std	Z+4, r18	; 0x04
    5cde:	35 83       	std	Z+5, r19	; 0x05
    5ce0:	46 83       	std	Z+6, r20	; 0x06
    5ce2:	57 83       	std	Z+7, r21	; 0x07
    5ce4:	1d c0       	rjmp	.+58     	; 0x5d20 <_fpadd_parts+0x20e>
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	81 83       	std	Z+1, r24	; 0x01
    5cea:	33 82       	std	Z+3, r3	; 0x03
    5cec:	22 82       	std	Z+2, r2	; 0x02
    5cee:	88 27       	eor	r24, r24
    5cf0:	99 27       	eor	r25, r25
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	82 1b       	sub	r24, r18
    5cf6:	93 0b       	sbc	r25, r19
    5cf8:	a4 0b       	sbc	r26, r20
    5cfa:	b5 0b       	sbc	r27, r21
    5cfc:	84 83       	std	Z+4, r24	; 0x04
    5cfe:	95 83       	std	Z+5, r25	; 0x05
    5d00:	a6 83       	std	Z+6, r26	; 0x06
    5d02:	b7 83       	std	Z+7, r27	; 0x07
    5d04:	0d c0       	rjmp	.+26     	; 0x5d20 <_fpadd_parts+0x20e>
    5d06:	22 0f       	add	r18, r18
    5d08:	33 1f       	adc	r19, r19
    5d0a:	44 1f       	adc	r20, r20
    5d0c:	55 1f       	adc	r21, r21
    5d0e:	24 83       	std	Z+4, r18	; 0x04
    5d10:	35 83       	std	Z+5, r19	; 0x05
    5d12:	46 83       	std	Z+6, r20	; 0x06
    5d14:	57 83       	std	Z+7, r21	; 0x07
    5d16:	82 81       	ldd	r24, Z+2	; 0x02
    5d18:	93 81       	ldd	r25, Z+3	; 0x03
    5d1a:	01 97       	sbiw	r24, 0x01	; 1
    5d1c:	93 83       	std	Z+3, r25	; 0x03
    5d1e:	82 83       	std	Z+2, r24	; 0x02
    5d20:	24 81       	ldd	r18, Z+4	; 0x04
    5d22:	35 81       	ldd	r19, Z+5	; 0x05
    5d24:	46 81       	ldd	r20, Z+6	; 0x06
    5d26:	57 81       	ldd	r21, Z+7	; 0x07
    5d28:	da 01       	movw	r26, r20
    5d2a:	c9 01       	movw	r24, r18
    5d2c:	01 97       	sbiw	r24, 0x01	; 1
    5d2e:	a1 09       	sbc	r26, r1
    5d30:	b1 09       	sbc	r27, r1
    5d32:	8f 5f       	subi	r24, 0xFF	; 255
    5d34:	9f 4f       	sbci	r25, 0xFF	; 255
    5d36:	af 4f       	sbci	r26, 0xFF	; 255
    5d38:	bf 43       	sbci	r27, 0x3F	; 63
    5d3a:	28 f3       	brcs	.-54     	; 0x5d06 <_fpadd_parts+0x1f4>
    5d3c:	0b c0       	rjmp	.+22     	; 0x5d54 <_fpadd_parts+0x242>
    5d3e:	91 83       	std	Z+1, r25	; 0x01
    5d40:	33 82       	std	Z+3, r3	; 0x03
    5d42:	22 82       	std	Z+2, r2	; 0x02
    5d44:	ea 0c       	add	r14, r10
    5d46:	fb 1c       	adc	r15, r11
    5d48:	0c 1d       	adc	r16, r12
    5d4a:	1d 1d       	adc	r17, r13
    5d4c:	e4 82       	std	Z+4, r14	; 0x04
    5d4e:	f5 82       	std	Z+5, r15	; 0x05
    5d50:	06 83       	std	Z+6, r16	; 0x06
    5d52:	17 83       	std	Z+7, r17	; 0x07
    5d54:	83 e0       	ldi	r24, 0x03	; 3
    5d56:	80 83       	st	Z, r24
    5d58:	24 81       	ldd	r18, Z+4	; 0x04
    5d5a:	35 81       	ldd	r19, Z+5	; 0x05
    5d5c:	46 81       	ldd	r20, Z+6	; 0x06
    5d5e:	57 81       	ldd	r21, Z+7	; 0x07
    5d60:	57 ff       	sbrs	r21, 7
    5d62:	1a c0       	rjmp	.+52     	; 0x5d98 <_fpadd_parts+0x286>
    5d64:	c9 01       	movw	r24, r18
    5d66:	aa 27       	eor	r26, r26
    5d68:	97 fd       	sbrc	r25, 7
    5d6a:	a0 95       	com	r26
    5d6c:	ba 2f       	mov	r27, r26
    5d6e:	81 70       	andi	r24, 0x01	; 1
    5d70:	90 70       	andi	r25, 0x00	; 0
    5d72:	a0 70       	andi	r26, 0x00	; 0
    5d74:	b0 70       	andi	r27, 0x00	; 0
    5d76:	56 95       	lsr	r21
    5d78:	47 95       	ror	r20
    5d7a:	37 95       	ror	r19
    5d7c:	27 95       	ror	r18
    5d7e:	82 2b       	or	r24, r18
    5d80:	93 2b       	or	r25, r19
    5d82:	a4 2b       	or	r26, r20
    5d84:	b5 2b       	or	r27, r21
    5d86:	84 83       	std	Z+4, r24	; 0x04
    5d88:	95 83       	std	Z+5, r25	; 0x05
    5d8a:	a6 83       	std	Z+6, r26	; 0x06
    5d8c:	b7 83       	std	Z+7, r27	; 0x07
    5d8e:	82 81       	ldd	r24, Z+2	; 0x02
    5d90:	93 81       	ldd	r25, Z+3	; 0x03
    5d92:	01 96       	adiw	r24, 0x01	; 1
    5d94:	93 83       	std	Z+3, r25	; 0x03
    5d96:	82 83       	std	Z+2, r24	; 0x02
    5d98:	df 01       	movw	r26, r30
    5d9a:	01 c0       	rjmp	.+2      	; 0x5d9e <_fpadd_parts+0x28c>
    5d9c:	d2 01       	movw	r26, r4
    5d9e:	cd 01       	movw	r24, r26
    5da0:	cd b7       	in	r28, 0x3d	; 61
    5da2:	de b7       	in	r29, 0x3e	; 62
    5da4:	e2 e1       	ldi	r30, 0x12	; 18
    5da6:	0c 94 2f 34 	jmp	0x685e	; 0x685e <__epilogue_restores__>

00005daa <__subsf3>:
    5daa:	a0 e2       	ldi	r26, 0x20	; 32
    5dac:	b0 e0       	ldi	r27, 0x00	; 0
    5dae:	eb ed       	ldi	r30, 0xDB	; 219
    5db0:	fe e2       	ldi	r31, 0x2E	; 46
    5db2:	0c 94 1f 34 	jmp	0x683e	; 0x683e <__prologue_saves__+0x18>
    5db6:	69 83       	std	Y+1, r22	; 0x01
    5db8:	7a 83       	std	Y+2, r23	; 0x02
    5dba:	8b 83       	std	Y+3, r24	; 0x03
    5dbc:	9c 83       	std	Y+4, r25	; 0x04
    5dbe:	2d 83       	std	Y+5, r18	; 0x05
    5dc0:	3e 83       	std	Y+6, r19	; 0x06
    5dc2:	4f 83       	std	Y+7, r20	; 0x07
    5dc4:	58 87       	std	Y+8, r21	; 0x08
    5dc6:	e9 e0       	ldi	r30, 0x09	; 9
    5dc8:	ee 2e       	mov	r14, r30
    5dca:	f1 2c       	mov	r15, r1
    5dcc:	ec 0e       	add	r14, r28
    5dce:	fd 1e       	adc	r15, r29
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	01 96       	adiw	r24, 0x01	; 1
    5dd4:	b7 01       	movw	r22, r14
    5dd6:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5dda:	8e 01       	movw	r16, r28
    5ddc:	0f 5e       	subi	r16, 0xEF	; 239
    5dde:	1f 4f       	sbci	r17, 0xFF	; 255
    5de0:	ce 01       	movw	r24, r28
    5de2:	05 96       	adiw	r24, 0x05	; 5
    5de4:	b8 01       	movw	r22, r16
    5de6:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5dea:	8a 89       	ldd	r24, Y+18	; 0x12
    5dec:	91 e0       	ldi	r25, 0x01	; 1
    5dee:	89 27       	eor	r24, r25
    5df0:	8a 8b       	std	Y+18, r24	; 0x12
    5df2:	c7 01       	movw	r24, r14
    5df4:	b8 01       	movw	r22, r16
    5df6:	ae 01       	movw	r20, r28
    5df8:	47 5e       	subi	r20, 0xE7	; 231
    5dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfc:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <_fpadd_parts>
    5e00:	0e 94 3a 32 	call	0x6474	; 0x6474 <__pack_f>
    5e04:	a0 96       	adiw	r28, 0x20	; 32
    5e06:	e6 e0       	ldi	r30, 0x06	; 6
    5e08:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <__epilogue_restores__+0x18>

00005e0c <__addsf3>:
    5e0c:	a0 e2       	ldi	r26, 0x20	; 32
    5e0e:	b0 e0       	ldi	r27, 0x00	; 0
    5e10:	ec e0       	ldi	r30, 0x0C	; 12
    5e12:	ff e2       	ldi	r31, 0x2F	; 47
    5e14:	0c 94 1f 34 	jmp	0x683e	; 0x683e <__prologue_saves__+0x18>
    5e18:	69 83       	std	Y+1, r22	; 0x01
    5e1a:	7a 83       	std	Y+2, r23	; 0x02
    5e1c:	8b 83       	std	Y+3, r24	; 0x03
    5e1e:	9c 83       	std	Y+4, r25	; 0x04
    5e20:	2d 83       	std	Y+5, r18	; 0x05
    5e22:	3e 83       	std	Y+6, r19	; 0x06
    5e24:	4f 83       	std	Y+7, r20	; 0x07
    5e26:	58 87       	std	Y+8, r21	; 0x08
    5e28:	f9 e0       	ldi	r31, 0x09	; 9
    5e2a:	ef 2e       	mov	r14, r31
    5e2c:	f1 2c       	mov	r15, r1
    5e2e:	ec 0e       	add	r14, r28
    5e30:	fd 1e       	adc	r15, r29
    5e32:	ce 01       	movw	r24, r28
    5e34:	01 96       	adiw	r24, 0x01	; 1
    5e36:	b7 01       	movw	r22, r14
    5e38:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5e3c:	8e 01       	movw	r16, r28
    5e3e:	0f 5e       	subi	r16, 0xEF	; 239
    5e40:	1f 4f       	sbci	r17, 0xFF	; 255
    5e42:	ce 01       	movw	r24, r28
    5e44:	05 96       	adiw	r24, 0x05	; 5
    5e46:	b8 01       	movw	r22, r16
    5e48:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5e4c:	c7 01       	movw	r24, r14
    5e4e:	b8 01       	movw	r22, r16
    5e50:	ae 01       	movw	r20, r28
    5e52:	47 5e       	subi	r20, 0xE7	; 231
    5e54:	5f 4f       	sbci	r21, 0xFF	; 255
    5e56:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <_fpadd_parts>
    5e5a:	0e 94 3a 32 	call	0x6474	; 0x6474 <__pack_f>
    5e5e:	a0 96       	adiw	r28, 0x20	; 32
    5e60:	e6 e0       	ldi	r30, 0x06	; 6
    5e62:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <__epilogue_restores__+0x18>

00005e66 <__mulsf3>:
    5e66:	a0 e2       	ldi	r26, 0x20	; 32
    5e68:	b0 e0       	ldi	r27, 0x00	; 0
    5e6a:	e9 e3       	ldi	r30, 0x39	; 57
    5e6c:	ff e2       	ldi	r31, 0x2F	; 47
    5e6e:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__prologue_saves__>
    5e72:	69 83       	std	Y+1, r22	; 0x01
    5e74:	7a 83       	std	Y+2, r23	; 0x02
    5e76:	8b 83       	std	Y+3, r24	; 0x03
    5e78:	9c 83       	std	Y+4, r25	; 0x04
    5e7a:	2d 83       	std	Y+5, r18	; 0x05
    5e7c:	3e 83       	std	Y+6, r19	; 0x06
    5e7e:	4f 83       	std	Y+7, r20	; 0x07
    5e80:	58 87       	std	Y+8, r21	; 0x08
    5e82:	ce 01       	movw	r24, r28
    5e84:	01 96       	adiw	r24, 0x01	; 1
    5e86:	be 01       	movw	r22, r28
    5e88:	67 5f       	subi	r22, 0xF7	; 247
    5e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e8c:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5e90:	ce 01       	movw	r24, r28
    5e92:	05 96       	adiw	r24, 0x05	; 5
    5e94:	be 01       	movw	r22, r28
    5e96:	6f 5e       	subi	r22, 0xEF	; 239
    5e98:	7f 4f       	sbci	r23, 0xFF	; 255
    5e9a:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    5e9e:	99 85       	ldd	r25, Y+9	; 0x09
    5ea0:	92 30       	cpi	r25, 0x02	; 2
    5ea2:	88 f0       	brcs	.+34     	; 0x5ec6 <__mulsf3+0x60>
    5ea4:	89 89       	ldd	r24, Y+17	; 0x11
    5ea6:	82 30       	cpi	r24, 0x02	; 2
    5ea8:	c8 f0       	brcs	.+50     	; 0x5edc <__mulsf3+0x76>
    5eaa:	94 30       	cpi	r25, 0x04	; 4
    5eac:	19 f4       	brne	.+6      	; 0x5eb4 <__mulsf3+0x4e>
    5eae:	82 30       	cpi	r24, 0x02	; 2
    5eb0:	51 f4       	brne	.+20     	; 0x5ec6 <__mulsf3+0x60>
    5eb2:	04 c0       	rjmp	.+8      	; 0x5ebc <__mulsf3+0x56>
    5eb4:	84 30       	cpi	r24, 0x04	; 4
    5eb6:	29 f4       	brne	.+10     	; 0x5ec2 <__mulsf3+0x5c>
    5eb8:	92 30       	cpi	r25, 0x02	; 2
    5eba:	81 f4       	brne	.+32     	; 0x5edc <__mulsf3+0x76>
    5ebc:	85 e5       	ldi	r24, 0x55	; 85
    5ebe:	99 e0       	ldi	r25, 0x09	; 9
    5ec0:	c6 c0       	rjmp	.+396    	; 0x604e <__mulsf3+0x1e8>
    5ec2:	92 30       	cpi	r25, 0x02	; 2
    5ec4:	49 f4       	brne	.+18     	; 0x5ed8 <__mulsf3+0x72>
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eca:	8a 89       	ldd	r24, Y+18	; 0x12
    5ecc:	98 13       	cpse	r25, r24
    5ece:	21 e0       	ldi	r18, 0x01	; 1
    5ed0:	2a 87       	std	Y+10, r18	; 0x0a
    5ed2:	ce 01       	movw	r24, r28
    5ed4:	09 96       	adiw	r24, 0x09	; 9
    5ed6:	bb c0       	rjmp	.+374    	; 0x604e <__mulsf3+0x1e8>
    5ed8:	82 30       	cpi	r24, 0x02	; 2
    5eda:	49 f4       	brne	.+18     	; 0x5eee <__mulsf3+0x88>
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ee0:	8a 89       	ldd	r24, Y+18	; 0x12
    5ee2:	98 13       	cpse	r25, r24
    5ee4:	21 e0       	ldi	r18, 0x01	; 1
    5ee6:	2a 8b       	std	Y+18, r18	; 0x12
    5ee8:	ce 01       	movw	r24, r28
    5eea:	41 96       	adiw	r24, 0x11	; 17
    5eec:	b0 c0       	rjmp	.+352    	; 0x604e <__mulsf3+0x1e8>
    5eee:	2d 84       	ldd	r2, Y+13	; 0x0d
    5ef0:	3e 84       	ldd	r3, Y+14	; 0x0e
    5ef2:	4f 84       	ldd	r4, Y+15	; 0x0f
    5ef4:	58 88       	ldd	r5, Y+16	; 0x10
    5ef6:	6d 88       	ldd	r6, Y+21	; 0x15
    5ef8:	7e 88       	ldd	r7, Y+22	; 0x16
    5efa:	8f 88       	ldd	r8, Y+23	; 0x17
    5efc:	98 8c       	ldd	r9, Y+24	; 0x18
    5efe:	ee 24       	eor	r14, r14
    5f00:	ff 24       	eor	r15, r15
    5f02:	87 01       	movw	r16, r14
    5f04:	aa 24       	eor	r10, r10
    5f06:	bb 24       	eor	r11, r11
    5f08:	65 01       	movw	r12, r10
    5f0a:	40 e0       	ldi	r20, 0x00	; 0
    5f0c:	50 e0       	ldi	r21, 0x00	; 0
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	e0 e0       	ldi	r30, 0x00	; 0
    5f14:	f0 e0       	ldi	r31, 0x00	; 0
    5f16:	c1 01       	movw	r24, r2
    5f18:	81 70       	andi	r24, 0x01	; 1
    5f1a:	90 70       	andi	r25, 0x00	; 0
    5f1c:	89 2b       	or	r24, r25
    5f1e:	e9 f0       	breq	.+58     	; 0x5f5a <__mulsf3+0xf4>
    5f20:	e6 0c       	add	r14, r6
    5f22:	f7 1c       	adc	r15, r7
    5f24:	08 1d       	adc	r16, r8
    5f26:	19 1d       	adc	r17, r9
    5f28:	9a 01       	movw	r18, r20
    5f2a:	ab 01       	movw	r20, r22
    5f2c:	2a 0d       	add	r18, r10
    5f2e:	3b 1d       	adc	r19, r11
    5f30:	4c 1d       	adc	r20, r12
    5f32:	5d 1d       	adc	r21, r13
    5f34:	80 e0       	ldi	r24, 0x00	; 0
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	a0 e0       	ldi	r26, 0x00	; 0
    5f3a:	b0 e0       	ldi	r27, 0x00	; 0
    5f3c:	e6 14       	cp	r14, r6
    5f3e:	f7 04       	cpc	r15, r7
    5f40:	08 05       	cpc	r16, r8
    5f42:	19 05       	cpc	r17, r9
    5f44:	20 f4       	brcc	.+8      	; 0x5f4e <__mulsf3+0xe8>
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	a0 e0       	ldi	r26, 0x00	; 0
    5f4c:	b0 e0       	ldi	r27, 0x00	; 0
    5f4e:	ba 01       	movw	r22, r20
    5f50:	a9 01       	movw	r20, r18
    5f52:	48 0f       	add	r20, r24
    5f54:	59 1f       	adc	r21, r25
    5f56:	6a 1f       	adc	r22, r26
    5f58:	7b 1f       	adc	r23, r27
    5f5a:	aa 0c       	add	r10, r10
    5f5c:	bb 1c       	adc	r11, r11
    5f5e:	cc 1c       	adc	r12, r12
    5f60:	dd 1c       	adc	r13, r13
    5f62:	97 fe       	sbrs	r9, 7
    5f64:	08 c0       	rjmp	.+16     	; 0x5f76 <__mulsf3+0x110>
    5f66:	81 e0       	ldi	r24, 0x01	; 1
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	a0 e0       	ldi	r26, 0x00	; 0
    5f6c:	b0 e0       	ldi	r27, 0x00	; 0
    5f6e:	a8 2a       	or	r10, r24
    5f70:	b9 2a       	or	r11, r25
    5f72:	ca 2a       	or	r12, r26
    5f74:	db 2a       	or	r13, r27
    5f76:	31 96       	adiw	r30, 0x01	; 1
    5f78:	e0 32       	cpi	r30, 0x20	; 32
    5f7a:	f1 05       	cpc	r31, r1
    5f7c:	49 f0       	breq	.+18     	; 0x5f90 <__mulsf3+0x12a>
    5f7e:	66 0c       	add	r6, r6
    5f80:	77 1c       	adc	r7, r7
    5f82:	88 1c       	adc	r8, r8
    5f84:	99 1c       	adc	r9, r9
    5f86:	56 94       	lsr	r5
    5f88:	47 94       	ror	r4
    5f8a:	37 94       	ror	r3
    5f8c:	27 94       	ror	r2
    5f8e:	c3 cf       	rjmp	.-122    	; 0x5f16 <__mulsf3+0xb0>
    5f90:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f92:	ea 89       	ldd	r30, Y+18	; 0x12
    5f94:	2b 89       	ldd	r18, Y+19	; 0x13
    5f96:	3c 89       	ldd	r19, Y+20	; 0x14
    5f98:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f9c:	28 0f       	add	r18, r24
    5f9e:	39 1f       	adc	r19, r25
    5fa0:	2e 5f       	subi	r18, 0xFE	; 254
    5fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa4:	17 c0       	rjmp	.+46     	; 0x5fd4 <__mulsf3+0x16e>
    5fa6:	ca 01       	movw	r24, r20
    5fa8:	81 70       	andi	r24, 0x01	; 1
    5faa:	90 70       	andi	r25, 0x00	; 0
    5fac:	89 2b       	or	r24, r25
    5fae:	61 f0       	breq	.+24     	; 0x5fc8 <__mulsf3+0x162>
    5fb0:	16 95       	lsr	r17
    5fb2:	07 95       	ror	r16
    5fb4:	f7 94       	ror	r15
    5fb6:	e7 94       	ror	r14
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	a0 e0       	ldi	r26, 0x00	; 0
    5fbe:	b0 e8       	ldi	r27, 0x80	; 128
    5fc0:	e8 2a       	or	r14, r24
    5fc2:	f9 2a       	or	r15, r25
    5fc4:	0a 2b       	or	r16, r26
    5fc6:	1b 2b       	or	r17, r27
    5fc8:	76 95       	lsr	r23
    5fca:	67 95       	ror	r22
    5fcc:	57 95       	ror	r21
    5fce:	47 95       	ror	r20
    5fd0:	2f 5f       	subi	r18, 0xFF	; 255
    5fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd4:	77 fd       	sbrc	r23, 7
    5fd6:	e7 cf       	rjmp	.-50     	; 0x5fa6 <__mulsf3+0x140>
    5fd8:	0c c0       	rjmp	.+24     	; 0x5ff2 <__mulsf3+0x18c>
    5fda:	44 0f       	add	r20, r20
    5fdc:	55 1f       	adc	r21, r21
    5fde:	66 1f       	adc	r22, r22
    5fe0:	77 1f       	adc	r23, r23
    5fe2:	17 fd       	sbrc	r17, 7
    5fe4:	41 60       	ori	r20, 0x01	; 1
    5fe6:	ee 0c       	add	r14, r14
    5fe8:	ff 1c       	adc	r15, r15
    5fea:	00 1f       	adc	r16, r16
    5fec:	11 1f       	adc	r17, r17
    5fee:	21 50       	subi	r18, 0x01	; 1
    5ff0:	30 40       	sbci	r19, 0x00	; 0
    5ff2:	40 30       	cpi	r20, 0x00	; 0
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	59 07       	cpc	r21, r25
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	69 07       	cpc	r22, r25
    5ffc:	90 e4       	ldi	r25, 0x40	; 64
    5ffe:	79 07       	cpc	r23, r25
    6000:	60 f3       	brcs	.-40     	; 0x5fda <__mulsf3+0x174>
    6002:	2b 8f       	std	Y+27, r18	; 0x1b
    6004:	3c 8f       	std	Y+28, r19	; 0x1c
    6006:	db 01       	movw	r26, r22
    6008:	ca 01       	movw	r24, r20
    600a:	8f 77       	andi	r24, 0x7F	; 127
    600c:	90 70       	andi	r25, 0x00	; 0
    600e:	a0 70       	andi	r26, 0x00	; 0
    6010:	b0 70       	andi	r27, 0x00	; 0
    6012:	80 34       	cpi	r24, 0x40	; 64
    6014:	91 05       	cpc	r25, r1
    6016:	a1 05       	cpc	r26, r1
    6018:	b1 05       	cpc	r27, r1
    601a:	61 f4       	brne	.+24     	; 0x6034 <__mulsf3+0x1ce>
    601c:	47 fd       	sbrc	r20, 7
    601e:	0a c0       	rjmp	.+20     	; 0x6034 <__mulsf3+0x1ce>
    6020:	e1 14       	cp	r14, r1
    6022:	f1 04       	cpc	r15, r1
    6024:	01 05       	cpc	r16, r1
    6026:	11 05       	cpc	r17, r1
    6028:	29 f0       	breq	.+10     	; 0x6034 <__mulsf3+0x1ce>
    602a:	40 5c       	subi	r20, 0xC0	; 192
    602c:	5f 4f       	sbci	r21, 0xFF	; 255
    602e:	6f 4f       	sbci	r22, 0xFF	; 255
    6030:	7f 4f       	sbci	r23, 0xFF	; 255
    6032:	40 78       	andi	r20, 0x80	; 128
    6034:	1a 8e       	std	Y+26, r1	; 0x1a
    6036:	fe 17       	cp	r31, r30
    6038:	11 f0       	breq	.+4      	; 0x603e <__mulsf3+0x1d8>
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	8a 8f       	std	Y+26, r24	; 0x1a
    603e:	4d 8f       	std	Y+29, r20	; 0x1d
    6040:	5e 8f       	std	Y+30, r21	; 0x1e
    6042:	6f 8f       	std	Y+31, r22	; 0x1f
    6044:	78 a3       	std	Y+32, r23	; 0x20
    6046:	83 e0       	ldi	r24, 0x03	; 3
    6048:	89 8f       	std	Y+25, r24	; 0x19
    604a:	ce 01       	movw	r24, r28
    604c:	49 96       	adiw	r24, 0x19	; 25
    604e:	0e 94 3a 32 	call	0x6474	; 0x6474 <__pack_f>
    6052:	a0 96       	adiw	r28, 0x20	; 32
    6054:	e2 e1       	ldi	r30, 0x12	; 18
    6056:	0c 94 2f 34 	jmp	0x685e	; 0x685e <__epilogue_restores__>

0000605a <__divsf3>:
    605a:	a8 e1       	ldi	r26, 0x18	; 24
    605c:	b0 e0       	ldi	r27, 0x00	; 0
    605e:	e3 e3       	ldi	r30, 0x33	; 51
    6060:	f0 e3       	ldi	r31, 0x30	; 48
    6062:	0c 94 1b 34 	jmp	0x6836	; 0x6836 <__prologue_saves__+0x10>
    6066:	69 83       	std	Y+1, r22	; 0x01
    6068:	7a 83       	std	Y+2, r23	; 0x02
    606a:	8b 83       	std	Y+3, r24	; 0x03
    606c:	9c 83       	std	Y+4, r25	; 0x04
    606e:	2d 83       	std	Y+5, r18	; 0x05
    6070:	3e 83       	std	Y+6, r19	; 0x06
    6072:	4f 83       	std	Y+7, r20	; 0x07
    6074:	58 87       	std	Y+8, r21	; 0x08
    6076:	b9 e0       	ldi	r27, 0x09	; 9
    6078:	eb 2e       	mov	r14, r27
    607a:	f1 2c       	mov	r15, r1
    607c:	ec 0e       	add	r14, r28
    607e:	fd 1e       	adc	r15, r29
    6080:	ce 01       	movw	r24, r28
    6082:	01 96       	adiw	r24, 0x01	; 1
    6084:	b7 01       	movw	r22, r14
    6086:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    608a:	8e 01       	movw	r16, r28
    608c:	0f 5e       	subi	r16, 0xEF	; 239
    608e:	1f 4f       	sbci	r17, 0xFF	; 255
    6090:	ce 01       	movw	r24, r28
    6092:	05 96       	adiw	r24, 0x05	; 5
    6094:	b8 01       	movw	r22, r16
    6096:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    609a:	29 85       	ldd	r18, Y+9	; 0x09
    609c:	22 30       	cpi	r18, 0x02	; 2
    609e:	08 f4       	brcc	.+2      	; 0x60a2 <__divsf3+0x48>
    60a0:	7e c0       	rjmp	.+252    	; 0x619e <__divsf3+0x144>
    60a2:	39 89       	ldd	r19, Y+17	; 0x11
    60a4:	32 30       	cpi	r19, 0x02	; 2
    60a6:	10 f4       	brcc	.+4      	; 0x60ac <__divsf3+0x52>
    60a8:	b8 01       	movw	r22, r16
    60aa:	7c c0       	rjmp	.+248    	; 0x61a4 <__divsf3+0x14a>
    60ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    60ae:	9a 89       	ldd	r25, Y+18	; 0x12
    60b0:	89 27       	eor	r24, r25
    60b2:	8a 87       	std	Y+10, r24	; 0x0a
    60b4:	24 30       	cpi	r18, 0x04	; 4
    60b6:	11 f0       	breq	.+4      	; 0x60bc <__divsf3+0x62>
    60b8:	22 30       	cpi	r18, 0x02	; 2
    60ba:	31 f4       	brne	.+12     	; 0x60c8 <__divsf3+0x6e>
    60bc:	23 17       	cp	r18, r19
    60be:	09 f0       	breq	.+2      	; 0x60c2 <__divsf3+0x68>
    60c0:	6e c0       	rjmp	.+220    	; 0x619e <__divsf3+0x144>
    60c2:	65 e5       	ldi	r22, 0x55	; 85
    60c4:	79 e0       	ldi	r23, 0x09	; 9
    60c6:	6e c0       	rjmp	.+220    	; 0x61a4 <__divsf3+0x14a>
    60c8:	34 30       	cpi	r19, 0x04	; 4
    60ca:	39 f4       	brne	.+14     	; 0x60da <__divsf3+0x80>
    60cc:	1d 86       	std	Y+13, r1	; 0x0d
    60ce:	1e 86       	std	Y+14, r1	; 0x0e
    60d0:	1f 86       	std	Y+15, r1	; 0x0f
    60d2:	18 8a       	std	Y+16, r1	; 0x10
    60d4:	1c 86       	std	Y+12, r1	; 0x0c
    60d6:	1b 86       	std	Y+11, r1	; 0x0b
    60d8:	04 c0       	rjmp	.+8      	; 0x60e2 <__divsf3+0x88>
    60da:	32 30       	cpi	r19, 0x02	; 2
    60dc:	21 f4       	brne	.+8      	; 0x60e6 <__divsf3+0x8c>
    60de:	84 e0       	ldi	r24, 0x04	; 4
    60e0:	89 87       	std	Y+9, r24	; 0x09
    60e2:	b7 01       	movw	r22, r14
    60e4:	5f c0       	rjmp	.+190    	; 0x61a4 <__divsf3+0x14a>
    60e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    60e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    60ea:	8b 89       	ldd	r24, Y+19	; 0x13
    60ec:	9c 89       	ldd	r25, Y+20	; 0x14
    60ee:	28 1b       	sub	r18, r24
    60f0:	39 0b       	sbc	r19, r25
    60f2:	3c 87       	std	Y+12, r19	; 0x0c
    60f4:	2b 87       	std	Y+11, r18	; 0x0b
    60f6:	ed 84       	ldd	r14, Y+13	; 0x0d
    60f8:	fe 84       	ldd	r15, Y+14	; 0x0e
    60fa:	0f 85       	ldd	r16, Y+15	; 0x0f
    60fc:	18 89       	ldd	r17, Y+16	; 0x10
    60fe:	ad 88       	ldd	r10, Y+21	; 0x15
    6100:	be 88       	ldd	r11, Y+22	; 0x16
    6102:	cf 88       	ldd	r12, Y+23	; 0x17
    6104:	d8 8c       	ldd	r13, Y+24	; 0x18
    6106:	ea 14       	cp	r14, r10
    6108:	fb 04       	cpc	r15, r11
    610a:	0c 05       	cpc	r16, r12
    610c:	1d 05       	cpc	r17, r13
    610e:	40 f4       	brcc	.+16     	; 0x6120 <__divsf3+0xc6>
    6110:	ee 0c       	add	r14, r14
    6112:	ff 1c       	adc	r15, r15
    6114:	00 1f       	adc	r16, r16
    6116:	11 1f       	adc	r17, r17
    6118:	21 50       	subi	r18, 0x01	; 1
    611a:	30 40       	sbci	r19, 0x00	; 0
    611c:	3c 87       	std	Y+12, r19	; 0x0c
    611e:	2b 87       	std	Y+11, r18	; 0x0b
    6120:	20 e0       	ldi	r18, 0x00	; 0
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	40 e0       	ldi	r20, 0x00	; 0
    6126:	50 e0       	ldi	r21, 0x00	; 0
    6128:	80 e0       	ldi	r24, 0x00	; 0
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	a0 e0       	ldi	r26, 0x00	; 0
    612e:	b0 e4       	ldi	r27, 0x40	; 64
    6130:	60 e0       	ldi	r22, 0x00	; 0
    6132:	70 e0       	ldi	r23, 0x00	; 0
    6134:	ea 14       	cp	r14, r10
    6136:	fb 04       	cpc	r15, r11
    6138:	0c 05       	cpc	r16, r12
    613a:	1d 05       	cpc	r17, r13
    613c:	40 f0       	brcs	.+16     	; 0x614e <__divsf3+0xf4>
    613e:	28 2b       	or	r18, r24
    6140:	39 2b       	or	r19, r25
    6142:	4a 2b       	or	r20, r26
    6144:	5b 2b       	or	r21, r27
    6146:	ea 18       	sub	r14, r10
    6148:	fb 08       	sbc	r15, r11
    614a:	0c 09       	sbc	r16, r12
    614c:	1d 09       	sbc	r17, r13
    614e:	b6 95       	lsr	r27
    6150:	a7 95       	ror	r26
    6152:	97 95       	ror	r25
    6154:	87 95       	ror	r24
    6156:	ee 0c       	add	r14, r14
    6158:	ff 1c       	adc	r15, r15
    615a:	00 1f       	adc	r16, r16
    615c:	11 1f       	adc	r17, r17
    615e:	6f 5f       	subi	r22, 0xFF	; 255
    6160:	7f 4f       	sbci	r23, 0xFF	; 255
    6162:	6f 31       	cpi	r22, 0x1F	; 31
    6164:	71 05       	cpc	r23, r1
    6166:	31 f7       	brne	.-52     	; 0x6134 <__divsf3+0xda>
    6168:	da 01       	movw	r26, r20
    616a:	c9 01       	movw	r24, r18
    616c:	8f 77       	andi	r24, 0x7F	; 127
    616e:	90 70       	andi	r25, 0x00	; 0
    6170:	a0 70       	andi	r26, 0x00	; 0
    6172:	b0 70       	andi	r27, 0x00	; 0
    6174:	80 34       	cpi	r24, 0x40	; 64
    6176:	91 05       	cpc	r25, r1
    6178:	a1 05       	cpc	r26, r1
    617a:	b1 05       	cpc	r27, r1
    617c:	61 f4       	brne	.+24     	; 0x6196 <__divsf3+0x13c>
    617e:	27 fd       	sbrc	r18, 7
    6180:	0a c0       	rjmp	.+20     	; 0x6196 <__divsf3+0x13c>
    6182:	e1 14       	cp	r14, r1
    6184:	f1 04       	cpc	r15, r1
    6186:	01 05       	cpc	r16, r1
    6188:	11 05       	cpc	r17, r1
    618a:	29 f0       	breq	.+10     	; 0x6196 <__divsf3+0x13c>
    618c:	20 5c       	subi	r18, 0xC0	; 192
    618e:	3f 4f       	sbci	r19, 0xFF	; 255
    6190:	4f 4f       	sbci	r20, 0xFF	; 255
    6192:	5f 4f       	sbci	r21, 0xFF	; 255
    6194:	20 78       	andi	r18, 0x80	; 128
    6196:	2d 87       	std	Y+13, r18	; 0x0d
    6198:	3e 87       	std	Y+14, r19	; 0x0e
    619a:	4f 87       	std	Y+15, r20	; 0x0f
    619c:	58 8b       	std	Y+16, r21	; 0x10
    619e:	be 01       	movw	r22, r28
    61a0:	67 5f       	subi	r22, 0xF7	; 247
    61a2:	7f 4f       	sbci	r23, 0xFF	; 255
    61a4:	cb 01       	movw	r24, r22
    61a6:	0e 94 3a 32 	call	0x6474	; 0x6474 <__pack_f>
    61aa:	68 96       	adiw	r28, 0x18	; 24
    61ac:	ea e0       	ldi	r30, 0x0A	; 10
    61ae:	0c 94 37 34 	jmp	0x686e	; 0x686e <__epilogue_restores__+0x10>

000061b2 <__gtsf2>:
    61b2:	a8 e1       	ldi	r26, 0x18	; 24
    61b4:	b0 e0       	ldi	r27, 0x00	; 0
    61b6:	ef ed       	ldi	r30, 0xDF	; 223
    61b8:	f0 e3       	ldi	r31, 0x30	; 48
    61ba:	0c 94 1f 34 	jmp	0x683e	; 0x683e <__prologue_saves__+0x18>
    61be:	69 83       	std	Y+1, r22	; 0x01
    61c0:	7a 83       	std	Y+2, r23	; 0x02
    61c2:	8b 83       	std	Y+3, r24	; 0x03
    61c4:	9c 83       	std	Y+4, r25	; 0x04
    61c6:	2d 83       	std	Y+5, r18	; 0x05
    61c8:	3e 83       	std	Y+6, r19	; 0x06
    61ca:	4f 83       	std	Y+7, r20	; 0x07
    61cc:	58 87       	std	Y+8, r21	; 0x08
    61ce:	89 e0       	ldi	r24, 0x09	; 9
    61d0:	e8 2e       	mov	r14, r24
    61d2:	f1 2c       	mov	r15, r1
    61d4:	ec 0e       	add	r14, r28
    61d6:	fd 1e       	adc	r15, r29
    61d8:	ce 01       	movw	r24, r28
    61da:	01 96       	adiw	r24, 0x01	; 1
    61dc:	b7 01       	movw	r22, r14
    61de:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    61e2:	8e 01       	movw	r16, r28
    61e4:	0f 5e       	subi	r16, 0xEF	; 239
    61e6:	1f 4f       	sbci	r17, 0xFF	; 255
    61e8:	ce 01       	movw	r24, r28
    61ea:	05 96       	adiw	r24, 0x05	; 5
    61ec:	b8 01       	movw	r22, r16
    61ee:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    61f2:	89 85       	ldd	r24, Y+9	; 0x09
    61f4:	82 30       	cpi	r24, 0x02	; 2
    61f6:	40 f0       	brcs	.+16     	; 0x6208 <__gtsf2+0x56>
    61f8:	89 89       	ldd	r24, Y+17	; 0x11
    61fa:	82 30       	cpi	r24, 0x02	; 2
    61fc:	28 f0       	brcs	.+10     	; 0x6208 <__gtsf2+0x56>
    61fe:	c7 01       	movw	r24, r14
    6200:	b8 01       	movw	r22, r16
    6202:	0e 94 87 33 	call	0x670e	; 0x670e <__fpcmp_parts_f>
    6206:	01 c0       	rjmp	.+2      	; 0x620a <__gtsf2+0x58>
    6208:	8f ef       	ldi	r24, 0xFF	; 255
    620a:	68 96       	adiw	r28, 0x18	; 24
    620c:	e6 e0       	ldi	r30, 0x06	; 6
    620e:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <__epilogue_restores__+0x18>

00006212 <__ltsf2>:
    6212:	a8 e1       	ldi	r26, 0x18	; 24
    6214:	b0 e0       	ldi	r27, 0x00	; 0
    6216:	ef e0       	ldi	r30, 0x0F	; 15
    6218:	f1 e3       	ldi	r31, 0x31	; 49
    621a:	0c 94 1f 34 	jmp	0x683e	; 0x683e <__prologue_saves__+0x18>
    621e:	69 83       	std	Y+1, r22	; 0x01
    6220:	7a 83       	std	Y+2, r23	; 0x02
    6222:	8b 83       	std	Y+3, r24	; 0x03
    6224:	9c 83       	std	Y+4, r25	; 0x04
    6226:	2d 83       	std	Y+5, r18	; 0x05
    6228:	3e 83       	std	Y+6, r19	; 0x06
    622a:	4f 83       	std	Y+7, r20	; 0x07
    622c:	58 87       	std	Y+8, r21	; 0x08
    622e:	89 e0       	ldi	r24, 0x09	; 9
    6230:	e8 2e       	mov	r14, r24
    6232:	f1 2c       	mov	r15, r1
    6234:	ec 0e       	add	r14, r28
    6236:	fd 1e       	adc	r15, r29
    6238:	ce 01       	movw	r24, r28
    623a:	01 96       	adiw	r24, 0x01	; 1
    623c:	b7 01       	movw	r22, r14
    623e:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    6242:	8e 01       	movw	r16, r28
    6244:	0f 5e       	subi	r16, 0xEF	; 239
    6246:	1f 4f       	sbci	r17, 0xFF	; 255
    6248:	ce 01       	movw	r24, r28
    624a:	05 96       	adiw	r24, 0x05	; 5
    624c:	b8 01       	movw	r22, r16
    624e:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    6252:	89 85       	ldd	r24, Y+9	; 0x09
    6254:	82 30       	cpi	r24, 0x02	; 2
    6256:	40 f0       	brcs	.+16     	; 0x6268 <__ltsf2+0x56>
    6258:	89 89       	ldd	r24, Y+17	; 0x11
    625a:	82 30       	cpi	r24, 0x02	; 2
    625c:	28 f0       	brcs	.+10     	; 0x6268 <__ltsf2+0x56>
    625e:	c7 01       	movw	r24, r14
    6260:	b8 01       	movw	r22, r16
    6262:	0e 94 87 33 	call	0x670e	; 0x670e <__fpcmp_parts_f>
    6266:	01 c0       	rjmp	.+2      	; 0x626a <__ltsf2+0x58>
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	68 96       	adiw	r28, 0x18	; 24
    626c:	e6 e0       	ldi	r30, 0x06	; 6
    626e:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <__epilogue_restores__+0x18>

00006272 <__floatsisf>:
    6272:	a8 e0       	ldi	r26, 0x08	; 8
    6274:	b0 e0       	ldi	r27, 0x00	; 0
    6276:	ef e3       	ldi	r30, 0x3F	; 63
    6278:	f1 e3       	ldi	r31, 0x31	; 49
    627a:	0c 94 1c 34 	jmp	0x6838	; 0x6838 <__prologue_saves__+0x12>
    627e:	9b 01       	movw	r18, r22
    6280:	ac 01       	movw	r20, r24
    6282:	83 e0       	ldi	r24, 0x03	; 3
    6284:	89 83       	std	Y+1, r24	; 0x01
    6286:	da 01       	movw	r26, r20
    6288:	c9 01       	movw	r24, r18
    628a:	88 27       	eor	r24, r24
    628c:	b7 fd       	sbrc	r27, 7
    628e:	83 95       	inc	r24
    6290:	99 27       	eor	r25, r25
    6292:	aa 27       	eor	r26, r26
    6294:	bb 27       	eor	r27, r27
    6296:	b8 2e       	mov	r11, r24
    6298:	21 15       	cp	r18, r1
    629a:	31 05       	cpc	r19, r1
    629c:	41 05       	cpc	r20, r1
    629e:	51 05       	cpc	r21, r1
    62a0:	19 f4       	brne	.+6      	; 0x62a8 <__floatsisf+0x36>
    62a2:	82 e0       	ldi	r24, 0x02	; 2
    62a4:	89 83       	std	Y+1, r24	; 0x01
    62a6:	3a c0       	rjmp	.+116    	; 0x631c <__floatsisf+0xaa>
    62a8:	88 23       	and	r24, r24
    62aa:	a9 f0       	breq	.+42     	; 0x62d6 <__floatsisf+0x64>
    62ac:	20 30       	cpi	r18, 0x00	; 0
    62ae:	80 e0       	ldi	r24, 0x00	; 0
    62b0:	38 07       	cpc	r19, r24
    62b2:	80 e0       	ldi	r24, 0x00	; 0
    62b4:	48 07       	cpc	r20, r24
    62b6:	80 e8       	ldi	r24, 0x80	; 128
    62b8:	58 07       	cpc	r21, r24
    62ba:	29 f4       	brne	.+10     	; 0x62c6 <__floatsisf+0x54>
    62bc:	60 e0       	ldi	r22, 0x00	; 0
    62be:	70 e0       	ldi	r23, 0x00	; 0
    62c0:	80 e0       	ldi	r24, 0x00	; 0
    62c2:	9f ec       	ldi	r25, 0xCF	; 207
    62c4:	30 c0       	rjmp	.+96     	; 0x6326 <__floatsisf+0xb4>
    62c6:	ee 24       	eor	r14, r14
    62c8:	ff 24       	eor	r15, r15
    62ca:	87 01       	movw	r16, r14
    62cc:	e2 1a       	sub	r14, r18
    62ce:	f3 0a       	sbc	r15, r19
    62d0:	04 0b       	sbc	r16, r20
    62d2:	15 0b       	sbc	r17, r21
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <__floatsisf+0x68>
    62d6:	79 01       	movw	r14, r18
    62d8:	8a 01       	movw	r16, r20
    62da:	8e e1       	ldi	r24, 0x1E	; 30
    62dc:	c8 2e       	mov	r12, r24
    62de:	d1 2c       	mov	r13, r1
    62e0:	dc 82       	std	Y+4, r13	; 0x04
    62e2:	cb 82       	std	Y+3, r12	; 0x03
    62e4:	ed 82       	std	Y+5, r14	; 0x05
    62e6:	fe 82       	std	Y+6, r15	; 0x06
    62e8:	0f 83       	std	Y+7, r16	; 0x07
    62ea:	18 87       	std	Y+8, r17	; 0x08
    62ec:	c8 01       	movw	r24, r16
    62ee:	b7 01       	movw	r22, r14
    62f0:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__clzsi2>
    62f4:	01 97       	sbiw	r24, 0x01	; 1
    62f6:	18 16       	cp	r1, r24
    62f8:	19 06       	cpc	r1, r25
    62fa:	84 f4       	brge	.+32     	; 0x631c <__floatsisf+0xaa>
    62fc:	08 2e       	mov	r0, r24
    62fe:	04 c0       	rjmp	.+8      	; 0x6308 <__floatsisf+0x96>
    6300:	ee 0c       	add	r14, r14
    6302:	ff 1c       	adc	r15, r15
    6304:	00 1f       	adc	r16, r16
    6306:	11 1f       	adc	r17, r17
    6308:	0a 94       	dec	r0
    630a:	d2 f7       	brpl	.-12     	; 0x6300 <__floatsisf+0x8e>
    630c:	ed 82       	std	Y+5, r14	; 0x05
    630e:	fe 82       	std	Y+6, r15	; 0x06
    6310:	0f 83       	std	Y+7, r16	; 0x07
    6312:	18 87       	std	Y+8, r17	; 0x08
    6314:	c8 1a       	sub	r12, r24
    6316:	d9 0a       	sbc	r13, r25
    6318:	dc 82       	std	Y+4, r13	; 0x04
    631a:	cb 82       	std	Y+3, r12	; 0x03
    631c:	ba 82       	std	Y+2, r11	; 0x02
    631e:	ce 01       	movw	r24, r28
    6320:	01 96       	adiw	r24, 0x01	; 1
    6322:	0e 94 3a 32 	call	0x6474	; 0x6474 <__pack_f>
    6326:	28 96       	adiw	r28, 0x08	; 8
    6328:	e9 e0       	ldi	r30, 0x09	; 9
    632a:	0c 94 38 34 	jmp	0x6870	; 0x6870 <__epilogue_restores__+0x12>

0000632e <__fixsfsi>:
    632e:	ac e0       	ldi	r26, 0x0C	; 12
    6330:	b0 e0       	ldi	r27, 0x00	; 0
    6332:	ed e9       	ldi	r30, 0x9D	; 157
    6334:	f1 e3       	ldi	r31, 0x31	; 49
    6336:	0c 94 23 34 	jmp	0x6846	; 0x6846 <__prologue_saves__+0x20>
    633a:	69 83       	std	Y+1, r22	; 0x01
    633c:	7a 83       	std	Y+2, r23	; 0x02
    633e:	8b 83       	std	Y+3, r24	; 0x03
    6340:	9c 83       	std	Y+4, r25	; 0x04
    6342:	ce 01       	movw	r24, r28
    6344:	01 96       	adiw	r24, 0x01	; 1
    6346:	be 01       	movw	r22, r28
    6348:	6b 5f       	subi	r22, 0xFB	; 251
    634a:	7f 4f       	sbci	r23, 0xFF	; 255
    634c:	0e 94 0f 33 	call	0x661e	; 0x661e <__unpack_f>
    6350:	8d 81       	ldd	r24, Y+5	; 0x05
    6352:	82 30       	cpi	r24, 0x02	; 2
    6354:	61 f1       	breq	.+88     	; 0x63ae <__fixsfsi+0x80>
    6356:	82 30       	cpi	r24, 0x02	; 2
    6358:	50 f1       	brcs	.+84     	; 0x63ae <__fixsfsi+0x80>
    635a:	84 30       	cpi	r24, 0x04	; 4
    635c:	21 f4       	brne	.+8      	; 0x6366 <__fixsfsi+0x38>
    635e:	8e 81       	ldd	r24, Y+6	; 0x06
    6360:	88 23       	and	r24, r24
    6362:	51 f1       	breq	.+84     	; 0x63b8 <__fixsfsi+0x8a>
    6364:	2e c0       	rjmp	.+92     	; 0x63c2 <__fixsfsi+0x94>
    6366:	2f 81       	ldd	r18, Y+7	; 0x07
    6368:	38 85       	ldd	r19, Y+8	; 0x08
    636a:	37 fd       	sbrc	r19, 7
    636c:	20 c0       	rjmp	.+64     	; 0x63ae <__fixsfsi+0x80>
    636e:	6e 81       	ldd	r22, Y+6	; 0x06
    6370:	2f 31       	cpi	r18, 0x1F	; 31
    6372:	31 05       	cpc	r19, r1
    6374:	1c f0       	brlt	.+6      	; 0x637c <__fixsfsi+0x4e>
    6376:	66 23       	and	r22, r22
    6378:	f9 f0       	breq	.+62     	; 0x63b8 <__fixsfsi+0x8a>
    637a:	23 c0       	rjmp	.+70     	; 0x63c2 <__fixsfsi+0x94>
    637c:	8e e1       	ldi	r24, 0x1E	; 30
    637e:	90 e0       	ldi	r25, 0x00	; 0
    6380:	82 1b       	sub	r24, r18
    6382:	93 0b       	sbc	r25, r19
    6384:	29 85       	ldd	r18, Y+9	; 0x09
    6386:	3a 85       	ldd	r19, Y+10	; 0x0a
    6388:	4b 85       	ldd	r20, Y+11	; 0x0b
    638a:	5c 85       	ldd	r21, Y+12	; 0x0c
    638c:	04 c0       	rjmp	.+8      	; 0x6396 <__fixsfsi+0x68>
    638e:	56 95       	lsr	r21
    6390:	47 95       	ror	r20
    6392:	37 95       	ror	r19
    6394:	27 95       	ror	r18
    6396:	8a 95       	dec	r24
    6398:	d2 f7       	brpl	.-12     	; 0x638e <__fixsfsi+0x60>
    639a:	66 23       	and	r22, r22
    639c:	b1 f0       	breq	.+44     	; 0x63ca <__fixsfsi+0x9c>
    639e:	50 95       	com	r21
    63a0:	40 95       	com	r20
    63a2:	30 95       	com	r19
    63a4:	21 95       	neg	r18
    63a6:	3f 4f       	sbci	r19, 0xFF	; 255
    63a8:	4f 4f       	sbci	r20, 0xFF	; 255
    63aa:	5f 4f       	sbci	r21, 0xFF	; 255
    63ac:	0e c0       	rjmp	.+28     	; 0x63ca <__fixsfsi+0x9c>
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	30 e0       	ldi	r19, 0x00	; 0
    63b2:	40 e0       	ldi	r20, 0x00	; 0
    63b4:	50 e0       	ldi	r21, 0x00	; 0
    63b6:	09 c0       	rjmp	.+18     	; 0x63ca <__fixsfsi+0x9c>
    63b8:	2f ef       	ldi	r18, 0xFF	; 255
    63ba:	3f ef       	ldi	r19, 0xFF	; 255
    63bc:	4f ef       	ldi	r20, 0xFF	; 255
    63be:	5f e7       	ldi	r21, 0x7F	; 127
    63c0:	04 c0       	rjmp	.+8      	; 0x63ca <__fixsfsi+0x9c>
    63c2:	20 e0       	ldi	r18, 0x00	; 0
    63c4:	30 e0       	ldi	r19, 0x00	; 0
    63c6:	40 e0       	ldi	r20, 0x00	; 0
    63c8:	50 e8       	ldi	r21, 0x80	; 128
    63ca:	b9 01       	movw	r22, r18
    63cc:	ca 01       	movw	r24, r20
    63ce:	2c 96       	adiw	r28, 0x0c	; 12
    63d0:	e2 e0       	ldi	r30, 0x02	; 2
    63d2:	0c 94 3f 34 	jmp	0x687e	; 0x687e <__epilogue_restores__+0x20>

000063d6 <__clzsi2>:
    63d6:	ef 92       	push	r14
    63d8:	ff 92       	push	r15
    63da:	0f 93       	push	r16
    63dc:	1f 93       	push	r17
    63de:	7b 01       	movw	r14, r22
    63e0:	8c 01       	movw	r16, r24
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	e8 16       	cp	r14, r24
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	f8 06       	cpc	r15, r24
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	08 07       	cpc	r16, r24
    63ee:	80 e0       	ldi	r24, 0x00	; 0
    63f0:	18 07       	cpc	r17, r24
    63f2:	88 f4       	brcc	.+34     	; 0x6416 <__clzsi2+0x40>
    63f4:	8f ef       	ldi	r24, 0xFF	; 255
    63f6:	e8 16       	cp	r14, r24
    63f8:	f1 04       	cpc	r15, r1
    63fa:	01 05       	cpc	r16, r1
    63fc:	11 05       	cpc	r17, r1
    63fe:	31 f0       	breq	.+12     	; 0x640c <__clzsi2+0x36>
    6400:	28 f0       	brcs	.+10     	; 0x640c <__clzsi2+0x36>
    6402:	88 e0       	ldi	r24, 0x08	; 8
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	a0 e0       	ldi	r26, 0x00	; 0
    6408:	b0 e0       	ldi	r27, 0x00	; 0
    640a:	17 c0       	rjmp	.+46     	; 0x643a <__clzsi2+0x64>
    640c:	80 e0       	ldi	r24, 0x00	; 0
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	a0 e0       	ldi	r26, 0x00	; 0
    6412:	b0 e0       	ldi	r27, 0x00	; 0
    6414:	12 c0       	rjmp	.+36     	; 0x643a <__clzsi2+0x64>
    6416:	80 e0       	ldi	r24, 0x00	; 0
    6418:	e8 16       	cp	r14, r24
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	f8 06       	cpc	r15, r24
    641e:	80 e0       	ldi	r24, 0x00	; 0
    6420:	08 07       	cpc	r16, r24
    6422:	81 e0       	ldi	r24, 0x01	; 1
    6424:	18 07       	cpc	r17, r24
    6426:	28 f0       	brcs	.+10     	; 0x6432 <__clzsi2+0x5c>
    6428:	88 e1       	ldi	r24, 0x18	; 24
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	a0 e0       	ldi	r26, 0x00	; 0
    642e:	b0 e0       	ldi	r27, 0x00	; 0
    6430:	04 c0       	rjmp	.+8      	; 0x643a <__clzsi2+0x64>
    6432:	80 e1       	ldi	r24, 0x10	; 16
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	a0 e0       	ldi	r26, 0x00	; 0
    6438:	b0 e0       	ldi	r27, 0x00	; 0
    643a:	20 e2       	ldi	r18, 0x20	; 32
    643c:	30 e0       	ldi	r19, 0x00	; 0
    643e:	40 e0       	ldi	r20, 0x00	; 0
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	28 1b       	sub	r18, r24
    6444:	39 0b       	sbc	r19, r25
    6446:	4a 0b       	sbc	r20, r26
    6448:	5b 0b       	sbc	r21, r27
    644a:	04 c0       	rjmp	.+8      	; 0x6454 <__clzsi2+0x7e>
    644c:	16 95       	lsr	r17
    644e:	07 95       	ror	r16
    6450:	f7 94       	ror	r15
    6452:	e7 94       	ror	r14
    6454:	8a 95       	dec	r24
    6456:	d2 f7       	brpl	.-12     	; 0x644c <__clzsi2+0x76>
    6458:	f7 01       	movw	r30, r14
    645a:	e3 5a       	subi	r30, 0xA3	; 163
    645c:	f6 4f       	sbci	r31, 0xF6	; 246
    645e:	80 81       	ld	r24, Z
    6460:	28 1b       	sub	r18, r24
    6462:	31 09       	sbc	r19, r1
    6464:	41 09       	sbc	r20, r1
    6466:	51 09       	sbc	r21, r1
    6468:	c9 01       	movw	r24, r18
    646a:	1f 91       	pop	r17
    646c:	0f 91       	pop	r16
    646e:	ff 90       	pop	r15
    6470:	ef 90       	pop	r14
    6472:	08 95       	ret

00006474 <__pack_f>:
    6474:	df 92       	push	r13
    6476:	ef 92       	push	r14
    6478:	ff 92       	push	r15
    647a:	0f 93       	push	r16
    647c:	1f 93       	push	r17
    647e:	fc 01       	movw	r30, r24
    6480:	e4 80       	ldd	r14, Z+4	; 0x04
    6482:	f5 80       	ldd	r15, Z+5	; 0x05
    6484:	06 81       	ldd	r16, Z+6	; 0x06
    6486:	17 81       	ldd	r17, Z+7	; 0x07
    6488:	d1 80       	ldd	r13, Z+1	; 0x01
    648a:	80 81       	ld	r24, Z
    648c:	82 30       	cpi	r24, 0x02	; 2
    648e:	48 f4       	brcc	.+18     	; 0x64a2 <__pack_f+0x2e>
    6490:	80 e0       	ldi	r24, 0x00	; 0
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	a0 e1       	ldi	r26, 0x10	; 16
    6496:	b0 e0       	ldi	r27, 0x00	; 0
    6498:	e8 2a       	or	r14, r24
    649a:	f9 2a       	or	r15, r25
    649c:	0a 2b       	or	r16, r26
    649e:	1b 2b       	or	r17, r27
    64a0:	a5 c0       	rjmp	.+330    	; 0x65ec <__pack_f+0x178>
    64a2:	84 30       	cpi	r24, 0x04	; 4
    64a4:	09 f4       	brne	.+2      	; 0x64a8 <__pack_f+0x34>
    64a6:	9f c0       	rjmp	.+318    	; 0x65e6 <__pack_f+0x172>
    64a8:	82 30       	cpi	r24, 0x02	; 2
    64aa:	21 f4       	brne	.+8      	; 0x64b4 <__pack_f+0x40>
    64ac:	ee 24       	eor	r14, r14
    64ae:	ff 24       	eor	r15, r15
    64b0:	87 01       	movw	r16, r14
    64b2:	05 c0       	rjmp	.+10     	; 0x64be <__pack_f+0x4a>
    64b4:	e1 14       	cp	r14, r1
    64b6:	f1 04       	cpc	r15, r1
    64b8:	01 05       	cpc	r16, r1
    64ba:	11 05       	cpc	r17, r1
    64bc:	19 f4       	brne	.+6      	; 0x64c4 <__pack_f+0x50>
    64be:	e0 e0       	ldi	r30, 0x00	; 0
    64c0:	f0 e0       	ldi	r31, 0x00	; 0
    64c2:	96 c0       	rjmp	.+300    	; 0x65f0 <__pack_f+0x17c>
    64c4:	62 81       	ldd	r22, Z+2	; 0x02
    64c6:	73 81       	ldd	r23, Z+3	; 0x03
    64c8:	9f ef       	ldi	r25, 0xFF	; 255
    64ca:	62 38       	cpi	r22, 0x82	; 130
    64cc:	79 07       	cpc	r23, r25
    64ce:	0c f0       	brlt	.+2      	; 0x64d2 <__pack_f+0x5e>
    64d0:	5b c0       	rjmp	.+182    	; 0x6588 <__pack_f+0x114>
    64d2:	22 e8       	ldi	r18, 0x82	; 130
    64d4:	3f ef       	ldi	r19, 0xFF	; 255
    64d6:	26 1b       	sub	r18, r22
    64d8:	37 0b       	sbc	r19, r23
    64da:	2a 31       	cpi	r18, 0x1A	; 26
    64dc:	31 05       	cpc	r19, r1
    64de:	2c f0       	brlt	.+10     	; 0x64ea <__pack_f+0x76>
    64e0:	20 e0       	ldi	r18, 0x00	; 0
    64e2:	30 e0       	ldi	r19, 0x00	; 0
    64e4:	40 e0       	ldi	r20, 0x00	; 0
    64e6:	50 e0       	ldi	r21, 0x00	; 0
    64e8:	2a c0       	rjmp	.+84     	; 0x653e <__pack_f+0xca>
    64ea:	b8 01       	movw	r22, r16
    64ec:	a7 01       	movw	r20, r14
    64ee:	02 2e       	mov	r0, r18
    64f0:	04 c0       	rjmp	.+8      	; 0x64fa <__pack_f+0x86>
    64f2:	76 95       	lsr	r23
    64f4:	67 95       	ror	r22
    64f6:	57 95       	ror	r21
    64f8:	47 95       	ror	r20
    64fa:	0a 94       	dec	r0
    64fc:	d2 f7       	brpl	.-12     	; 0x64f2 <__pack_f+0x7e>
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	a0 e0       	ldi	r26, 0x00	; 0
    6504:	b0 e0       	ldi	r27, 0x00	; 0
    6506:	04 c0       	rjmp	.+8      	; 0x6510 <__pack_f+0x9c>
    6508:	88 0f       	add	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	aa 1f       	adc	r26, r26
    650e:	bb 1f       	adc	r27, r27
    6510:	2a 95       	dec	r18
    6512:	d2 f7       	brpl	.-12     	; 0x6508 <__pack_f+0x94>
    6514:	01 97       	sbiw	r24, 0x01	; 1
    6516:	a1 09       	sbc	r26, r1
    6518:	b1 09       	sbc	r27, r1
    651a:	8e 21       	and	r24, r14
    651c:	9f 21       	and	r25, r15
    651e:	a0 23       	and	r26, r16
    6520:	b1 23       	and	r27, r17
    6522:	00 97       	sbiw	r24, 0x00	; 0
    6524:	a1 05       	cpc	r26, r1
    6526:	b1 05       	cpc	r27, r1
    6528:	21 f0       	breq	.+8      	; 0x6532 <__pack_f+0xbe>
    652a:	81 e0       	ldi	r24, 0x01	; 1
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	a0 e0       	ldi	r26, 0x00	; 0
    6530:	b0 e0       	ldi	r27, 0x00	; 0
    6532:	9a 01       	movw	r18, r20
    6534:	ab 01       	movw	r20, r22
    6536:	28 2b       	or	r18, r24
    6538:	39 2b       	or	r19, r25
    653a:	4a 2b       	or	r20, r26
    653c:	5b 2b       	or	r21, r27
    653e:	da 01       	movw	r26, r20
    6540:	c9 01       	movw	r24, r18
    6542:	8f 77       	andi	r24, 0x7F	; 127
    6544:	90 70       	andi	r25, 0x00	; 0
    6546:	a0 70       	andi	r26, 0x00	; 0
    6548:	b0 70       	andi	r27, 0x00	; 0
    654a:	80 34       	cpi	r24, 0x40	; 64
    654c:	91 05       	cpc	r25, r1
    654e:	a1 05       	cpc	r26, r1
    6550:	b1 05       	cpc	r27, r1
    6552:	39 f4       	brne	.+14     	; 0x6562 <__pack_f+0xee>
    6554:	27 ff       	sbrs	r18, 7
    6556:	09 c0       	rjmp	.+18     	; 0x656a <__pack_f+0xf6>
    6558:	20 5c       	subi	r18, 0xC0	; 192
    655a:	3f 4f       	sbci	r19, 0xFF	; 255
    655c:	4f 4f       	sbci	r20, 0xFF	; 255
    655e:	5f 4f       	sbci	r21, 0xFF	; 255
    6560:	04 c0       	rjmp	.+8      	; 0x656a <__pack_f+0xf6>
    6562:	21 5c       	subi	r18, 0xC1	; 193
    6564:	3f 4f       	sbci	r19, 0xFF	; 255
    6566:	4f 4f       	sbci	r20, 0xFF	; 255
    6568:	5f 4f       	sbci	r21, 0xFF	; 255
    656a:	e0 e0       	ldi	r30, 0x00	; 0
    656c:	f0 e0       	ldi	r31, 0x00	; 0
    656e:	20 30       	cpi	r18, 0x00	; 0
    6570:	a0 e0       	ldi	r26, 0x00	; 0
    6572:	3a 07       	cpc	r19, r26
    6574:	a0 e0       	ldi	r26, 0x00	; 0
    6576:	4a 07       	cpc	r20, r26
    6578:	a0 e4       	ldi	r26, 0x40	; 64
    657a:	5a 07       	cpc	r21, r26
    657c:	10 f0       	brcs	.+4      	; 0x6582 <__pack_f+0x10e>
    657e:	e1 e0       	ldi	r30, 0x01	; 1
    6580:	f0 e0       	ldi	r31, 0x00	; 0
    6582:	79 01       	movw	r14, r18
    6584:	8a 01       	movw	r16, r20
    6586:	27 c0       	rjmp	.+78     	; 0x65d6 <__pack_f+0x162>
    6588:	60 38       	cpi	r22, 0x80	; 128
    658a:	71 05       	cpc	r23, r1
    658c:	64 f5       	brge	.+88     	; 0x65e6 <__pack_f+0x172>
    658e:	fb 01       	movw	r30, r22
    6590:	e1 58       	subi	r30, 0x81	; 129
    6592:	ff 4f       	sbci	r31, 0xFF	; 255
    6594:	d8 01       	movw	r26, r16
    6596:	c7 01       	movw	r24, r14
    6598:	8f 77       	andi	r24, 0x7F	; 127
    659a:	90 70       	andi	r25, 0x00	; 0
    659c:	a0 70       	andi	r26, 0x00	; 0
    659e:	b0 70       	andi	r27, 0x00	; 0
    65a0:	80 34       	cpi	r24, 0x40	; 64
    65a2:	91 05       	cpc	r25, r1
    65a4:	a1 05       	cpc	r26, r1
    65a6:	b1 05       	cpc	r27, r1
    65a8:	39 f4       	brne	.+14     	; 0x65b8 <__pack_f+0x144>
    65aa:	e7 fe       	sbrs	r14, 7
    65ac:	0d c0       	rjmp	.+26     	; 0x65c8 <__pack_f+0x154>
    65ae:	80 e4       	ldi	r24, 0x40	; 64
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	a0 e0       	ldi	r26, 0x00	; 0
    65b4:	b0 e0       	ldi	r27, 0x00	; 0
    65b6:	04 c0       	rjmp	.+8      	; 0x65c0 <__pack_f+0x14c>
    65b8:	8f e3       	ldi	r24, 0x3F	; 63
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	a0 e0       	ldi	r26, 0x00	; 0
    65be:	b0 e0       	ldi	r27, 0x00	; 0
    65c0:	e8 0e       	add	r14, r24
    65c2:	f9 1e       	adc	r15, r25
    65c4:	0a 1f       	adc	r16, r26
    65c6:	1b 1f       	adc	r17, r27
    65c8:	17 ff       	sbrs	r17, 7
    65ca:	05 c0       	rjmp	.+10     	; 0x65d6 <__pack_f+0x162>
    65cc:	16 95       	lsr	r17
    65ce:	07 95       	ror	r16
    65d0:	f7 94       	ror	r15
    65d2:	e7 94       	ror	r14
    65d4:	31 96       	adiw	r30, 0x01	; 1
    65d6:	87 e0       	ldi	r24, 0x07	; 7
    65d8:	16 95       	lsr	r17
    65da:	07 95       	ror	r16
    65dc:	f7 94       	ror	r15
    65de:	e7 94       	ror	r14
    65e0:	8a 95       	dec	r24
    65e2:	d1 f7       	brne	.-12     	; 0x65d8 <__pack_f+0x164>
    65e4:	05 c0       	rjmp	.+10     	; 0x65f0 <__pack_f+0x17c>
    65e6:	ee 24       	eor	r14, r14
    65e8:	ff 24       	eor	r15, r15
    65ea:	87 01       	movw	r16, r14
    65ec:	ef ef       	ldi	r30, 0xFF	; 255
    65ee:	f0 e0       	ldi	r31, 0x00	; 0
    65f0:	6e 2f       	mov	r22, r30
    65f2:	67 95       	ror	r22
    65f4:	66 27       	eor	r22, r22
    65f6:	67 95       	ror	r22
    65f8:	90 2f       	mov	r25, r16
    65fa:	9f 77       	andi	r25, 0x7F	; 127
    65fc:	d7 94       	ror	r13
    65fe:	dd 24       	eor	r13, r13
    6600:	d7 94       	ror	r13
    6602:	8e 2f       	mov	r24, r30
    6604:	86 95       	lsr	r24
    6606:	49 2f       	mov	r20, r25
    6608:	46 2b       	or	r20, r22
    660a:	58 2f       	mov	r21, r24
    660c:	5d 29       	or	r21, r13
    660e:	b7 01       	movw	r22, r14
    6610:	ca 01       	movw	r24, r20
    6612:	1f 91       	pop	r17
    6614:	0f 91       	pop	r16
    6616:	ff 90       	pop	r15
    6618:	ef 90       	pop	r14
    661a:	df 90       	pop	r13
    661c:	08 95       	ret

0000661e <__unpack_f>:
    661e:	fc 01       	movw	r30, r24
    6620:	db 01       	movw	r26, r22
    6622:	40 81       	ld	r20, Z
    6624:	51 81       	ldd	r21, Z+1	; 0x01
    6626:	22 81       	ldd	r18, Z+2	; 0x02
    6628:	62 2f       	mov	r22, r18
    662a:	6f 77       	andi	r22, 0x7F	; 127
    662c:	70 e0       	ldi	r23, 0x00	; 0
    662e:	22 1f       	adc	r18, r18
    6630:	22 27       	eor	r18, r18
    6632:	22 1f       	adc	r18, r18
    6634:	93 81       	ldd	r25, Z+3	; 0x03
    6636:	89 2f       	mov	r24, r25
    6638:	88 0f       	add	r24, r24
    663a:	82 2b       	or	r24, r18
    663c:	28 2f       	mov	r18, r24
    663e:	30 e0       	ldi	r19, 0x00	; 0
    6640:	99 1f       	adc	r25, r25
    6642:	99 27       	eor	r25, r25
    6644:	99 1f       	adc	r25, r25
    6646:	11 96       	adiw	r26, 0x01	; 1
    6648:	9c 93       	st	X, r25
    664a:	11 97       	sbiw	r26, 0x01	; 1
    664c:	21 15       	cp	r18, r1
    664e:	31 05       	cpc	r19, r1
    6650:	a9 f5       	brne	.+106    	; 0x66bc <__unpack_f+0x9e>
    6652:	41 15       	cp	r20, r1
    6654:	51 05       	cpc	r21, r1
    6656:	61 05       	cpc	r22, r1
    6658:	71 05       	cpc	r23, r1
    665a:	11 f4       	brne	.+4      	; 0x6660 <__unpack_f+0x42>
    665c:	82 e0       	ldi	r24, 0x02	; 2
    665e:	37 c0       	rjmp	.+110    	; 0x66ce <__unpack_f+0xb0>
    6660:	82 e8       	ldi	r24, 0x82	; 130
    6662:	9f ef       	ldi	r25, 0xFF	; 255
    6664:	13 96       	adiw	r26, 0x03	; 3
    6666:	9c 93       	st	X, r25
    6668:	8e 93       	st	-X, r24
    666a:	12 97       	sbiw	r26, 0x02	; 2
    666c:	9a 01       	movw	r18, r20
    666e:	ab 01       	movw	r20, r22
    6670:	67 e0       	ldi	r22, 0x07	; 7
    6672:	22 0f       	add	r18, r18
    6674:	33 1f       	adc	r19, r19
    6676:	44 1f       	adc	r20, r20
    6678:	55 1f       	adc	r21, r21
    667a:	6a 95       	dec	r22
    667c:	d1 f7       	brne	.-12     	; 0x6672 <__unpack_f+0x54>
    667e:	83 e0       	ldi	r24, 0x03	; 3
    6680:	8c 93       	st	X, r24
    6682:	0d c0       	rjmp	.+26     	; 0x669e <__unpack_f+0x80>
    6684:	22 0f       	add	r18, r18
    6686:	33 1f       	adc	r19, r19
    6688:	44 1f       	adc	r20, r20
    668a:	55 1f       	adc	r21, r21
    668c:	12 96       	adiw	r26, 0x02	; 2
    668e:	8d 91       	ld	r24, X+
    6690:	9c 91       	ld	r25, X
    6692:	13 97       	sbiw	r26, 0x03	; 3
    6694:	01 97       	sbiw	r24, 0x01	; 1
    6696:	13 96       	adiw	r26, 0x03	; 3
    6698:	9c 93       	st	X, r25
    669a:	8e 93       	st	-X, r24
    669c:	12 97       	sbiw	r26, 0x02	; 2
    669e:	20 30       	cpi	r18, 0x00	; 0
    66a0:	80 e0       	ldi	r24, 0x00	; 0
    66a2:	38 07       	cpc	r19, r24
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	48 07       	cpc	r20, r24
    66a8:	80 e4       	ldi	r24, 0x40	; 64
    66aa:	58 07       	cpc	r21, r24
    66ac:	58 f3       	brcs	.-42     	; 0x6684 <__unpack_f+0x66>
    66ae:	14 96       	adiw	r26, 0x04	; 4
    66b0:	2d 93       	st	X+, r18
    66b2:	3d 93       	st	X+, r19
    66b4:	4d 93       	st	X+, r20
    66b6:	5c 93       	st	X, r21
    66b8:	17 97       	sbiw	r26, 0x07	; 7
    66ba:	08 95       	ret
    66bc:	2f 3f       	cpi	r18, 0xFF	; 255
    66be:	31 05       	cpc	r19, r1
    66c0:	79 f4       	brne	.+30     	; 0x66e0 <__unpack_f+0xc2>
    66c2:	41 15       	cp	r20, r1
    66c4:	51 05       	cpc	r21, r1
    66c6:	61 05       	cpc	r22, r1
    66c8:	71 05       	cpc	r23, r1
    66ca:	19 f4       	brne	.+6      	; 0x66d2 <__unpack_f+0xb4>
    66cc:	84 e0       	ldi	r24, 0x04	; 4
    66ce:	8c 93       	st	X, r24
    66d0:	08 95       	ret
    66d2:	64 ff       	sbrs	r22, 4
    66d4:	03 c0       	rjmp	.+6      	; 0x66dc <__unpack_f+0xbe>
    66d6:	81 e0       	ldi	r24, 0x01	; 1
    66d8:	8c 93       	st	X, r24
    66da:	12 c0       	rjmp	.+36     	; 0x6700 <__unpack_f+0xe2>
    66dc:	1c 92       	st	X, r1
    66de:	10 c0       	rjmp	.+32     	; 0x6700 <__unpack_f+0xe2>
    66e0:	2f 57       	subi	r18, 0x7F	; 127
    66e2:	30 40       	sbci	r19, 0x00	; 0
    66e4:	13 96       	adiw	r26, 0x03	; 3
    66e6:	3c 93       	st	X, r19
    66e8:	2e 93       	st	-X, r18
    66ea:	12 97       	sbiw	r26, 0x02	; 2
    66ec:	83 e0       	ldi	r24, 0x03	; 3
    66ee:	8c 93       	st	X, r24
    66f0:	87 e0       	ldi	r24, 0x07	; 7
    66f2:	44 0f       	add	r20, r20
    66f4:	55 1f       	adc	r21, r21
    66f6:	66 1f       	adc	r22, r22
    66f8:	77 1f       	adc	r23, r23
    66fa:	8a 95       	dec	r24
    66fc:	d1 f7       	brne	.-12     	; 0x66f2 <__unpack_f+0xd4>
    66fe:	70 64       	ori	r23, 0x40	; 64
    6700:	14 96       	adiw	r26, 0x04	; 4
    6702:	4d 93       	st	X+, r20
    6704:	5d 93       	st	X+, r21
    6706:	6d 93       	st	X+, r22
    6708:	7c 93       	st	X, r23
    670a:	17 97       	sbiw	r26, 0x07	; 7
    670c:	08 95       	ret

0000670e <__fpcmp_parts_f>:
    670e:	1f 93       	push	r17
    6710:	dc 01       	movw	r26, r24
    6712:	fb 01       	movw	r30, r22
    6714:	9c 91       	ld	r25, X
    6716:	92 30       	cpi	r25, 0x02	; 2
    6718:	08 f4       	brcc	.+2      	; 0x671c <__fpcmp_parts_f+0xe>
    671a:	47 c0       	rjmp	.+142    	; 0x67aa <__fpcmp_parts_f+0x9c>
    671c:	80 81       	ld	r24, Z
    671e:	82 30       	cpi	r24, 0x02	; 2
    6720:	08 f4       	brcc	.+2      	; 0x6724 <__fpcmp_parts_f+0x16>
    6722:	43 c0       	rjmp	.+134    	; 0x67aa <__fpcmp_parts_f+0x9c>
    6724:	94 30       	cpi	r25, 0x04	; 4
    6726:	51 f4       	brne	.+20     	; 0x673c <__fpcmp_parts_f+0x2e>
    6728:	11 96       	adiw	r26, 0x01	; 1
    672a:	1c 91       	ld	r17, X
    672c:	84 30       	cpi	r24, 0x04	; 4
    672e:	99 f5       	brne	.+102    	; 0x6796 <__fpcmp_parts_f+0x88>
    6730:	81 81       	ldd	r24, Z+1	; 0x01
    6732:	68 2f       	mov	r22, r24
    6734:	70 e0       	ldi	r23, 0x00	; 0
    6736:	61 1b       	sub	r22, r17
    6738:	71 09       	sbc	r23, r1
    673a:	3f c0       	rjmp	.+126    	; 0x67ba <__fpcmp_parts_f+0xac>
    673c:	84 30       	cpi	r24, 0x04	; 4
    673e:	21 f0       	breq	.+8      	; 0x6748 <__fpcmp_parts_f+0x3a>
    6740:	92 30       	cpi	r25, 0x02	; 2
    6742:	31 f4       	brne	.+12     	; 0x6750 <__fpcmp_parts_f+0x42>
    6744:	82 30       	cpi	r24, 0x02	; 2
    6746:	b9 f1       	breq	.+110    	; 0x67b6 <__fpcmp_parts_f+0xa8>
    6748:	81 81       	ldd	r24, Z+1	; 0x01
    674a:	88 23       	and	r24, r24
    674c:	89 f1       	breq	.+98     	; 0x67b0 <__fpcmp_parts_f+0xa2>
    674e:	2d c0       	rjmp	.+90     	; 0x67aa <__fpcmp_parts_f+0x9c>
    6750:	11 96       	adiw	r26, 0x01	; 1
    6752:	1c 91       	ld	r17, X
    6754:	11 97       	sbiw	r26, 0x01	; 1
    6756:	82 30       	cpi	r24, 0x02	; 2
    6758:	f1 f0       	breq	.+60     	; 0x6796 <__fpcmp_parts_f+0x88>
    675a:	81 81       	ldd	r24, Z+1	; 0x01
    675c:	18 17       	cp	r17, r24
    675e:	d9 f4       	brne	.+54     	; 0x6796 <__fpcmp_parts_f+0x88>
    6760:	12 96       	adiw	r26, 0x02	; 2
    6762:	2d 91       	ld	r18, X+
    6764:	3c 91       	ld	r19, X
    6766:	13 97       	sbiw	r26, 0x03	; 3
    6768:	82 81       	ldd	r24, Z+2	; 0x02
    676a:	93 81       	ldd	r25, Z+3	; 0x03
    676c:	82 17       	cp	r24, r18
    676e:	93 07       	cpc	r25, r19
    6770:	94 f0       	brlt	.+36     	; 0x6796 <__fpcmp_parts_f+0x88>
    6772:	28 17       	cp	r18, r24
    6774:	39 07       	cpc	r19, r25
    6776:	bc f0       	brlt	.+46     	; 0x67a6 <__fpcmp_parts_f+0x98>
    6778:	14 96       	adiw	r26, 0x04	; 4
    677a:	8d 91       	ld	r24, X+
    677c:	9d 91       	ld	r25, X+
    677e:	0d 90       	ld	r0, X+
    6780:	bc 91       	ld	r27, X
    6782:	a0 2d       	mov	r26, r0
    6784:	24 81       	ldd	r18, Z+4	; 0x04
    6786:	35 81       	ldd	r19, Z+5	; 0x05
    6788:	46 81       	ldd	r20, Z+6	; 0x06
    678a:	57 81       	ldd	r21, Z+7	; 0x07
    678c:	28 17       	cp	r18, r24
    678e:	39 07       	cpc	r19, r25
    6790:	4a 07       	cpc	r20, r26
    6792:	5b 07       	cpc	r21, r27
    6794:	18 f4       	brcc	.+6      	; 0x679c <__fpcmp_parts_f+0x8e>
    6796:	11 23       	and	r17, r17
    6798:	41 f0       	breq	.+16     	; 0x67aa <__fpcmp_parts_f+0x9c>
    679a:	0a c0       	rjmp	.+20     	; 0x67b0 <__fpcmp_parts_f+0xa2>
    679c:	82 17       	cp	r24, r18
    679e:	93 07       	cpc	r25, r19
    67a0:	a4 07       	cpc	r26, r20
    67a2:	b5 07       	cpc	r27, r21
    67a4:	40 f4       	brcc	.+16     	; 0x67b6 <__fpcmp_parts_f+0xa8>
    67a6:	11 23       	and	r17, r17
    67a8:	19 f0       	breq	.+6      	; 0x67b0 <__fpcmp_parts_f+0xa2>
    67aa:	61 e0       	ldi	r22, 0x01	; 1
    67ac:	70 e0       	ldi	r23, 0x00	; 0
    67ae:	05 c0       	rjmp	.+10     	; 0x67ba <__fpcmp_parts_f+0xac>
    67b0:	6f ef       	ldi	r22, 0xFF	; 255
    67b2:	7f ef       	ldi	r23, 0xFF	; 255
    67b4:	02 c0       	rjmp	.+4      	; 0x67ba <__fpcmp_parts_f+0xac>
    67b6:	60 e0       	ldi	r22, 0x00	; 0
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	cb 01       	movw	r24, r22
    67bc:	1f 91       	pop	r17
    67be:	08 95       	ret

000067c0 <__udivmodqi4>:
    67c0:	99 1b       	sub	r25, r25
    67c2:	79 e0       	ldi	r23, 0x09	; 9
    67c4:	04 c0       	rjmp	.+8      	; 0x67ce <__udivmodqi4_ep>

000067c6 <__udivmodqi4_loop>:
    67c6:	99 1f       	adc	r25, r25
    67c8:	96 17       	cp	r25, r22
    67ca:	08 f0       	brcs	.+2      	; 0x67ce <__udivmodqi4_ep>
    67cc:	96 1b       	sub	r25, r22

000067ce <__udivmodqi4_ep>:
    67ce:	88 1f       	adc	r24, r24
    67d0:	7a 95       	dec	r23
    67d2:	c9 f7       	brne	.-14     	; 0x67c6 <__udivmodqi4_loop>
    67d4:	80 95       	com	r24
    67d6:	08 95       	ret

000067d8 <__divmodhi4>:
    67d8:	97 fb       	bst	r25, 7
    67da:	09 2e       	mov	r0, r25
    67dc:	07 26       	eor	r0, r23
    67de:	0a d0       	rcall	.+20     	; 0x67f4 <__divmodhi4_neg1>
    67e0:	77 fd       	sbrc	r23, 7
    67e2:	04 d0       	rcall	.+8      	; 0x67ec <__divmodhi4_neg2>
    67e4:	0c d0       	rcall	.+24     	; 0x67fe <__udivmodhi4>
    67e6:	06 d0       	rcall	.+12     	; 0x67f4 <__divmodhi4_neg1>
    67e8:	00 20       	and	r0, r0
    67ea:	1a f4       	brpl	.+6      	; 0x67f2 <__divmodhi4_exit>

000067ec <__divmodhi4_neg2>:
    67ec:	70 95       	com	r23
    67ee:	61 95       	neg	r22
    67f0:	7f 4f       	sbci	r23, 0xFF	; 255

000067f2 <__divmodhi4_exit>:
    67f2:	08 95       	ret

000067f4 <__divmodhi4_neg1>:
    67f4:	f6 f7       	brtc	.-4      	; 0x67f2 <__divmodhi4_exit>
    67f6:	90 95       	com	r25
    67f8:	81 95       	neg	r24
    67fa:	9f 4f       	sbci	r25, 0xFF	; 255
    67fc:	08 95       	ret

000067fe <__udivmodhi4>:
    67fe:	aa 1b       	sub	r26, r26
    6800:	bb 1b       	sub	r27, r27
    6802:	51 e1       	ldi	r21, 0x11	; 17
    6804:	07 c0       	rjmp	.+14     	; 0x6814 <__udivmodhi4_ep>

00006806 <__udivmodhi4_loop>:
    6806:	aa 1f       	adc	r26, r26
    6808:	bb 1f       	adc	r27, r27
    680a:	a6 17       	cp	r26, r22
    680c:	b7 07       	cpc	r27, r23
    680e:	10 f0       	brcs	.+4      	; 0x6814 <__udivmodhi4_ep>
    6810:	a6 1b       	sub	r26, r22
    6812:	b7 0b       	sbc	r27, r23

00006814 <__udivmodhi4_ep>:
    6814:	88 1f       	adc	r24, r24
    6816:	99 1f       	adc	r25, r25
    6818:	5a 95       	dec	r21
    681a:	a9 f7       	brne	.-22     	; 0x6806 <__udivmodhi4_loop>
    681c:	80 95       	com	r24
    681e:	90 95       	com	r25
    6820:	bc 01       	movw	r22, r24
    6822:	cd 01       	movw	r24, r26
    6824:	08 95       	ret

00006826 <__prologue_saves__>:
    6826:	2f 92       	push	r2
    6828:	3f 92       	push	r3
    682a:	4f 92       	push	r4
    682c:	5f 92       	push	r5
    682e:	6f 92       	push	r6
    6830:	7f 92       	push	r7
    6832:	8f 92       	push	r8
    6834:	9f 92       	push	r9
    6836:	af 92       	push	r10
    6838:	bf 92       	push	r11
    683a:	cf 92       	push	r12
    683c:	df 92       	push	r13
    683e:	ef 92       	push	r14
    6840:	ff 92       	push	r15
    6842:	0f 93       	push	r16
    6844:	1f 93       	push	r17
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	cd b7       	in	r28, 0x3d	; 61
    684c:	de b7       	in	r29, 0x3e	; 62
    684e:	ca 1b       	sub	r28, r26
    6850:	db 0b       	sbc	r29, r27
    6852:	0f b6       	in	r0, 0x3f	; 63
    6854:	f8 94       	cli
    6856:	de bf       	out	0x3e, r29	; 62
    6858:	0f be       	out	0x3f, r0	; 63
    685a:	cd bf       	out	0x3d, r28	; 61
    685c:	09 94       	ijmp

0000685e <__epilogue_restores__>:
    685e:	2a 88       	ldd	r2, Y+18	; 0x12
    6860:	39 88       	ldd	r3, Y+17	; 0x11
    6862:	48 88       	ldd	r4, Y+16	; 0x10
    6864:	5f 84       	ldd	r5, Y+15	; 0x0f
    6866:	6e 84       	ldd	r6, Y+14	; 0x0e
    6868:	7d 84       	ldd	r7, Y+13	; 0x0d
    686a:	8c 84       	ldd	r8, Y+12	; 0x0c
    686c:	9b 84       	ldd	r9, Y+11	; 0x0b
    686e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6870:	b9 84       	ldd	r11, Y+9	; 0x09
    6872:	c8 84       	ldd	r12, Y+8	; 0x08
    6874:	df 80       	ldd	r13, Y+7	; 0x07
    6876:	ee 80       	ldd	r14, Y+6	; 0x06
    6878:	fd 80       	ldd	r15, Y+5	; 0x05
    687a:	0c 81       	ldd	r16, Y+4	; 0x04
    687c:	1b 81       	ldd	r17, Y+3	; 0x03
    687e:	aa 81       	ldd	r26, Y+2	; 0x02
    6880:	b9 81       	ldd	r27, Y+1	; 0x01
    6882:	ce 0f       	add	r28, r30
    6884:	d1 1d       	adc	r29, r1
    6886:	0f b6       	in	r0, 0x3f	; 63
    6888:	f8 94       	cli
    688a:	de bf       	out	0x3e, r29	; 62
    688c:	0f be       	out	0x3f, r0	; 63
    688e:	cd bf       	out	0x3d, r28	; 61
    6890:	ed 01       	movw	r28, r26
    6892:	08 95       	ret

00006894 <malloc>:
    6894:	cf 93       	push	r28
    6896:	df 93       	push	r29
    6898:	bc 01       	movw	r22, r24
    689a:	82 30       	cpi	r24, 0x02	; 2
    689c:	91 05       	cpc	r25, r1
    689e:	10 f4       	brcc	.+4      	; 0x68a4 <malloc+0x10>
    68a0:	62 e0       	ldi	r22, 0x02	; 2
    68a2:	70 e0       	ldi	r23, 0x00	; 0
    68a4:	a0 91 78 0a 	lds	r26, 0x0A78
    68a8:	b0 91 79 0a 	lds	r27, 0x0A79
    68ac:	ed 01       	movw	r28, r26
    68ae:	e0 e0       	ldi	r30, 0x00	; 0
    68b0:	f0 e0       	ldi	r31, 0x00	; 0
    68b2:	40 e0       	ldi	r20, 0x00	; 0
    68b4:	50 e0       	ldi	r21, 0x00	; 0
    68b6:	21 c0       	rjmp	.+66     	; 0x68fa <malloc+0x66>
    68b8:	88 81       	ld	r24, Y
    68ba:	99 81       	ldd	r25, Y+1	; 0x01
    68bc:	86 17       	cp	r24, r22
    68be:	97 07       	cpc	r25, r23
    68c0:	69 f4       	brne	.+26     	; 0x68dc <malloc+0x48>
    68c2:	8a 81       	ldd	r24, Y+2	; 0x02
    68c4:	9b 81       	ldd	r25, Y+3	; 0x03
    68c6:	30 97       	sbiw	r30, 0x00	; 0
    68c8:	19 f0       	breq	.+6      	; 0x68d0 <malloc+0x3c>
    68ca:	93 83       	std	Z+3, r25	; 0x03
    68cc:	82 83       	std	Z+2, r24	; 0x02
    68ce:	04 c0       	rjmp	.+8      	; 0x68d8 <malloc+0x44>
    68d0:	90 93 79 0a 	sts	0x0A79, r25
    68d4:	80 93 78 0a 	sts	0x0A78, r24
    68d8:	fe 01       	movw	r30, r28
    68da:	34 c0       	rjmp	.+104    	; 0x6944 <malloc+0xb0>
    68dc:	68 17       	cp	r22, r24
    68de:	79 07       	cpc	r23, r25
    68e0:	38 f4       	brcc	.+14     	; 0x68f0 <malloc+0x5c>
    68e2:	41 15       	cp	r20, r1
    68e4:	51 05       	cpc	r21, r1
    68e6:	19 f0       	breq	.+6      	; 0x68ee <malloc+0x5a>
    68e8:	84 17       	cp	r24, r20
    68ea:	95 07       	cpc	r25, r21
    68ec:	08 f4       	brcc	.+2      	; 0x68f0 <malloc+0x5c>
    68ee:	ac 01       	movw	r20, r24
    68f0:	fe 01       	movw	r30, r28
    68f2:	8a 81       	ldd	r24, Y+2	; 0x02
    68f4:	9b 81       	ldd	r25, Y+3	; 0x03
    68f6:	9c 01       	movw	r18, r24
    68f8:	e9 01       	movw	r28, r18
    68fa:	20 97       	sbiw	r28, 0x00	; 0
    68fc:	e9 f6       	brne	.-70     	; 0x68b8 <malloc+0x24>
    68fe:	41 15       	cp	r20, r1
    6900:	51 05       	cpc	r21, r1
    6902:	a9 f1       	breq	.+106    	; 0x696e <malloc+0xda>
    6904:	ca 01       	movw	r24, r20
    6906:	86 1b       	sub	r24, r22
    6908:	97 0b       	sbc	r25, r23
    690a:	04 97       	sbiw	r24, 0x04	; 4
    690c:	08 f4       	brcc	.+2      	; 0x6910 <malloc+0x7c>
    690e:	ba 01       	movw	r22, r20
    6910:	e0 e0       	ldi	r30, 0x00	; 0
    6912:	f0 e0       	ldi	r31, 0x00	; 0
    6914:	2a c0       	rjmp	.+84     	; 0x696a <malloc+0xd6>
    6916:	8d 91       	ld	r24, X+
    6918:	9c 91       	ld	r25, X
    691a:	11 97       	sbiw	r26, 0x01	; 1
    691c:	84 17       	cp	r24, r20
    691e:	95 07       	cpc	r25, r21
    6920:	f9 f4       	brne	.+62     	; 0x6960 <malloc+0xcc>
    6922:	64 17       	cp	r22, r20
    6924:	75 07       	cpc	r23, r21
    6926:	81 f4       	brne	.+32     	; 0x6948 <malloc+0xb4>
    6928:	12 96       	adiw	r26, 0x02	; 2
    692a:	8d 91       	ld	r24, X+
    692c:	9c 91       	ld	r25, X
    692e:	13 97       	sbiw	r26, 0x03	; 3
    6930:	30 97       	sbiw	r30, 0x00	; 0
    6932:	19 f0       	breq	.+6      	; 0x693a <malloc+0xa6>
    6934:	93 83       	std	Z+3, r25	; 0x03
    6936:	82 83       	std	Z+2, r24	; 0x02
    6938:	04 c0       	rjmp	.+8      	; 0x6942 <malloc+0xae>
    693a:	90 93 79 0a 	sts	0x0A79, r25
    693e:	80 93 78 0a 	sts	0x0A78, r24
    6942:	fd 01       	movw	r30, r26
    6944:	32 96       	adiw	r30, 0x02	; 2
    6946:	4f c0       	rjmp	.+158    	; 0x69e6 <malloc+0x152>
    6948:	ca 01       	movw	r24, r20
    694a:	86 1b       	sub	r24, r22
    694c:	97 0b       	sbc	r25, r23
    694e:	fd 01       	movw	r30, r26
    6950:	e8 0f       	add	r30, r24
    6952:	f9 1f       	adc	r31, r25
    6954:	61 93       	st	Z+, r22
    6956:	71 93       	st	Z+, r23
    6958:	02 97       	sbiw	r24, 0x02	; 2
    695a:	8d 93       	st	X+, r24
    695c:	9c 93       	st	X, r25
    695e:	43 c0       	rjmp	.+134    	; 0x69e6 <malloc+0x152>
    6960:	fd 01       	movw	r30, r26
    6962:	82 81       	ldd	r24, Z+2	; 0x02
    6964:	93 81       	ldd	r25, Z+3	; 0x03
    6966:	9c 01       	movw	r18, r24
    6968:	d9 01       	movw	r26, r18
    696a:	10 97       	sbiw	r26, 0x00	; 0
    696c:	a1 f6       	brne	.-88     	; 0x6916 <malloc+0x82>
    696e:	80 91 76 0a 	lds	r24, 0x0A76
    6972:	90 91 77 0a 	lds	r25, 0x0A77
    6976:	89 2b       	or	r24, r25
    6978:	41 f4       	brne	.+16     	; 0x698a <malloc+0xf6>
    697a:	80 91 5f 0a 	lds	r24, 0x0A5F
    697e:	90 91 60 0a 	lds	r25, 0x0A60
    6982:	90 93 77 0a 	sts	0x0A77, r25
    6986:	80 93 76 0a 	sts	0x0A76, r24
    698a:	40 91 61 0a 	lds	r20, 0x0A61
    698e:	50 91 62 0a 	lds	r21, 0x0A62
    6992:	41 15       	cp	r20, r1
    6994:	51 05       	cpc	r21, r1
    6996:	41 f4       	brne	.+16     	; 0x69a8 <malloc+0x114>
    6998:	4d b7       	in	r20, 0x3d	; 61
    699a:	5e b7       	in	r21, 0x3e	; 62
    699c:	80 91 5d 0a 	lds	r24, 0x0A5D
    69a0:	90 91 5e 0a 	lds	r25, 0x0A5E
    69a4:	48 1b       	sub	r20, r24
    69a6:	59 0b       	sbc	r21, r25
    69a8:	20 91 76 0a 	lds	r18, 0x0A76
    69ac:	30 91 77 0a 	lds	r19, 0x0A77
    69b0:	24 17       	cp	r18, r20
    69b2:	35 07       	cpc	r19, r21
    69b4:	b0 f4       	brcc	.+44     	; 0x69e2 <malloc+0x14e>
    69b6:	ca 01       	movw	r24, r20
    69b8:	82 1b       	sub	r24, r18
    69ba:	93 0b       	sbc	r25, r19
    69bc:	86 17       	cp	r24, r22
    69be:	97 07       	cpc	r25, r23
    69c0:	80 f0       	brcs	.+32     	; 0x69e2 <malloc+0x14e>
    69c2:	ab 01       	movw	r20, r22
    69c4:	4e 5f       	subi	r20, 0xFE	; 254
    69c6:	5f 4f       	sbci	r21, 0xFF	; 255
    69c8:	84 17       	cp	r24, r20
    69ca:	95 07       	cpc	r25, r21
    69cc:	50 f0       	brcs	.+20     	; 0x69e2 <malloc+0x14e>
    69ce:	42 0f       	add	r20, r18
    69d0:	53 1f       	adc	r21, r19
    69d2:	50 93 77 0a 	sts	0x0A77, r21
    69d6:	40 93 76 0a 	sts	0x0A76, r20
    69da:	f9 01       	movw	r30, r18
    69dc:	61 93       	st	Z+, r22
    69de:	71 93       	st	Z+, r23
    69e0:	02 c0       	rjmp	.+4      	; 0x69e6 <malloc+0x152>
    69e2:	e0 e0       	ldi	r30, 0x00	; 0
    69e4:	f0 e0       	ldi	r31, 0x00	; 0
    69e6:	cf 01       	movw	r24, r30
    69e8:	df 91       	pop	r29
    69ea:	cf 91       	pop	r28
    69ec:	08 95       	ret

000069ee <free>:
    69ee:	cf 93       	push	r28
    69f0:	df 93       	push	r29
    69f2:	00 97       	sbiw	r24, 0x00	; 0
    69f4:	09 f4       	brne	.+2      	; 0x69f8 <free+0xa>
    69f6:	50 c0       	rjmp	.+160    	; 0x6a98 <free+0xaa>
    69f8:	ec 01       	movw	r28, r24
    69fa:	22 97       	sbiw	r28, 0x02	; 2
    69fc:	1b 82       	std	Y+3, r1	; 0x03
    69fe:	1a 82       	std	Y+2, r1	; 0x02
    6a00:	a0 91 78 0a 	lds	r26, 0x0A78
    6a04:	b0 91 79 0a 	lds	r27, 0x0A79
    6a08:	10 97       	sbiw	r26, 0x00	; 0
    6a0a:	09 f1       	breq	.+66     	; 0x6a4e <free+0x60>
    6a0c:	40 e0       	ldi	r20, 0x00	; 0
    6a0e:	50 e0       	ldi	r21, 0x00	; 0
    6a10:	ac 17       	cp	r26, r28
    6a12:	bd 07       	cpc	r27, r29
    6a14:	08 f1       	brcs	.+66     	; 0x6a58 <free+0x6a>
    6a16:	bb 83       	std	Y+3, r27	; 0x03
    6a18:	aa 83       	std	Y+2, r26	; 0x02
    6a1a:	fe 01       	movw	r30, r28
    6a1c:	21 91       	ld	r18, Z+
    6a1e:	31 91       	ld	r19, Z+
    6a20:	e2 0f       	add	r30, r18
    6a22:	f3 1f       	adc	r31, r19
    6a24:	ae 17       	cp	r26, r30
    6a26:	bf 07       	cpc	r27, r31
    6a28:	79 f4       	brne	.+30     	; 0x6a48 <free+0x5a>
    6a2a:	8d 91       	ld	r24, X+
    6a2c:	9c 91       	ld	r25, X
    6a2e:	11 97       	sbiw	r26, 0x01	; 1
    6a30:	28 0f       	add	r18, r24
    6a32:	39 1f       	adc	r19, r25
    6a34:	2e 5f       	subi	r18, 0xFE	; 254
    6a36:	3f 4f       	sbci	r19, 0xFF	; 255
    6a38:	39 83       	std	Y+1, r19	; 0x01
    6a3a:	28 83       	st	Y, r18
    6a3c:	12 96       	adiw	r26, 0x02	; 2
    6a3e:	8d 91       	ld	r24, X+
    6a40:	9c 91       	ld	r25, X
    6a42:	13 97       	sbiw	r26, 0x03	; 3
    6a44:	9b 83       	std	Y+3, r25	; 0x03
    6a46:	8a 83       	std	Y+2, r24	; 0x02
    6a48:	41 15       	cp	r20, r1
    6a4a:	51 05       	cpc	r21, r1
    6a4c:	71 f4       	brne	.+28     	; 0x6a6a <free+0x7c>
    6a4e:	d0 93 79 0a 	sts	0x0A79, r29
    6a52:	c0 93 78 0a 	sts	0x0A78, r28
    6a56:	20 c0       	rjmp	.+64     	; 0x6a98 <free+0xaa>
    6a58:	12 96       	adiw	r26, 0x02	; 2
    6a5a:	8d 91       	ld	r24, X+
    6a5c:	9c 91       	ld	r25, X
    6a5e:	13 97       	sbiw	r26, 0x03	; 3
    6a60:	ad 01       	movw	r20, r26
    6a62:	00 97       	sbiw	r24, 0x00	; 0
    6a64:	11 f0       	breq	.+4      	; 0x6a6a <free+0x7c>
    6a66:	dc 01       	movw	r26, r24
    6a68:	d3 cf       	rjmp	.-90     	; 0x6a10 <free+0x22>
    6a6a:	fa 01       	movw	r30, r20
    6a6c:	d3 83       	std	Z+3, r29	; 0x03
    6a6e:	c2 83       	std	Z+2, r28	; 0x02
    6a70:	21 91       	ld	r18, Z+
    6a72:	31 91       	ld	r19, Z+
    6a74:	e2 0f       	add	r30, r18
    6a76:	f3 1f       	adc	r31, r19
    6a78:	ce 17       	cp	r28, r30
    6a7a:	df 07       	cpc	r29, r31
    6a7c:	69 f4       	brne	.+26     	; 0x6a98 <free+0xaa>
    6a7e:	88 81       	ld	r24, Y
    6a80:	99 81       	ldd	r25, Y+1	; 0x01
    6a82:	28 0f       	add	r18, r24
    6a84:	39 1f       	adc	r19, r25
    6a86:	2e 5f       	subi	r18, 0xFE	; 254
    6a88:	3f 4f       	sbci	r19, 0xFF	; 255
    6a8a:	fa 01       	movw	r30, r20
    6a8c:	31 83       	std	Z+1, r19	; 0x01
    6a8e:	20 83       	st	Z, r18
    6a90:	8a 81       	ldd	r24, Y+2	; 0x02
    6a92:	9b 81       	ldd	r25, Y+3	; 0x03
    6a94:	93 83       	std	Z+3, r25	; 0x03
    6a96:	82 83       	std	Z+2, r24	; 0x02
    6a98:	df 91       	pop	r29
    6a9a:	cf 91       	pop	r28
    6a9c:	08 95       	ret

00006a9e <itoa>:
    6a9e:	fb 01       	movw	r30, r22
    6aa0:	9f 01       	movw	r18, r30
    6aa2:	e8 94       	clt
    6aa4:	42 30       	cpi	r20, 0x02	; 2
    6aa6:	c4 f0       	brlt	.+48     	; 0x6ad8 <itoa+0x3a>
    6aa8:	45 32       	cpi	r20, 0x25	; 37
    6aaa:	b4 f4       	brge	.+44     	; 0x6ad8 <itoa+0x3a>
    6aac:	4a 30       	cpi	r20, 0x0A	; 10
    6aae:	29 f4       	brne	.+10     	; 0x6aba <itoa+0x1c>
    6ab0:	97 fb       	bst	r25, 7
    6ab2:	1e f4       	brtc	.+6      	; 0x6aba <itoa+0x1c>
    6ab4:	90 95       	com	r25
    6ab6:	81 95       	neg	r24
    6ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aba:	64 2f       	mov	r22, r20
    6abc:	77 27       	eor	r23, r23
    6abe:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__udivmodhi4>
    6ac2:	80 5d       	subi	r24, 0xD0	; 208
    6ac4:	8a 33       	cpi	r24, 0x3A	; 58
    6ac6:	0c f0       	brlt	.+2      	; 0x6aca <itoa+0x2c>
    6ac8:	89 5d       	subi	r24, 0xD9	; 217
    6aca:	81 93       	st	Z+, r24
    6acc:	cb 01       	movw	r24, r22
    6ace:	00 97       	sbiw	r24, 0x00	; 0
    6ad0:	a1 f7       	brne	.-24     	; 0x6aba <itoa+0x1c>
    6ad2:	16 f4       	brtc	.+4      	; 0x6ad8 <itoa+0x3a>
    6ad4:	5d e2       	ldi	r21, 0x2D	; 45
    6ad6:	51 93       	st	Z+, r21
    6ad8:	10 82       	st	Z, r1
    6ada:	c9 01       	movw	r24, r18
    6adc:	0c 94 16 36 	jmp	0x6c2c	; 0x6c2c <strrev>

00006ae0 <cos>:
    6ae0:	03 d0       	rcall	.+6      	; 0x6ae8 <__fp_rempio2>
    6ae2:	e3 95       	inc	r30
    6ae4:	28 c0       	rjmp	.+80     	; 0x6b36 <__fp_sinus>
    6ae6:	26 c1       	rjmp	.+588    	; 0x6d34 <__fp_nan>

00006ae8 <__fp_rempio2>:
    6ae8:	3f d0       	rcall	.+126    	; 0x6b68 <__fp_splitA>
    6aea:	e8 f3       	brcs	.-6      	; 0x6ae6 <cos+0x6>
    6aec:	e8 94       	clt
    6aee:	e0 e0       	ldi	r30, 0x00	; 0
    6af0:	bb 27       	eor	r27, r27
    6af2:	9f 57       	subi	r25, 0x7F	; 127
    6af4:	f0 f0       	brcs	.+60     	; 0x6b32 <__fp_rempio2+0x4a>
    6af6:	2a ed       	ldi	r18, 0xDA	; 218
    6af8:	3f e0       	ldi	r19, 0x0F	; 15
    6afa:	49 ec       	ldi	r20, 0xC9	; 201
    6afc:	06 c0       	rjmp	.+12     	; 0x6b0a <__fp_rempio2+0x22>
    6afe:	ee 0f       	add	r30, r30
    6b00:	bb 0f       	add	r27, r27
    6b02:	66 1f       	adc	r22, r22
    6b04:	77 1f       	adc	r23, r23
    6b06:	88 1f       	adc	r24, r24
    6b08:	28 f0       	brcs	.+10     	; 0x6b14 <__fp_rempio2+0x2c>
    6b0a:	b2 3a       	cpi	r27, 0xA2	; 162
    6b0c:	62 07       	cpc	r22, r18
    6b0e:	73 07       	cpc	r23, r19
    6b10:	84 07       	cpc	r24, r20
    6b12:	28 f0       	brcs	.+10     	; 0x6b1e <__fp_rempio2+0x36>
    6b14:	b2 5a       	subi	r27, 0xA2	; 162
    6b16:	62 0b       	sbc	r22, r18
    6b18:	73 0b       	sbc	r23, r19
    6b1a:	84 0b       	sbc	r24, r20
    6b1c:	e3 95       	inc	r30
    6b1e:	9a 95       	dec	r25
    6b20:	72 f7       	brpl	.-36     	; 0x6afe <__fp_rempio2+0x16>
    6b22:	80 38       	cpi	r24, 0x80	; 128
    6b24:	30 f4       	brcc	.+12     	; 0x6b32 <__fp_rempio2+0x4a>
    6b26:	9a 95       	dec	r25
    6b28:	bb 0f       	add	r27, r27
    6b2a:	66 1f       	adc	r22, r22
    6b2c:	77 1f       	adc	r23, r23
    6b2e:	88 1f       	adc	r24, r24
    6b30:	d2 f7       	brpl	.-12     	; 0x6b26 <__fp_rempio2+0x3e>
    6b32:	90 48       	sbci	r25, 0x80	; 128
    6b34:	f3 c0       	rjmp	.+486    	; 0x6d1c <__fp_mpack_finite>

00006b36 <__fp_sinus>:
    6b36:	ef 93       	push	r30
    6b38:	e0 ff       	sbrs	r30, 0
    6b3a:	06 c0       	rjmp	.+12     	; 0x6b48 <__fp_sinus+0x12>
    6b3c:	a2 ea       	ldi	r26, 0xA2	; 162
    6b3e:	2a ed       	ldi	r18, 0xDA	; 218
    6b40:	3f e0       	ldi	r19, 0x0F	; 15
    6b42:	49 ec       	ldi	r20, 0xC9	; 201
    6b44:	5f eb       	ldi	r21, 0xBF	; 191
    6b46:	8f d0       	rcall	.+286    	; 0x6c66 <__addsf3x>
    6b48:	1e d1       	rcall	.+572    	; 0x6d86 <__fp_round>
    6b4a:	0f 90       	pop	r0
    6b4c:	03 94       	inc	r0
    6b4e:	01 fc       	sbrc	r0, 1
    6b50:	90 58       	subi	r25, 0x80	; 128
    6b52:	ec e8       	ldi	r30, 0x8C	; 140
    6b54:	f0 e0       	ldi	r31, 0x00	; 0
    6b56:	f8 c0       	rjmp	.+496    	; 0x6d48 <__fp_powsodd>

00006b58 <__fp_split3>:
    6b58:	57 fd       	sbrc	r21, 7
    6b5a:	90 58       	subi	r25, 0x80	; 128
    6b5c:	44 0f       	add	r20, r20
    6b5e:	55 1f       	adc	r21, r21
    6b60:	59 f0       	breq	.+22     	; 0x6b78 <__fp_splitA+0x10>
    6b62:	5f 3f       	cpi	r21, 0xFF	; 255
    6b64:	71 f0       	breq	.+28     	; 0x6b82 <__fp_splitA+0x1a>
    6b66:	47 95       	ror	r20

00006b68 <__fp_splitA>:
    6b68:	88 0f       	add	r24, r24
    6b6a:	97 fb       	bst	r25, 7
    6b6c:	99 1f       	adc	r25, r25
    6b6e:	61 f0       	breq	.+24     	; 0x6b88 <__fp_splitA+0x20>
    6b70:	9f 3f       	cpi	r25, 0xFF	; 255
    6b72:	79 f0       	breq	.+30     	; 0x6b92 <__fp_splitA+0x2a>
    6b74:	87 95       	ror	r24
    6b76:	08 95       	ret
    6b78:	12 16       	cp	r1, r18
    6b7a:	13 06       	cpc	r1, r19
    6b7c:	14 06       	cpc	r1, r20
    6b7e:	55 1f       	adc	r21, r21
    6b80:	f2 cf       	rjmp	.-28     	; 0x6b66 <__fp_split3+0xe>
    6b82:	46 95       	lsr	r20
    6b84:	f1 df       	rcall	.-30     	; 0x6b68 <__fp_splitA>
    6b86:	08 c0       	rjmp	.+16     	; 0x6b98 <__fp_splitA+0x30>
    6b88:	16 16       	cp	r1, r22
    6b8a:	17 06       	cpc	r1, r23
    6b8c:	18 06       	cpc	r1, r24
    6b8e:	99 1f       	adc	r25, r25
    6b90:	f1 cf       	rjmp	.-30     	; 0x6b74 <__fp_splitA+0xc>
    6b92:	86 95       	lsr	r24
    6b94:	71 05       	cpc	r23, r1
    6b96:	61 05       	cpc	r22, r1
    6b98:	08 94       	sec
    6b9a:	08 95       	ret

00006b9c <sin>:
    6b9c:	9f 93       	push	r25
    6b9e:	a4 df       	rcall	.-184    	; 0x6ae8 <__fp_rempio2>
    6ba0:	0f 90       	pop	r0
    6ba2:	07 fc       	sbrc	r0, 7
    6ba4:	ee 5f       	subi	r30, 0xFE	; 254
    6ba6:	c7 cf       	rjmp	.-114    	; 0x6b36 <__fp_sinus>
    6ba8:	11 f4       	brne	.+4      	; 0x6bae <sin+0x12>
    6baa:	0e f4       	brtc	.+2      	; 0x6bae <sin+0x12>
    6bac:	c3 c0       	rjmp	.+390    	; 0x6d34 <__fp_nan>
    6bae:	b4 c0       	rjmp	.+360    	; 0x6d18 <__fp_mpack>

00006bb0 <sqrt>:
    6bb0:	db df       	rcall	.-74     	; 0x6b68 <__fp_splitA>
    6bb2:	d0 f3       	brcs	.-12     	; 0x6ba8 <sin+0xc>
    6bb4:	99 23       	and	r25, r25
    6bb6:	d9 f3       	breq	.-10     	; 0x6bae <sin+0x12>
    6bb8:	ce f3       	brts	.-14     	; 0x6bac <sin+0x10>
    6bba:	9f 57       	subi	r25, 0x7F	; 127
    6bbc:	55 0b       	sbc	r21, r21
    6bbe:	87 ff       	sbrs	r24, 7
    6bc0:	bc d0       	rcall	.+376    	; 0x6d3a <__fp_norm2>
    6bc2:	00 24       	eor	r0, r0
    6bc4:	a0 e6       	ldi	r26, 0x60	; 96
    6bc6:	40 ea       	ldi	r20, 0xA0	; 160
    6bc8:	90 01       	movw	r18, r0
    6bca:	80 58       	subi	r24, 0x80	; 128
    6bcc:	56 95       	lsr	r21
    6bce:	97 95       	ror	r25
    6bd0:	28 f4       	brcc	.+10     	; 0x6bdc <sqrt+0x2c>
    6bd2:	80 5c       	subi	r24, 0xC0	; 192
    6bd4:	66 0f       	add	r22, r22
    6bd6:	77 1f       	adc	r23, r23
    6bd8:	88 1f       	adc	r24, r24
    6bda:	20 f0       	brcs	.+8      	; 0x6be4 <sqrt+0x34>
    6bdc:	26 17       	cp	r18, r22
    6bde:	37 07       	cpc	r19, r23
    6be0:	48 07       	cpc	r20, r24
    6be2:	30 f4       	brcc	.+12     	; 0x6bf0 <sqrt+0x40>
    6be4:	62 1b       	sub	r22, r18
    6be6:	73 0b       	sbc	r23, r19
    6be8:	84 0b       	sbc	r24, r20
    6bea:	20 29       	or	r18, r0
    6bec:	31 29       	or	r19, r1
    6bee:	4a 2b       	or	r20, r26
    6bf0:	a6 95       	lsr	r26
    6bf2:	17 94       	ror	r1
    6bf4:	07 94       	ror	r0
    6bf6:	20 25       	eor	r18, r0
    6bf8:	31 25       	eor	r19, r1
    6bfa:	4a 27       	eor	r20, r26
    6bfc:	58 f7       	brcc	.-42     	; 0x6bd4 <sqrt+0x24>
    6bfe:	66 0f       	add	r22, r22
    6c00:	77 1f       	adc	r23, r23
    6c02:	88 1f       	adc	r24, r24
    6c04:	20 f0       	brcs	.+8      	; 0x6c0e <sqrt+0x5e>
    6c06:	26 17       	cp	r18, r22
    6c08:	37 07       	cpc	r19, r23
    6c0a:	48 07       	cpc	r20, r24
    6c0c:	30 f4       	brcc	.+12     	; 0x6c1a <sqrt+0x6a>
    6c0e:	62 0b       	sbc	r22, r18
    6c10:	73 0b       	sbc	r23, r19
    6c12:	84 0b       	sbc	r24, r20
    6c14:	20 0d       	add	r18, r0
    6c16:	31 1d       	adc	r19, r1
    6c18:	41 1d       	adc	r20, r1
    6c1a:	a0 95       	com	r26
    6c1c:	81 f7       	brne	.-32     	; 0x6bfe <sqrt+0x4e>
    6c1e:	b9 01       	movw	r22, r18
    6c20:	84 2f       	mov	r24, r20
    6c22:	91 58       	subi	r25, 0x81	; 129
    6c24:	88 0f       	add	r24, r24
    6c26:	96 95       	lsr	r25
    6c28:	87 95       	ror	r24
    6c2a:	08 95       	ret

00006c2c <strrev>:
    6c2c:	dc 01       	movw	r26, r24
    6c2e:	fc 01       	movw	r30, r24
    6c30:	67 2f       	mov	r22, r23
    6c32:	71 91       	ld	r23, Z+
    6c34:	77 23       	and	r23, r23
    6c36:	e1 f7       	brne	.-8      	; 0x6c30 <strrev+0x4>
    6c38:	32 97       	sbiw	r30, 0x02	; 2
    6c3a:	04 c0       	rjmp	.+8      	; 0x6c44 <strrev+0x18>
    6c3c:	7c 91       	ld	r23, X
    6c3e:	6d 93       	st	X+, r22
    6c40:	70 83       	st	Z, r23
    6c42:	62 91       	ld	r22, -Z
    6c44:	ae 17       	cp	r26, r30
    6c46:	bf 07       	cpc	r27, r31
    6c48:	c8 f3       	brcs	.-14     	; 0x6c3c <strrev+0x10>
    6c4a:	08 95       	ret
    6c4c:	8e d0       	rcall	.+284    	; 0x6d6a <__fp_pscA>
    6c4e:	30 f0       	brcs	.+12     	; 0x6c5c <strrev+0x30>
    6c50:	93 d0       	rcall	.+294    	; 0x6d78 <__fp_pscB>
    6c52:	20 f0       	brcs	.+8      	; 0x6c5c <strrev+0x30>
    6c54:	31 f4       	brne	.+12     	; 0x6c62 <strrev+0x36>
    6c56:	9f 3f       	cpi	r25, 0xFF	; 255
    6c58:	11 f4       	brne	.+4      	; 0x6c5e <strrev+0x32>
    6c5a:	1e f4       	brtc	.+6      	; 0x6c62 <strrev+0x36>
    6c5c:	6b c0       	rjmp	.+214    	; 0x6d34 <__fp_nan>
    6c5e:	0e f4       	brtc	.+2      	; 0x6c62 <strrev+0x36>
    6c60:	e0 95       	com	r30
    6c62:	e7 fb       	bst	r30, 7
    6c64:	53 c0       	rjmp	.+166    	; 0x6d0c <__fp_inf>

00006c66 <__addsf3x>:
    6c66:	e9 2f       	mov	r30, r25
    6c68:	77 df       	rcall	.-274    	; 0x6b58 <__fp_split3>
    6c6a:	80 f3       	brcs	.-32     	; 0x6c4c <strrev+0x20>
    6c6c:	ba 17       	cp	r27, r26
    6c6e:	62 07       	cpc	r22, r18
    6c70:	73 07       	cpc	r23, r19
    6c72:	84 07       	cpc	r24, r20
    6c74:	95 07       	cpc	r25, r21
    6c76:	18 f0       	brcs	.+6      	; 0x6c7e <__addsf3x+0x18>
    6c78:	71 f4       	brne	.+28     	; 0x6c96 <__addsf3x+0x30>
    6c7a:	9e f5       	brtc	.+102    	; 0x6ce2 <__addsf3x+0x7c>
    6c7c:	95 c0       	rjmp	.+298    	; 0x6da8 <__fp_zero>
    6c7e:	0e f4       	brtc	.+2      	; 0x6c82 <__addsf3x+0x1c>
    6c80:	e0 95       	com	r30
    6c82:	0b 2e       	mov	r0, r27
    6c84:	ba 2f       	mov	r27, r26
    6c86:	a0 2d       	mov	r26, r0
    6c88:	0b 01       	movw	r0, r22
    6c8a:	b9 01       	movw	r22, r18
    6c8c:	90 01       	movw	r18, r0
    6c8e:	0c 01       	movw	r0, r24
    6c90:	ca 01       	movw	r24, r20
    6c92:	a0 01       	movw	r20, r0
    6c94:	11 24       	eor	r1, r1
    6c96:	ff 27       	eor	r31, r31
    6c98:	59 1b       	sub	r21, r25
    6c9a:	99 f0       	breq	.+38     	; 0x6cc2 <__addsf3x+0x5c>
    6c9c:	59 3f       	cpi	r21, 0xF9	; 249
    6c9e:	50 f4       	brcc	.+20     	; 0x6cb4 <__addsf3x+0x4e>
    6ca0:	50 3e       	cpi	r21, 0xE0	; 224
    6ca2:	68 f1       	brcs	.+90     	; 0x6cfe <__addsf3x+0x98>
    6ca4:	1a 16       	cp	r1, r26
    6ca6:	f0 40       	sbci	r31, 0x00	; 0
    6ca8:	a2 2f       	mov	r26, r18
    6caa:	23 2f       	mov	r18, r19
    6cac:	34 2f       	mov	r19, r20
    6cae:	44 27       	eor	r20, r20
    6cb0:	58 5f       	subi	r21, 0xF8	; 248
    6cb2:	f3 cf       	rjmp	.-26     	; 0x6c9a <__addsf3x+0x34>
    6cb4:	46 95       	lsr	r20
    6cb6:	37 95       	ror	r19
    6cb8:	27 95       	ror	r18
    6cba:	a7 95       	ror	r26
    6cbc:	f0 40       	sbci	r31, 0x00	; 0
    6cbe:	53 95       	inc	r21
    6cc0:	c9 f7       	brne	.-14     	; 0x6cb4 <__addsf3x+0x4e>
    6cc2:	7e f4       	brtc	.+30     	; 0x6ce2 <__addsf3x+0x7c>
    6cc4:	1f 16       	cp	r1, r31
    6cc6:	ba 0b       	sbc	r27, r26
    6cc8:	62 0b       	sbc	r22, r18
    6cca:	73 0b       	sbc	r23, r19
    6ccc:	84 0b       	sbc	r24, r20
    6cce:	ba f0       	brmi	.+46     	; 0x6cfe <__addsf3x+0x98>
    6cd0:	91 50       	subi	r25, 0x01	; 1
    6cd2:	a1 f0       	breq	.+40     	; 0x6cfc <__addsf3x+0x96>
    6cd4:	ff 0f       	add	r31, r31
    6cd6:	bb 1f       	adc	r27, r27
    6cd8:	66 1f       	adc	r22, r22
    6cda:	77 1f       	adc	r23, r23
    6cdc:	88 1f       	adc	r24, r24
    6cde:	c2 f7       	brpl	.-16     	; 0x6cd0 <__addsf3x+0x6a>
    6ce0:	0e c0       	rjmp	.+28     	; 0x6cfe <__addsf3x+0x98>
    6ce2:	ba 0f       	add	r27, r26
    6ce4:	62 1f       	adc	r22, r18
    6ce6:	73 1f       	adc	r23, r19
    6ce8:	84 1f       	adc	r24, r20
    6cea:	48 f4       	brcc	.+18     	; 0x6cfe <__addsf3x+0x98>
    6cec:	87 95       	ror	r24
    6cee:	77 95       	ror	r23
    6cf0:	67 95       	ror	r22
    6cf2:	b7 95       	ror	r27
    6cf4:	f7 95       	ror	r31
    6cf6:	9e 3f       	cpi	r25, 0xFE	; 254
    6cf8:	08 f0       	brcs	.+2      	; 0x6cfc <__addsf3x+0x96>
    6cfa:	b3 cf       	rjmp	.-154    	; 0x6c62 <strrev+0x36>
    6cfc:	93 95       	inc	r25
    6cfe:	88 0f       	add	r24, r24
    6d00:	08 f0       	brcs	.+2      	; 0x6d04 <__addsf3x+0x9e>
    6d02:	99 27       	eor	r25, r25
    6d04:	ee 0f       	add	r30, r30
    6d06:	97 95       	ror	r25
    6d08:	87 95       	ror	r24
    6d0a:	08 95       	ret

00006d0c <__fp_inf>:
    6d0c:	97 f9       	bld	r25, 7
    6d0e:	9f 67       	ori	r25, 0x7F	; 127
    6d10:	80 e8       	ldi	r24, 0x80	; 128
    6d12:	70 e0       	ldi	r23, 0x00	; 0
    6d14:	60 e0       	ldi	r22, 0x00	; 0
    6d16:	08 95       	ret

00006d18 <__fp_mpack>:
    6d18:	9f 3f       	cpi	r25, 0xFF	; 255
    6d1a:	31 f0       	breq	.+12     	; 0x6d28 <__fp_mpack_finite+0xc>

00006d1c <__fp_mpack_finite>:
    6d1c:	91 50       	subi	r25, 0x01	; 1
    6d1e:	20 f4       	brcc	.+8      	; 0x6d28 <__fp_mpack_finite+0xc>
    6d20:	87 95       	ror	r24
    6d22:	77 95       	ror	r23
    6d24:	67 95       	ror	r22
    6d26:	b7 95       	ror	r27
    6d28:	88 0f       	add	r24, r24
    6d2a:	91 1d       	adc	r25, r1
    6d2c:	96 95       	lsr	r25
    6d2e:	87 95       	ror	r24
    6d30:	97 f9       	bld	r25, 7
    6d32:	08 95       	ret

00006d34 <__fp_nan>:
    6d34:	9f ef       	ldi	r25, 0xFF	; 255
    6d36:	80 ec       	ldi	r24, 0xC0	; 192
    6d38:	08 95       	ret

00006d3a <__fp_norm2>:
    6d3a:	91 50       	subi	r25, 0x01	; 1
    6d3c:	50 40       	sbci	r21, 0x00	; 0
    6d3e:	66 0f       	add	r22, r22
    6d40:	77 1f       	adc	r23, r23
    6d42:	88 1f       	adc	r24, r24
    6d44:	d2 f7       	brpl	.-12     	; 0x6d3a <__fp_norm2>
    6d46:	08 95       	ret

00006d48 <__fp_powsodd>:
    6d48:	9f 93       	push	r25
    6d4a:	8f 93       	push	r24
    6d4c:	7f 93       	push	r23
    6d4e:	6f 93       	push	r22
    6d50:	ff 93       	push	r31
    6d52:	ef 93       	push	r30
    6d54:	9b 01       	movw	r18, r22
    6d56:	ac 01       	movw	r20, r24
    6d58:	86 d8       	rcall	.-3828   	; 0x5e66 <__mulsf3>
    6d5a:	ef 91       	pop	r30
    6d5c:	ff 91       	pop	r31
    6d5e:	2b d0       	rcall	.+86     	; 0x6db6 <__fp_powser>
    6d60:	2f 91       	pop	r18
    6d62:	3f 91       	pop	r19
    6d64:	4f 91       	pop	r20
    6d66:	5f 91       	pop	r21
    6d68:	7e c8       	rjmp	.-3844   	; 0x5e66 <__mulsf3>

00006d6a <__fp_pscA>:
    6d6a:	00 24       	eor	r0, r0
    6d6c:	0a 94       	dec	r0
    6d6e:	16 16       	cp	r1, r22
    6d70:	17 06       	cpc	r1, r23
    6d72:	18 06       	cpc	r1, r24
    6d74:	09 06       	cpc	r0, r25
    6d76:	08 95       	ret

00006d78 <__fp_pscB>:
    6d78:	00 24       	eor	r0, r0
    6d7a:	0a 94       	dec	r0
    6d7c:	12 16       	cp	r1, r18
    6d7e:	13 06       	cpc	r1, r19
    6d80:	14 06       	cpc	r1, r20
    6d82:	05 06       	cpc	r0, r21
    6d84:	08 95       	ret

00006d86 <__fp_round>:
    6d86:	09 2e       	mov	r0, r25
    6d88:	03 94       	inc	r0
    6d8a:	00 0c       	add	r0, r0
    6d8c:	11 f4       	brne	.+4      	; 0x6d92 <__fp_round+0xc>
    6d8e:	88 23       	and	r24, r24
    6d90:	52 f0       	brmi	.+20     	; 0x6da6 <__fp_round+0x20>
    6d92:	bb 0f       	add	r27, r27
    6d94:	40 f4       	brcc	.+16     	; 0x6da6 <__fp_round+0x20>
    6d96:	bf 2b       	or	r27, r31
    6d98:	11 f4       	brne	.+4      	; 0x6d9e <__fp_round+0x18>
    6d9a:	60 ff       	sbrs	r22, 0
    6d9c:	04 c0       	rjmp	.+8      	; 0x6da6 <__fp_round+0x20>
    6d9e:	6f 5f       	subi	r22, 0xFF	; 255
    6da0:	7f 4f       	sbci	r23, 0xFF	; 255
    6da2:	8f 4f       	sbci	r24, 0xFF	; 255
    6da4:	9f 4f       	sbci	r25, 0xFF	; 255
    6da6:	08 95       	ret

00006da8 <__fp_zero>:
    6da8:	e8 94       	clt

00006daa <__fp_szero>:
    6daa:	bb 27       	eor	r27, r27
    6dac:	66 27       	eor	r22, r22
    6dae:	77 27       	eor	r23, r23
    6db0:	cb 01       	movw	r24, r22
    6db2:	97 f9       	bld	r25, 7
    6db4:	08 95       	ret

00006db6 <__fp_powser>:
    6db6:	df 93       	push	r29
    6db8:	cf 93       	push	r28
    6dba:	1f 93       	push	r17
    6dbc:	0f 93       	push	r16
    6dbe:	ff 92       	push	r15
    6dc0:	ef 92       	push	r14
    6dc2:	df 92       	push	r13
    6dc4:	7b 01       	movw	r14, r22
    6dc6:	8c 01       	movw	r16, r24
    6dc8:	68 94       	set
    6dca:	05 c0       	rjmp	.+10     	; 0x6dd6 <__fp_powser+0x20>
    6dcc:	da 2e       	mov	r13, r26
    6dce:	ef 01       	movw	r28, r30
    6dd0:	21 d0       	rcall	.+66     	; 0x6e14 <__mulsf3x>
    6dd2:	fe 01       	movw	r30, r28
    6dd4:	e8 94       	clt
    6dd6:	a5 91       	lpm	r26, Z+
    6dd8:	25 91       	lpm	r18, Z+
    6dda:	35 91       	lpm	r19, Z+
    6ddc:	45 91       	lpm	r20, Z+
    6dde:	55 91       	lpm	r21, Z+
    6de0:	ae f3       	brts	.-22     	; 0x6dcc <__fp_powser+0x16>
    6de2:	ef 01       	movw	r28, r30
    6de4:	40 df       	rcall	.-384    	; 0x6c66 <__addsf3x>
    6de6:	fe 01       	movw	r30, r28
    6de8:	97 01       	movw	r18, r14
    6dea:	a8 01       	movw	r20, r16
    6dec:	da 94       	dec	r13
    6dee:	79 f7       	brne	.-34     	; 0x6dce <__fp_powser+0x18>
    6df0:	df 90       	pop	r13
    6df2:	ef 90       	pop	r14
    6df4:	ff 90       	pop	r15
    6df6:	0f 91       	pop	r16
    6df8:	1f 91       	pop	r17
    6dfa:	cf 91       	pop	r28
    6dfc:	df 91       	pop	r29
    6dfe:	08 95       	ret
    6e00:	b4 df       	rcall	.-152    	; 0x6d6a <__fp_pscA>
    6e02:	28 f0       	brcs	.+10     	; 0x6e0e <__fp_powser+0x58>
    6e04:	b9 df       	rcall	.-142    	; 0x6d78 <__fp_pscB>
    6e06:	18 f0       	brcs	.+6      	; 0x6e0e <__fp_powser+0x58>
    6e08:	95 23       	and	r25, r21
    6e0a:	09 f0       	breq	.+2      	; 0x6e0e <__fp_powser+0x58>
    6e0c:	7f cf       	rjmp	.-258    	; 0x6d0c <__fp_inf>
    6e0e:	92 cf       	rjmp	.-220    	; 0x6d34 <__fp_nan>
    6e10:	11 24       	eor	r1, r1
    6e12:	cb cf       	rjmp	.-106    	; 0x6daa <__fp_szero>

00006e14 <__mulsf3x>:
    6e14:	a1 de       	rcall	.-702    	; 0x6b58 <__fp_split3>
    6e16:	a0 f3       	brcs	.-24     	; 0x6e00 <__fp_powser+0x4a>

00006e18 <__mulsf3_pse>:
    6e18:	95 9f       	mul	r25, r21
    6e1a:	d1 f3       	breq	.-12     	; 0x6e10 <__fp_powser+0x5a>
    6e1c:	95 0f       	add	r25, r21
    6e1e:	50 e0       	ldi	r21, 0x00	; 0
    6e20:	55 1f       	adc	r21, r21
    6e22:	62 9f       	mul	r22, r18
    6e24:	f0 01       	movw	r30, r0
    6e26:	72 9f       	mul	r23, r18
    6e28:	bb 27       	eor	r27, r27
    6e2a:	f0 0d       	add	r31, r0
    6e2c:	b1 1d       	adc	r27, r1
    6e2e:	63 9f       	mul	r22, r19
    6e30:	aa 27       	eor	r26, r26
    6e32:	f0 0d       	add	r31, r0
    6e34:	b1 1d       	adc	r27, r1
    6e36:	aa 1f       	adc	r26, r26
    6e38:	64 9f       	mul	r22, r20
    6e3a:	66 27       	eor	r22, r22
    6e3c:	b0 0d       	add	r27, r0
    6e3e:	a1 1d       	adc	r26, r1
    6e40:	66 1f       	adc	r22, r22
    6e42:	82 9f       	mul	r24, r18
    6e44:	22 27       	eor	r18, r18
    6e46:	b0 0d       	add	r27, r0
    6e48:	a1 1d       	adc	r26, r1
    6e4a:	62 1f       	adc	r22, r18
    6e4c:	73 9f       	mul	r23, r19
    6e4e:	b0 0d       	add	r27, r0
    6e50:	a1 1d       	adc	r26, r1
    6e52:	62 1f       	adc	r22, r18
    6e54:	83 9f       	mul	r24, r19
    6e56:	a0 0d       	add	r26, r0
    6e58:	61 1d       	adc	r22, r1
    6e5a:	22 1f       	adc	r18, r18
    6e5c:	74 9f       	mul	r23, r20
    6e5e:	33 27       	eor	r19, r19
    6e60:	a0 0d       	add	r26, r0
    6e62:	61 1d       	adc	r22, r1
    6e64:	23 1f       	adc	r18, r19
    6e66:	84 9f       	mul	r24, r20
    6e68:	60 0d       	add	r22, r0
    6e6a:	21 1d       	adc	r18, r1
    6e6c:	82 2f       	mov	r24, r18
    6e6e:	76 2f       	mov	r23, r22
    6e70:	6a 2f       	mov	r22, r26
    6e72:	11 24       	eor	r1, r1
    6e74:	9f 57       	subi	r25, 0x7F	; 127
    6e76:	50 40       	sbci	r21, 0x00	; 0
    6e78:	8a f0       	brmi	.+34     	; 0x6e9c <__mulsf3_pse+0x84>
    6e7a:	e1 f0       	breq	.+56     	; 0x6eb4 <__mulsf3_pse+0x9c>
    6e7c:	88 23       	and	r24, r24
    6e7e:	4a f0       	brmi	.+18     	; 0x6e92 <__mulsf3_pse+0x7a>
    6e80:	ee 0f       	add	r30, r30
    6e82:	ff 1f       	adc	r31, r31
    6e84:	bb 1f       	adc	r27, r27
    6e86:	66 1f       	adc	r22, r22
    6e88:	77 1f       	adc	r23, r23
    6e8a:	88 1f       	adc	r24, r24
    6e8c:	91 50       	subi	r25, 0x01	; 1
    6e8e:	50 40       	sbci	r21, 0x00	; 0
    6e90:	a9 f7       	brne	.-22     	; 0x6e7c <__mulsf3_pse+0x64>
    6e92:	9e 3f       	cpi	r25, 0xFE	; 254
    6e94:	51 05       	cpc	r21, r1
    6e96:	70 f0       	brcs	.+28     	; 0x6eb4 <__mulsf3_pse+0x9c>
    6e98:	39 cf       	rjmp	.-398    	; 0x6d0c <__fp_inf>
    6e9a:	87 cf       	rjmp	.-242    	; 0x6daa <__fp_szero>
    6e9c:	5f 3f       	cpi	r21, 0xFF	; 255
    6e9e:	ec f3       	brlt	.-6      	; 0x6e9a <__mulsf3_pse+0x82>
    6ea0:	98 3e       	cpi	r25, 0xE8	; 232
    6ea2:	dc f3       	brlt	.-10     	; 0x6e9a <__mulsf3_pse+0x82>
    6ea4:	86 95       	lsr	r24
    6ea6:	77 95       	ror	r23
    6ea8:	67 95       	ror	r22
    6eaa:	b7 95       	ror	r27
    6eac:	f7 95       	ror	r31
    6eae:	e7 95       	ror	r30
    6eb0:	9f 5f       	subi	r25, 0xFF	; 255
    6eb2:	c1 f7       	brne	.-16     	; 0x6ea4 <__mulsf3_pse+0x8c>
    6eb4:	fe 2b       	or	r31, r30
    6eb6:	88 0f       	add	r24, r24
    6eb8:	91 1d       	adc	r25, r1
    6eba:	96 95       	lsr	r25
    6ebc:	87 95       	ror	r24
    6ebe:	97 f9       	bld	r25, 7
    6ec0:	08 95       	ret

00006ec2 <_exit>:
    6ec2:	f8 94       	cli

00006ec4 <__stop_program>:
    6ec4:	ff cf       	rjmp	.-2      	; 0x6ec4 <__stop_program>
