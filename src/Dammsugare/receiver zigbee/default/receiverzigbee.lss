
receiverzigbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000082  00800100  00800100  00000268  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e3  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000020c  00000000  00000000  00000653  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027d  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000183  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include "zigbeeny.h" 

int main(void){
zigbee_init();
  ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <zigbee_init>


}
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <zigbee_init>:





		DDRB=0xFF; // C direction out
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 b9       	out	0x04, r24	; 4
		PORTB=0xFF; //Port C high
  dc:	85 b9       	out	0x05, r24	; 5

		UCSR0A = 0x00; // Clear any previous RXC/TXC flags
  de:	10 92 c0 00 	sts	0x00C0, r1
		   UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   //  TX and RX enable
  e2:	80 91 c1 00 	lds	r24, 0x00C1
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	80 93 c1 00 	sts	0x00C1, r24
		   UCSR0C |=  (1 << UCSZ00) | (1 << UCSZ01); // 8-bits in a byte 
  ec:	80 91 c2 00 	lds	r24, 0x00C2
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24

		   UBRR0L = BAUD_PRESCALE; // Low byte of the baud prescale 
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	80 93 c4 00 	sts	0x00C4, r24
		   UBRR0H = (BAUD_PRESCALE >> 8); // High byte of the baud prescale
  fc:	10 92 c5 00 	sts	0x00C5, r1

		   UCSR0B |= (1 << RXCIE0); // Enable the USART Recieve Complete interrupt
 100:	80 91 c1 00 	lds	r24, 0x00C1
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 93 c1 00 	sts	0x00C1, r24
		   //sei(); // Enable global interrupts
		   SREG|=1<<7;
 10a:	8f b7       	in	r24, 0x3f	; 63
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8f bf       	out	0x3f, r24	; 63

		rxByteCount=0; //Set variables to zero as a starting value
 110:	10 92 00 01 	sts	0x0100, r1
		rxPacketSize=0;
 114:	10 92 81 01 	sts	0x0181, r1
 118:	20 e3       	ldi	r18, 0x30	; 48
 11a:	35 e7       	ldi	r19, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11c:	49 e1       	ldi	r20, 0x19	; 25
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	05 c0       	rjmp	.+10     	; 0x12c <zigbee_init+0x54>
 122:	ca 01       	movw	r24, r20
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <zigbee_init+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	21 15       	cp	r18, r1
 12e:	31 05       	cpc	r19, r1
 130:	c1 f7       	brne	.-16     	; 0x122 <zigbee_init+0x4a>
   
		}


		void ProcessPacket(void) {
			PORTB=rxBuffer[6];
 132:	80 91 07 01 	lds	r24, 0x0107
 136:	85 b9       	out	0x05, r24	; 5
 138:	20 e3       	ldi	r18, 0x30	; 48
 13a:	35 e7       	ldi	r19, 0x75	; 117
 13c:	f2 cf       	rjmp	.-28     	; 0x122 <zigbee_init+0x4a>

0000013e <__vector_20>:

		}
return 0;	} 

		ISR(USART0_RX_vect) //Interrupt for received bytes
		{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	0b b6       	in	r0, 0x3b	; 59
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31

		

			if(rxByteCount==0){
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	88 23       	and	r24, r24
 15a:	61 f4       	brne	.+24     	; 0x174 <__vector_20+0x36>
				rxPacketSize=UDR0; rxBuffer[rxByteCount]=rxPacketSize; //The first byte sets the length of the rest (stored in a buffer)
 15c:	80 91 c6 00 	lds	r24, 0x00C6
 160:	80 93 81 01 	sts	0x0181, r24
 164:	e0 91 00 01 	lds	r30, 0x0100
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 91 81 01 	lds	r24, 0x0181
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 83       	st	Z, r24
				}
			if(rxByteCount <= rxPacketSize && rxByteCount != 0){rxBuffer[rxByteCount]=UDR0;}// Store the rest of the bytes
 174:	90 91 00 01 	lds	r25, 0x0100
 178:	80 91 81 01 	lds	r24, 0x0181
 17c:	89 17       	cp	r24, r25
 17e:	60 f0       	brcs	.+24     	; 0x198 <__vector_20+0x5a>
 180:	80 91 00 01 	lds	r24, 0x0100
 184:	88 23       	and	r24, r24
 186:	41 f0       	breq	.+16     	; 0x198 <__vector_20+0x5a>
 188:	e0 91 00 01 	lds	r30, 0x0100
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 91 c6 00 	lds	r24, 0x00C6
 192:	ef 5f       	subi	r30, 0xFF	; 255
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	80 83       	st	Z, r24

		rxByteCount++;
 198:	80 91 00 01 	lds	r24, 0x0100
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 00 01 	sts	0x0100, r24


			if (rxByteCount>rxPacketSize){ rxByteCount=0; //full packet resets the counter
 1a2:	90 91 00 01 	lds	r25, 0x0100
 1a6:	80 91 81 01 	lds	r24, 0x0181
 1aa:	89 17       	cp	r24, r25
 1ac:	10 f4       	brcc	.+4      	; 0x1b2 <__vector_20+0x74>
 1ae:	10 92 00 01 	sts	0x0100, r1

		
			} 

   
		}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <ProcessPacket>:


		void ProcessPacket(void) {
			PORTB=rxBuffer[6];
 1c8:	80 91 07 01 	lds	r24, 0x0107
 1cc:	85 b9       	out	0x05, r24	; 5
		

		}
 1ce:	08 95       	ret

000001d0 <txPacket>:

		void txPacket(unsigned char * Packet, char txSize) {
 1d0:	ac 01       	movw	r20, r24
 1d2:	20 e0       	ldi	r18, 0x00	; 0
		
		
		

		
				while (!(UCSR0A & (1<<UDRE0))) {} // transmit when USART is ready
 1d4:	80 91 c0 00 	lds	r24, 0x00C0
 1d8:	85 ff       	sbrs	r24, 5
 1da:	fc cf       	rjmp	.-8      	; 0x1d4 <txPacket+0x4>
	
		
				UDR0 = Packet[txByteNr]; //transmit byte
 1dc:	fa 01       	movw	r30, r20
 1de:	e2 0f       	add	r30, r18
 1e0:	f1 1d       	adc	r31, r1
 1e2:	80 81       	ld	r24, Z
 1e4:	80 93 c6 00 	sts	0x00C6, r24

		
				txByteNr++;	
 1e8:	2f 5f       	subi	r18, 0xFF	; 255

		void txPacket(unsigned char * Packet, char txSize) {
			unsigned char txByteNr=0;
	
	
			while (txByteNr <= txSize) { // One byte at a time
 1ea:	62 17       	cp	r22, r18
 1ec:	98 f7       	brcc	.-26     	; 0x1d4 <txPacket+0x4>

		
				txByteNr++;	
		
			}
		}
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
